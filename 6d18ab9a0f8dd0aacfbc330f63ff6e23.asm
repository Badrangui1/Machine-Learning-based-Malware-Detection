push    ebp
mov     ebp, esp
sub     esp, 108h
push    ebx
push    esi
push    edi
mov     edi, [ebp+arg_8]
push    dword ptr [edi+108h]
call    sub_4055bc
test    eax, eax
pop     ecx
jnz     loc_4010a9
mov     esi, [ebp+arg_4]
xor     ecx, ecx
mov     eax, [esi]
sub     eax, ecx
jz      loc_4010c9
dec     eax
jz      short loc_4010b0
sub     eax, 3
jz      short loc_40106d
dec     eax
jnz     short loc_40105f
cmp     dword ptr [esi+0ch], 0ffffd122h
push    10010h
push    dword ptr [esi+8]
jnz     short loc_401066
push    offset text
push    dword ptr [edi+108h]
call    ds:messageboxa
xor     eax, eax
pop     edi
pop     esi
pop     ebx
leave
retn
push    offset aerrordecodingf
jmp     short loc_401053
lea     eax, [ebp+buffer]
push    100h
push    eax
push    13d6h
push    hinstance
call    ds:loadstringa
push    dword ptr [esi+0ch]
lea     eax, [ebp+buffer]
push    dword ptr [esi+8]
push    eax
push    dword ptr [edi+108h]
call    sub_406165
add     esp, 10h
test    eax, eax
jz      short loc_40105f
mov     eax, 0ffffd12dh
jmp     short loc_401061
push    ecx
push    dword ptr [esi+8]
push    offset format
push    dword ptr [edi+108h]
call    sub_4055d1
add     esp, 10h
jmp     short loc_40105f
mov     ebx, [esi+10h]
mov     eax, [esi+14h]
mov     edx, ebx
mov     [ebp+var_4], eax
or      edx, eax
jz      short loc_40105f
push    ecx
push    ecx
push    64h
push    dword ptr [esi+0ch]
push    dword ptr [esi+8]
call    __allmul
push    [ebp+var_4]
push    ebx
push    edx
push    eax
call    __aulldiv
push    eax
push    dword ptr [edi+108h]
call    sub_405526
add     esp, 0ch
jmp     loc_401061
push    ebp
mov     ebp, esp
push    ecx
push    ebx
push    esi
push    edi
push    [ebp+str]
call    _strlen
mov     ebx, [ebp+arg_0]
mov     [ebp+maxcount], eax
push    ebx
call    _strlen
pop     ecx
mov     esi, eax
sub     esi, [ebp+maxcount]
pop     ecx
push    0
pop     edi
js      short loc_40114c
push    [ebp+maxcount]
lea     eax, [edi+ebx]
push    [ebp+str]
push    eax
call    __strnicmp
add     esp, 0ch
test    eax, eax
jz      short loc_401148
inc     edi
cmp     edi, esi
jle     short loc_40112d
cmp     edi, esi
jle     short loc_401150
xor     eax, eax
jmp     short loc_401153
lea     eax, [edi+ebx]
pop     edi
pop     esi
pop     ebx
leave
retn
push    ebp
mov     ebp, esp
sub     esp, 308h
mov     eax, [ebp+hwnd]
push    ebx
push    esi
push    edi
mov     edi, [ebp+lpmem]
mov     esi, ds:loadstringa
push    64h
xor     ebx, ebx
mov     [edi+108h], eax
lea     eax, [ebp+buffer]
push    eax
push    13dah
push    hinstance
mov     [ebp+var_4], ebx
call    esi
mov     eax, [edi+108h]
push    104h
mov     [ebp+hwnd], eax
lea     eax, [ebp+filename]
push    eax
push    ebx
mov     [ebp+lpmem], ebx
call    ds:getmodulefilenamea
lea     eax, [ebp+filename]
push    offset mode
push    eax
call    _fopen
mov     ebx, eax
pop     ecx
test    ebx, ebx
pop     ecx
jz      loc_401256
push    ebx
call    _fflush
pop     ecx
lea     eax, [ebp+buf1]
push    2
push    eax
call    sub_40135d
cdq
neg     eax
adc     edx, 0
pop     ecx
neg     edx
push    edx
push    eax
push    ebx
call    __fileno
pop     ecx
push    eax
call    __lseeki64
lea     eax, [ebp+buf1]
push    ebx
push    eax
call    sub_401361
push    ebx
call    _fclose
add     esp, 1ch
cmp     [ebp+var_2a], 0
jnz     short loc_40124d
push    6
lea     eax, [ebp+buf1]
push    offset apgpsda
push    eax
call    _memcmp
add     esp, 0ch
test    eax, eax
jnz     short loc_40124d
lea     eax, [ebp+filename]
push    offset adecodersdaexe
push    eax
xor     ebx, ebx
call    sub_401106
pop     ecx
test    eax, eax
pop     ecx
jz      short loc_401279
push    offset source
push    eax
call    _strcpy
pop     ecx
pop     ecx
test    ebx, ebx
jnz     short loc_401289
jmp     loc_4011b0
lea     eax, [ebp+text]
push    64h
push    eax
push    13e1h
push    hinstance
call    esi
push    10010h
lea     eax, [ebp+filename]
jmp     short loc_4012c1
lea     eax, [ebp+text]
push    64h
push    eax
push    13e2h
jmp     short loc_4012ae
push    6
lea     eax, [ebp+buf1]
push    offset apgpsda
push    eax
call    _memcmp
add     esp, 0ch
test    eax, eax
jz      short loc_4012d9
lea     eax, [ebp+text]
push    64h
push    eax
push    13dbh
push    hinstance
call    esi
push    10010h
lea     eax, [ebp+buffer]
push    eax
lea     eax, [ebp+text]
push    eax
push    [ebp+hwnd]
call    ds:messageboxa
mov     eax, 0ffffd12dh
jmp     short loc_401358
lea     eax, [ebp+var_308]
push    eax
call    sub_405f19
lea     eax, [ebp+var_308]
push    eax
lea     eax, [ebp+lpmem]
push    eax
lea     eax, [ebp+buf1]
push    eax
push    dword ptr [edi+108h]
call    sub_405e9e
add     esp, 14h
test    eax, eax
jnz     short loc_401358
push    edi
lea     eax, [ebp+var_308]
push    offset sub_401000
push    eax
lea     eax, [ebp+filename]
push    eax
lea     eax, [ebp+var_4]
push    eax
lea     eax, [ebp+buf1]
push    [ebp+lpmem]
push    eax
call    sub_403498
mov     esi, eax
add     esp, 1ch
test    esi, esi
jz      short loc_40133c
push    [ebp+var_4]
call    sub_402fd5
pop     ecx
push    80h
push    0
push    [ebp+lpmem]
call    _memset
push    [ebp+lpmem]
call    sub_40959b
add     esp, 10h
mov     eax, esi
pop     edi
pop     esi
pop     ebx
leave
retn
push    2ch
pop     eax
retn
push    ebx
push    esi
push    edi
mov     edi, [esp+0ch+stream]
mov     esi, [esp+0ch+buffer]
push    edi
push    1
pop     ebx
push    ebx
push    6
push    esi
call    sub_409ba9
push    edi
push    ebx
lea     eax, [esi+6]
push    4
push    eax
call    sub_409ba9
push    edi
push    ebx
lea     eax, [esi+0ah]
push    8
push    eax
call    sub_409ba9
push    edi
push    ebx
lea     eax, [esi+12h]
push    8
push    eax
call    sub_409ba9
add     esp, 40h
lea     eax, [esi+1ah]
push    edi
push    ebx
push    8
push    eax
call    sub_409ba9
push    edi
push    ebx
lea     eax, [esi+22h]
push    2
push    eax
call    sub_409ba9
push    edi
push    ebx
add     esi, 24h
push    8
push    esi
call    sub_409ba9
add     esp, 30h
pop     edi
pop     esi
pop     ebx
retn
push    ebp
mov     ebp, esp
sub     esp, 110h
push    esi
xor     esi, esi
push    110h
lea     eax, [ebp+var_110]
push    esi
push    eax
call    _memset
push    esi
push    esi
push    esi
push    esi
lea     eax, [ebp+var_110]
push    esi
push    eax
push    offset sub_401158
push    [ebp+hwndparent]
call    sub_405475
add     esp, 2ch
pop     esi
leave
retn
push    ebp
mov     ebp, esp
sub     esp, 10h
mov     eax, [ebp+msg]
dec     eax
jz      short loc_40142e
push    [ebp+lparam]
push    [ebp+wparam]
push    [ebp+msg]
push    [ebp+hwnd]
call    ds:defwindowproca
jmp     short locret_40147a
lea     eax, [ebp+rect]
push    esi
push    eax
push    [ebp+hwnd]
call    ds:getwindowrect
mov     esi, ds:getsystemmetrics
push    5
push    0
push    0
push    1
call    esi
mov     ecx, [ebp+rect.top]
sub     ecx, [ebp+rect.bottom]
add     eax, ecx
cdq
sub     eax, edx
sar     eax, 1
push    eax
push    0
call    esi
mov     ecx, [ebp+rect.left]
sub     ecx, [ebp+rect.right]
add     eax, ecx
cdq
sub     eax, edx
sar     eax, 1
push    eax
push    0
push    [ebp+hwnd]
call    ds:setwindowpos
xor     eax, eax
pop     esi
leave
retn    10h
push    ebp
mov     ebp, esp
sub     esp, 28h
push    ebx
mov     ebx, [ebp+hinstance]
push    esi
push    edi
push    offset libfilename
mov     hinstance, ebx
call    ds:loadlibrarya
call    ds:initcommoncontrols
lea     eax, [ebp+wndclass]
xor     edi, edi
mov     esi, offset windowname
push    eax
mov     [ebp+wndclass.style], edi
mov     [ebp+wndclass.lpfnwndproc], offset sub_40140e
mov     [ebp+wndclass.cbclsextra], edi
mov     [ebp+wndclass.cbwndextra], edi
mov     [ebp+wndclass.hinstance], ebx
mov     [ebp+wndclass.hicon], edi
mov     [ebp+wndclass.hcursor], edi
mov     [ebp+wndclass.hbrbackground], edi
mov     [ebp+wndclass.lpszmenuname], edi
mov     [ebp+wndclass.lpszclassname], esi
call    ds:registerclassa
push    edi
push    ebx
push    edi
mov     eax, 80000000h
push    edi
push    eax
push    eax
push    eax
push    eax
push    0cf0000h
push    esi
push    esi
push    edi
call    ds:createwindowexa
mov     esi, eax
push    edi
push    esi
call    ds:showwindow
push    esi
call    ds:updatewindow
push    esi
call    sub_4013d1
pop     ecx
push    1
pop     eax
pop     edi
pop     esi
pop     ebx
leave
retn    10h
push    ebp
mov     ebp, esp
sub     esp, 440h
push    ebx
push    esi
push    edi
push    38h
lea     eax, [ebp+var_40]
xor     ebx, ebx
push    offset a113
push    eax
mov     [ebp+var_20], offset sub_4016c3
mov     [ebp+var_1c], offset sub_4016d3
mov     [ebp+var_18], ebx
call    sub_406da0
lea     eax, [ebp+var_440]
mov     edi, 200h
mov     [ebp+var_40], eax
lea     eax, [ebp+var_240]
add     esp, 0ch
mov     [ebp+var_34], eax
mov     [ebp+var_3c], ebx
mov     [ebp+var_30], edi
mov     [ebp+var_8], ebx
jmp     short loc_401567
xor     ebx, ebx
cmp     [ebp+var_8], 0ffffffffh
jz      short loc_4015a0
cmp     [ebp+var_3c], ebx
jnz     short loc_40159d
xor     esi, esi
cmp     esi, edi
jnb     short loc_401591
push    [ebp+arg_0]
call    sub_403021
mov     [ebp+esi+var_440], al
inc     esi
cmp     eax, 0ffffffffh
pop     ecx
mov     [ebp+var_8], eax
jnz     short loc_401574
lea     eax, [ebp+var_440]
mov     [ebp+var_3c], esi
mov     [ebp+var_40], eax
push    ebx
jmp     short loc_4015a2
push    4
lea     eax, [ebp+var_40]
push    eax
call    sub_406dc0
pop     ecx
cmp     eax, ebx
pop     ecx
mov     [ebp+var_4], eax
jnz     short loc_4015df
cmp     [ebp+var_30], ebx
jnz     short loc_4015df
xor     esi, esi
movsx   eax, [ebp+esi+var_240]
push    [ebp+arg_0]
inc     esi
push    eax
call    sub_4030f3
pop     ecx
cmp     esi, edi
pop     ecx
jb      short loc_4015bb
lea     eax, [ebp+var_240]
mov     [ebp+var_30], edi
mov     [ebp+var_34], eax
cmp     [ebp+var_4], 0fffffffbh
mov     esi, edi
jnz     loc_401688
cmp     esi, 800000h
jnb     short loc_40164b
mov     eax, [ebp+var_30]
sub     eax, esi
add     [ebp+var_34], eax
cmp     [ebp+var_30], esi
jnb     short loc_401619
mov     eax, [ebp+var_34]
push    [ebp+arg_0]
movzx   eax, byte ptr [eax]
push    eax
call    sub_4030f3
inc     [ebp+var_34]
inc     [ebp+var_30]
pop     ecx
pop     ecx
jmp     short loc_4015fb
shl     esi, 1
push    esi
push    ebx
call    sub_409cc0
cmp     [ebp+var_8], 0ffffffffh
pop     ecx
mov     ebx, eax
pop     ecx
mov     [ebp+var_30], esi
mov     [ebp+var_34], ebx
jnz     short loc_401636
push    4
jmp     short loc_401638
push    0
lea     eax, [ebp+var_40]
push    eax
call    sub_406dc0
pop     ecx
cmp     eax, 0fffffffbh
pop     ecx
mov     [ebp+var_4], eax
jz      short loc_4015eb
test    ebx, ebx
jz      short loc_401688
mov     eax, [ebp+var_30]
sub     eax, esi
add     [ebp+var_34], eax
cmp     [ebp+var_30], esi
jnb     short loc_401675
mov     eax, [ebp+var_34]
push    [ebp+arg_0]
movzx   eax, byte ptr [eax]
push    eax
call    sub_4030f3
inc     [ebp+var_34]
inc     [ebp+var_30]
pop     ecx
pop     ecx
jmp     short loc_401657
push    ebx
call    sub_40959b
lea     eax, [ebp+var_240]
pop     ecx
mov     [ebp+var_34], eax
mov     [ebp+var_30], edi
cmp     [ebp+var_4], 0
jz      loc_401565
cmp     [ebp+var_4], 1
jnz     short loc_4016be
mov     eax, edi
xor     esi, esi
sub     eax, [ebp+var_30]
jz      short loc_4016be
movsx   eax, [ebp+esi+var_240]
push    [ebp+arg_0]
inc     esi
push    eax
call    sub_4030f3
mov     eax, edi
pop     ecx
sub     eax, [ebp+var_30]
pop     ecx
cmp     esi, eax
jb      short loc_4016a1
pop     edi
pop     esi
pop     ebx
leave
retn
push    [esp+arg_8]
push    [esp+4+arg_4]
call    sub_409fef
pop     ecx
pop     ecx
retn
push    [esp+lpmem]
call    sub_40959b
pop     ecx
retn
push    [esp+size]
push    [esp+4+src]
push    [esp+8+arg_4]
call    _memcpy
add     esp, 0ch
retn
push    ebp
mov     ebp, esp
sub     esp, 58h
push    esi
push    edi
mov     edi, [ebp+hwnd]
push    0ffffffebh
push    edi
call    ds:getwindowlonga
cmp     [ebp+msg], 0ch
mov     esi, eax
jz      loc_401879
cmp     [ebp+msg], 0fh
jz      short loc_401734
push    [ebp+lparam]
push    [ebp+wparam]
push    [ebp+msg]
push    edi
push    dword ptr [esi+408h]
call    ds:callwindowproca
jmp     loc_401894
push    edi
call    ds:iswindowvisible
test    eax, eax
jz      loc_401892
lea     eax, [ebp+rect]
push    ebx
push    eax
push    edi
call    ds:getwindowrect
mov     eax, [ebp+rect.left]
and     [ebp+rect.left], 0
sub     [ebp+rect.right], eax
mov     eax, [ebp+rect.top]
sub     [ebp+rect.bottom], eax
and     [ebp+rect.top], 0
lea     eax, [ebp+paint]
push    eax
push    edi
call    ds:beginpaint
push    dword ptr [esi+410h]
mov     edi, ds:selectobject
mov     ebx, eax
push    ebx
call    edi
cmp     dword ptr [esi+404h], 0
mov     [ebp+h], eax
jnz     short loc_401803
push    dword ptr [esi+40ch]
push    ebx
call    edi
push    dword ptr [esi+418h]
mov     [ebp+lparam], eax
push    ebx
call    edi
push    color
mov     [ebp+wparam], eax
push    ebx
call    ds:settextcolor
push    dword_4170f4
mov     [ebp+color], eax
push    ebx
call    ds:setbkcolor
push    [ebp+rect.bottom]
mov     [ebp+msg], eax
push    [ebp+rect.right]
push    [ebp+rect.top]
push    [ebp+rect.left]
push    ebx
call    ds:rectangle
mov     eax, [ebp+rect.top]
push    dword ptr [esi+414h]
add     eax, 0fffffffah
push    eax
mov     eax, [ebp+rect.left]
add     eax, 0fffffff9h
push    eax
push    ebx
call    ds:drawicon
add     [ebp+rect.left], 10h
sub     [ebp+rect.right], 2
add     [ebp+rect.top], 2
sub     [ebp+rect.bottom], 2
jmp     short loc_401816
push    0fh
call    ds:getsyscolor
push    eax
push    ebx
call    ds:setbkcolor
mov     [ebp+msg], eax
lea     eax, [esi+4]
push    0
push    eax
call    ds:lstrlena
push    eax
lea     eax, [esi+4]
push    eax
lea     eax, [ebp+rect]
push    eax
push    6
push    [ebp+rect.top]
push    [ebp+rect.left]
push    ebx
call    ds:exttextouta
cmp     dword ptr [esi+404h], 0
jnz     short loc_401859
push    [ebp+lparam]
push    ebx
call    edi
push    [ebp+wparam]
push    ebx
call    edi
push    [ebp+color]
push    ebx
call    ds:settextcolor
push    [ebp+msg]
push    ebx
call    ds:setbkcolor
push    [ebp+h]
push    ebx
call    edi
lea     eax, [ebp+paint]
push    eax
push    [ebp+hwnd]
call    ds:endpaint
pop     ebx
jmp     short loc_401892
push    [ebp+lparam]
add     esi, 4
push    esi
call    _strcpy
pop     ecx
pop     ecx
push    1
push    0
push    edi
call    ds:invalidaterect
xor     eax, eax
pop     edi
pop     esi
leave
retn    10h
push    ebp
mov     ebp, esp
sub     esp, 3ch
push    ebx
push    esi
push    edi
mov     edi, 41ch
push    edi
call    _malloc
mov     esi, eax
push    edi
push    0
push    esi
call    _memset
mov     ebx, [ebp+hwnd]
mov     edi, ds:setwindowlonga
add     esp, 10h
mov     [esi], ebx
push    esi
push    0ffffffebh
push    ebx
call    edi
push    dword_4170f4
call    ds:createsolidbrush
push    10h
mov     [esi+40ch], eax
call    ds:getsyscolor
push    eax
push    0
push    0
call    ds:createpen
mov     [esi+418h], eax
mov     eax, [ebp+arg_4]
mov     [esi+414h], eax
lea     eax, [ebp+pvparam]
push    0
push    eax
push    3ch
push    1fh
call    ds:systemparametersinfoa
lea     eax, [ebp+pvparam]
push    eax
call    ds:createfontindirecta
mov     [esi+410h], eax
mov     eax, [ebp+arg_8]
mov     [esi+404h], eax
lea     eax, [esi+4]
push    400h
push    eax
push    ebx
call    ds:getwindowtexta
push    offset sub_4016f3
push    0fffffffch
push    ebx
call    edi
mov     [esi+408h], eax
pop     edi
pop     esi
pop     ebx
leave
retn
push    0ffffffebh
push    [esp+4+hwnd]
call    ds:getwindowlonga
mov     ecx, [esp+arg_4]
push    1
push    0
mov     [eax+404h], ecx
push    [esp+8+hwnd]
call    ds:invalidaterect
retn
push    ebx
mov     ebx, [esp+4+hwnd]
push    esi
push    0ffffffebh
push    ebx
call    ds:getwindowlonga
mov     esi, eax
test    esi, esi
jz      short loc_4019d7
push    edi
mov     edi, ds:deleteobject
push    dword ptr [esi+40ch]
call    edi
push    dword ptr [esi+418h]
call    edi
push    dword ptr [esi+410h]
call    edi
push    dword ptr [esi+408h]
mov     edi, ds:setwindowlonga
push    0fffffffch
push    ebx
call    edi
push    0
push    0ffffffebh
push    ebx
call    edi
push    41ch
push    0
push    esi
call    _memset
push    esi
call    sub_40959b
add     esp, 10h
pop     edi
pop     esi
pop     ebx
retn
push    [esp+arg_4]
push    [esp+4+arg_0]
call    sub_4019ea
pop     ecx
pop     ecx
retn
push    ebp
mov     ebp, esp
sub     esp, 70h
mov     eax, [ebp+arg_4]
xor     ecx, ecx
push    ebx
push    esi
mov     ch, [eax]
and     [ebp+var_68], 0
mov     cl, [eax+1]
push    edi
movzx   edx, byte ptr [eax+2]
shl     ecx, 8
or      ecx, edx
mov     edi, 0ffh
movzx   edx, byte ptr [eax+3]
shl     ecx, 8
or      ecx, edx
movzx   edx, byte ptr [eax+6]
mov     [ebp+var_6c], ecx
xor     ecx, ecx
mov     ch, [eax+4]
mov     cl, [eax+5]
shl     ecx, 8
or      ecx, edx
movzx   edx, byte ptr [eax+7]
shl     ecx, 8
or      ecx, edx
movzx   edx, byte ptr [eax+0ah]
mov     [ebp+var_70], ecx
xor     ecx, ecx
mov     ch, [eax+8]
mov     cl, [eax+9]
shl     ecx, 8
or      ecx, edx
movzx   edx, byte ptr [eax+0bh]
movzx   esi, byte ptr [eax+0eh]
shl     ecx, 8
or      ecx, edx
xor     edx, edx
mov     dh, [eax+0ch]
mov     [ebp+var_4c], ecx
mov     dl, [eax+0dh]
movzx   eax, byte ptr [eax+0fh]
shl     edx, 8
or      edx, esi
mov     esi, [ebp+arg_0]
shl     edx, 8
or      edx, eax
mov     eax, ecx
mov     [ebp+arg_4], edx
xor     edx, edx
mov     dl, ch
and     ecx, edi
shl     edx, 2
mov     [ebp+var_18], edx
xor     edx, edx
mov     dl, byte ptr [ebp+var_4c+2]
shr     eax, 18h
shl     eax, 2
shl     edx, 2
shl     ecx, 2
mov     [ebp+var_14], edx
mov     [ebp+var_20], ecx
xor     ecx, ecx
xor     edx, edx
mov     cl, byte ptr [ebp+arg_4+2]
mov     dl, byte ptr [ebp+arg_4+1]
xor     ebx, ebx
mov     ecx, ds:dword_413280[ecx*4]
xor     ecx, ds:dword_413e80[edx*4]
mov     edx, [ebp+arg_4]
shr     edx, 18h
xor     ecx, ds:dword_413a80[edx*4]
mov     edx, [ebp+arg_4]
and     edx, edi
xor     ecx, ds:dword_413680[edx*4]
xor     ecx, ds:dword_413a80[eax]
xor     eax, eax
xor     ecx, [ebp+var_6c]
mov     al, ch
mov     [ebp+arg_0], ecx
mov     bl, byte ptr [ebp+arg_0+2]
mov     edx, ecx
shl     eax, 2
mov     [ebp+var_c], eax
mov     eax, ds:dword_413680[eax]
mov     [ebp+arg_0], eax
mov     eax, ecx
and     eax, edi
shr     edx, 18h
shl     eax, 2
shl     edx, 2
mov     [ebp+var_34], eax
mov     eax, ds:dword_413e80[eax]
xor     eax, ds:dword_413280[edx]
mov     [ebp+var_38], edx
mov     edx, [ebp+var_18]
shl     ebx, 2
xor     eax, ds:dword_413e80[edx]
xor     edx, edx
mov     [ebp+var_3c], ebx
xor     eax, ds:dword_413a80[ebx]
xor     eax, [ebp+arg_0]
xor     eax, [ebp+var_4c]
mov     [ebp+var_4c], eax
mov     ebx, eax
mov     dl, byte ptr [ebp+var_4c+2]
and     ebx, edi
shl     edx, 2
mov     [ebp+var_1c], edx
xor     edx, edx
mov     dl, ah
shl     edx, 2
mov     [ebp+var_4], edx
mov     edx, eax
mov     eax, [ebp+var_14]
shr     edx, 18h
mov     eax, ds:dword_413280[eax]
shl     edx, 2
shl     ebx, 2
xor     eax, ds:dword_413e80[edx]
mov     [ebp+var_2c], ebx
mov     [ebp+var_54], edx
xor     eax, ds:dword_413280[ebx]
mov     ebx, [ebp+var_1c]
xor     eax, [ebp+arg_4]
xor     eax, ds:dword_413a80[ebx]
mov     ebx, [ebp+var_4]
xor     eax, ds:dword_413680[ebx]
xor     ebx, ebx
mov     [ebp+arg_4], eax
mov     bl, byte ptr [ebp+arg_4+2]
shl     ebx, 2
mov     [ebp+arg_0], ebx
xor     ebx, ebx
mov     bl, ah
shl     ebx, 2
mov     [ebp+var_30], ebx
mov     ebx, [ebp+arg_0]
mov     ebx, ds:dword_413680[ebx]
mov     [ebp+var_6c], ebx
mov     ebx, eax
shr     ebx, 18h
shl     ebx, 2
mov     [ebp+var_28], ebx
mov     ebx, eax
mov     eax, [ebp+var_20]
and     ebx, edi
shl     ebx, 2
mov     eax, ds:dword_413680[eax]
mov     [ebp+var_50], ebx
xor     eax, ds:dword_413a80[ebx]
mov     ebx, [ebp+var_28]
xor     eax, ds:dword_413e80[ebx]
mov     ebx, [ebp+var_30]
xor     eax, [ebp+var_6c]
xor     eax, ds:dword_413280[ebx]
mov     ebx, [ebp+var_2c]
mov     ebx, ds:dword_413680[ebx]
xor     eax, [ebp+var_70]
xor     ebx, ds:dword_413a80[edx]
mov     edx, [ebp+var_38]
mov     [ebp+var_58], eax
xor     ebx, ds:dword_413a80[edx]
mov     edx, [ebp+var_4]
xor     ebx, ds:dword_413e80[edx]
mov     edx, [ebp+var_1c]
xor     ebx, ds:dword_413280[edx]
xor     edx, edx
xor     ebx, [ebp+arg_4]
mov     [ebp+var_6c], ebx
mov     dl, byte ptr [ebp+var_6c+2]
shl     edx, 2
mov     [ebp+var_44], edx
xor     edx, edx
mov     dl, bh
shl     edx, 2
mov     [ebp+var_40], edx
mov     edx, ebx
and     ebx, edi
shr     edx, 18h
shl     ebx, 2
shl     edx, 2
mov     [ebp+var_8], ebx
mov     ebx, ds:dword_413e80[ebx]
xor     ebx, ds:dword_413280[edx]
mov     [ebp+var_5c], edx
mov     edx, [ebp+var_40]
xor     ebx, ds:dword_413680[edx]
mov     edx, [ebp+var_c]
xor     ebx, ds:dword_413e80[edx]
mov     edx, [ebp+var_44]
xor     ebx, ds:dword_413a80[edx]
xor     edx, edx
xor     ecx, ebx
xor     ebx, ebx
mov     [ebp+var_70], ecx
mov     bl, ch
mov     dl, byte ptr [ebp+var_70+2]
shl     edx, 2
mov     [ebp+var_48], edx
mov     edx, ecx
shr     edx, 18h
shl     edx, 2
shl     ebx, 2
mov     [ebp+var_64], edx
mov     edx, ds:dword_413e80[edx]
xor     edx, ds:dword_413680[ebx]
and     ecx, edi
shl     ecx, 2
mov     [ebp+var_60], ebx
mov     ebx, [ebp+var_3c]
xor     edx, ds:dword_413280[ecx]
xor     edx, [ebp+var_4c]
xor     edx, ds:dword_413280[ebx]
mov     ebx, [ebp+var_48]
xor     edx, ds:dword_413a80[ebx]
xor     ebx, ebx
mov     [ebp+var_4c], edx
mov     bl, byte ptr [ebp+var_4c+2]
shl     ebx, 2
mov     [ebp+var_14], ebx
xor     ebx, ebx
mov     bl, dh
shl     ebx, 2
mov     [ebp+var_18], ebx
mov     ebx, edx
shr     ebx, 18h
and     edx, edi
shl     ebx, 2
shl     edx, 2
mov     [ebp+var_24], ebx
mov     ebx, [ebp+var_34]
mov     [ebp+var_20], edx
mov     edx, ds:dword_413a80[edx]
xor     edx, ds:dword_413680[ebx]
mov     ebx, [ebp+var_24]
xor     edx, ds:dword_413e80[ebx]
mov     ebx, [ebp+var_18]
xor     edx, ds:dword_413280[ebx]
mov     ebx, [ebp+var_14]
xor     edx, ds:dword_413680[ebx]
xor     edx, eax
mov     [ebp+arg_4], edx
mov     edx, [ebp+var_68]
sub     edx, 0
jz      loc_402219
dec     edx
jz      loc_40208a
dec     edx
jz      loc_401ed7
dec     edx
jnz     loc_4023b0
mov     edx, eax
xor     ebx, ebx
mov     bl, byte ptr [ebp+var_58+2]
shr     edx, 18h
mov     ebx, ds:dword_413e80[ebx*4]
shl     edx, 2
mov     [ebp+var_10], edx
xor     ebx, ds:dword_413a80[edx]
mov     edx, [ebp+arg_0]
xor     ebx, ds:dword_413280[edx]
mov     edx, [ebp+var_34]
xor     ebx, ds:dword_413280[edx]
mov     edx, [ebp+var_c]
xor     ebx, ds:dword_413680[edx]
and     ebx, 1fh
mov     [esi+44h], ebx
xor     ebx, ebx
mov     bl, ah
and     eax, edi
mov     ebx, ds:dword_413a80[ebx*4]
xor     ebx, ds:dword_413e80[eax*4]
mov     eax, [ebp+var_10]
xor     ebx, ds:dword_413680[eax]
mov     eax, [ebp+var_38]
xor     ebx, ds:dword_413680[eax]
mov     eax, [ebp+var_3c]
xor     ebx, ds:dword_413280[eax]
mov     eax, [ebp+var_28]
and     ebx, 1fh
mov     [esi+4ch], ebx
mov     ebx, ds:dword_413a80[eax]
mov     eax, [ebp+arg_0]
xor     ebx, ds:dword_413e80[eax]
mov     eax, [ebp+var_2c]
xor     ebx, ds:dword_413a80[edx]
mov     edx, [ebp+var_50]
xor     ebx, ds:dword_413280[eax]
mov     eax, [ebp+var_4]
xor     ebx, ds:dword_413680[eax]
and     ebx, 1fh
mov     [esi+54h], ebx
mov     ebx, [ebp+var_30]
mov     edx, ds:dword_413e80[edx]
xor     edx, ds:dword_413a80[ebx]
mov     ebx, [ebp+var_54]
xor     edx, ds:dword_413680[ebx]
mov     ebx, [ebp+var_14]
xor     edx, ds:dword_413e80[eax]
mov     eax, [ebp+var_1c]
xor     edx, ds:dword_413280[eax]
mov     eax, [ebp+var_60]
and     edx, 1fh
mov     [esi+5ch], edx
mov     edx, ds:dword_413a80[ecx]
xor     edx, ds:dword_413e80[eax]
mov     eax, [ebp+var_8]
xor     edx, ds:dword_413280[eax]
mov     eax, [ebp+var_24]
xor     edx, ds:dword_413280[eax]
xor     edx, ds:dword_413680[ebx]
mov     ebx, [ebp+var_8]
and     edx, 1fh
mov     [esi+64h], edx
mov     edx, [ebp+var_20]
mov     ecx, ds:dword_413680[ecx]
xor     ecx, ds:dword_413680[edx]
mov     edx, [ebp+var_64]
xor     ecx, ds:dword_413e80[edx]
mov     edx, [ebp+var_18]
xor     ecx, ds:dword_413280[edx]
mov     edx, [ebp+var_48]
xor     ecx, ds:dword_413a80[edx]
mov     edx, [ebp+arg_4]
shr     edx, 18h
and     ecx, 1fh
mov     [esi+6ch], ecx
mov     edx, ds:dword_413280[edx*4]
xor     ecx, ecx
mov     cl, byte ptr [ebp+arg_4+2]
shl     ecx, 2
xor     edx, ds:dword_413a80[ebx]
mov     ebx, [ebp+var_40]
xor     edx, ds:dword_413e80[ebx]
mov     ebx, [ebp+arg_4]
and     ebx, edi
xor     edx, ds:dword_413a80[eax]
xor     edx, ds:dword_413680[ecx]
and     edx, 1fh
mov     [esi+74h], edx
xor     edx, edx
mov     dl, byte ptr [ebp+arg_4+1]
mov     edx, ds:dword_413280[edx*4]
xor     edx, ds:dword_413680[ebx*4]
mov     ebx, [ebp+var_5c]
xor     edx, ds:dword_413e80[ebx]
xor     edx, ds:dword_413e80[ecx]
mov     ecx, [ebp+var_44]
xor     edx, ds:dword_413a80[ecx]
and     edx, 1fh
mov     [esi+7ch], edx
jmp     loc_4023b3
mov     edx, [ebp+var_28]
mov     ebx, [ebp+var_2c]
mov     edx, ds:dword_413280[edx]
xor     edx, ds:dword_413a80[ebx]
mov     ebx, [ebp+var_c]
xor     edx, ds:dword_413280[ebx]
mov     ebx, [ebp+var_4]
xor     edx, ds:dword_413e80[ebx]
mov     ebx, [ebp+arg_0]
xor     edx, ds:dword_413680[ebx]
mov     ebx, [ebp+var_54]
and     edx, 1fh
mov     [esi+4], edx
mov     edx, [ebp+var_50]
mov     edx, ds:dword_413680[edx]
xor     edx, ds:dword_413e80[ebx]
mov     ebx, [ebp+var_30]
xor     edx, ds:dword_413280[ebx]
mov     ebx, [ebp+var_4]
xor     edx, ds:dword_413680[ebx]
mov     ebx, [ebp+var_1c]
xor     edx, ds:dword_413a80[ebx]
xor     ebx, ebx
mov     bl, byte ptr [ebp+var_58+2]
and     edx, 1fh
mov     [esi+0ch], edx
mov     ebx, ds:dword_413680[ebx*4]
mov     edx, eax
shr     edx, 18h
shl     edx, 2
mov     [ebp+var_10], edx
xor     ebx, ds:dword_413280[edx]
mov     edx, [ebp+arg_0]
xor     ebx, ds:dword_413a80[edx]
mov     edx, [ebp+var_34]
xor     ebx, ds:dword_413a80[edx]
mov     edx, [ebp+var_c]
xor     ebx, ds:dword_413e80[edx]
xor     edx, edx
mov     dl, ah
and     eax, edi
and     ebx, 1fh
mov     [esi+14h], ebx
mov     edx, ds:dword_413280[edx*4]
xor     edx, ds:dword_413680[eax*4]
mov     eax, [ebp+var_10]
xor     edx, ds:dword_413e80[eax]
mov     eax, [ebp+var_38]
xor     edx, ds:dword_413e80[eax]
mov     eax, [ebp+var_3c]
xor     edx, ds:dword_413a80[eax]
mov     eax, [ebp+arg_4]
shr     eax, 18h
and     edx, 1fh
mov     [esi+1ch], edx
mov     ebx, ds:dword_413a80[eax*4]
mov     eax, [ebp+var_8]
xor     edx, edx
mov     dl, byte ptr [ebp+arg_4+2]
xor     ebx, ds:dword_413280[eax]
mov     eax, [ebp+var_24]
shl     edx, 2
xor     ebx, ds:dword_413280[eax]
mov     [ebp+arg_0], edx
xor     ebx, ds:dword_413e80[edx]
mov     edx, [ebp+var_40]
xor     ebx, ds:dword_413680[edx]
xor     edx, edx
mov     dl, byte ptr [ebp+arg_4+1]
and     ebx, 1fh
mov     [esi+24h], ebx
mov     ebx, [ebp+arg_4]
mov     edx, ds:dword_413a80[edx*4]
and     ebx, edi
xor     edx, ds:dword_413e80[ebx*4]
mov     ebx, [ebp+var_5c]
xor     edx, ds:dword_413680[ebx]
mov     ebx, [ebp+var_44]
xor     edx, ds:dword_413280[ebx]
mov     ebx, [ebp+arg_0]
xor     edx, ds:dword_413680[ebx]
mov     ebx, [ebp+var_14]
and     edx, 1fh
mov     [esi+2ch], edx
mov     edx, [ebp+var_8]
mov     edx, ds:dword_413a80[edx]
xor     edx, ds:dword_413e80[ebx]
mov     ebx, [ebp+var_60]
xor     edx, ds:dword_413a80[eax]
xor     edx, ds:dword_413280[ecx]
xor     edx, ds:dword_413680[ebx]
and     edx, 1fh
mov     [esi+34h], edx
mov     edx, [ebp+var_64]
mov     ecx, ds:dword_413e80[ecx]
xor     ecx, ds:dword_413680[edx]
mov     edx, [ebp+var_48]
xor     ecx, ds:dword_413280[edx]
mov     edx, [ebp+var_20]
xor     ecx, ds:dword_413e80[edx]
mov     edx, [ebp+var_18]
xor     ecx, ds:dword_413a80[edx]
and     ecx, 1fh
mov     [esi+3ch], ecx
jmp     loc_4023b3
mov     edx, eax
xor     ebx, ebx
mov     bl, byte ptr [ebp+var_58+2]
shr     edx, 18h
mov     ebx, ds:dword_413e80[ebx*4]
shl     edx, 2
mov     [ebp+var_10], edx
xor     ebx, ds:dword_413a80[edx]
mov     edx, [ebp+arg_0]
xor     ebx, ds:dword_413280[edx]
mov     edx, [ebp+var_34]
xor     ebx, ds:dword_413280[edx]
mov     edx, [ebp+var_c]
xor     ebx, ds:dword_413680[edx]
mov     [esi+40h], ebx
xor     ebx, ebx
mov     bl, ah
and     eax, edi
mov     ebx, ds:dword_413a80[ebx*4]
xor     ebx, ds:dword_413e80[eax*4]
mov     eax, [ebp+var_10]
xor     ebx, ds:dword_413680[eax]
mov     eax, [ebp+var_38]
xor     ebx, ds:dword_413680[eax]
mov     eax, [ebp+var_3c]
xor     ebx, ds:dword_413280[eax]
mov     eax, [ebp+var_28]
mov     [esi+48h], ebx
mov     ebx, ds:dword_413a80[eax]
mov     eax, [ebp+arg_0]
xor     ebx, ds:dword_413e80[eax]
mov     eax, [ebp+var_2c]
xor     ebx, ds:dword_413a80[edx]
mov     edx, [ebp+var_50]
xor     ebx, ds:dword_413280[eax]
mov     eax, [ebp+var_4]
xor     ebx, ds:dword_413680[eax]
mov     [esi+50h], ebx
mov     ebx, [ebp+var_30]
mov     edx, ds:dword_413e80[edx]
xor     edx, ds:dword_413a80[ebx]
mov     ebx, [ebp+var_54]
xor     edx, ds:dword_413680[ebx]
mov     ebx, [ebp+var_14]
xor     edx, ds:dword_413e80[eax]
mov     eax, [ebp+var_1c]
xor     edx, ds:dword_413280[eax]
mov     eax, [ebp+var_60]
mov     [esi+58h], edx
mov     edx, ds:dword_413a80[ecx]
xor     edx, ds:dword_413e80[eax]
mov     eax, [ebp+var_8]
xor     edx, ds:dword_413280[eax]
mov     eax, [ebp+var_24]
xor     edx, ds:dword_413280[eax]
xor     edx, ds:dword_413680[ebx]
mov     ebx, [ebp+var_8]
mov     [esi+60h], edx
mov     edx, [ebp+var_20]
mov     ecx, ds:dword_413680[ecx]
xor     ecx, ds:dword_413680[edx]
mov     edx, [ebp+var_18]
xor     ecx, ds:dword_413280[edx]
mov     edx, [ebp+var_64]
xor     ecx, ds:dword_413e80[edx]
mov     edx, [ebp+var_48]
xor     ecx, ds:dword_413a80[edx]
mov     edx, [ebp+arg_4]
shr     edx, 18h
mov     [esi+68h], ecx
xor     ecx, ecx
mov     edx, ds:dword_413280[edx*4]
mov     cl, byte ptr [ebp+arg_4+2]
xor     edx, ds:dword_413a80[ebx]
mov     ebx, [ebp+var_40]
shl     ecx, 2
xor     edx, ds:dword_413e80[ebx]
xor     edx, ds:dword_413a80[eax]
xor     edx, ds:dword_413680[ecx]
mov     [esi+70h], edx
xor     edx, edx
mov     dl, byte ptr [ebp+arg_4+1]
mov     ebx, [ebp+arg_4]
and     ebx, edi
mov     edx, ds:dword_413280[edx*4]
xor     edx, ds:dword_413680[ebx*4]
mov     ebx, [ebp+var_5c]
xor     edx, ds:dword_413e80[ebx]
xor     edx, ds:dword_413e80[ecx]
mov     ecx, [ebp+var_44]
xor     edx, ds:dword_413a80[ecx]
mov     [esi+78h], edx
jmp     loc_4023b3
mov     edx, [ebp+var_28]
mov     ebx, [ebp+var_2c]
mov     edx, ds:dword_413280[edx]
xor     edx, ds:dword_413a80[ebx]
mov     ebx, [ebp+var_c]
xor     edx, ds:dword_413280[ebx]
mov     ebx, [ebp+var_4]
xor     edx, ds:dword_413e80[ebx]
mov     ebx, [ebp+arg_0]
xor     edx, ds:dword_413680[ebx]
mov     ebx, [ebp+var_54]
mov     [esi], edx
mov     edx, [ebp+var_50]
mov     edx, ds:dword_413680[edx]
xor     edx, ds:dword_413e80[ebx]
mov     ebx, [ebp+var_30]
xor     edx, ds:dword_413280[ebx]
mov     ebx, [ebp+var_1c]
xor     edx, ds:dword_413a80[ebx]
mov     ebx, [ebp+var_4]
xor     edx, ds:dword_413680[ebx]
xor     ebx, ebx
mov     bl, byte ptr [ebp+var_58+2]
mov     [esi+8], edx
mov     edx, eax
mov     ebx, ds:dword_413680[ebx*4]
shr     edx, 18h
shl     edx, 2
mov     [ebp+var_10], edx
xor     ebx, ds:dword_413280[edx]
mov     edx, [ebp+arg_0]
xor     ebx, ds:dword_413a80[edx]
mov     edx, [ebp+var_34]
xor     ebx, ds:dword_413a80[edx]
mov     edx, [ebp+var_c]
xor     ebx, ds:dword_413e80[edx]
xor     edx, edx
mov     dl, ah
and     eax, edi
mov     [esi+10h], ebx
mov     edx, ds:dword_413280[edx*4]
xor     edx, ds:dword_413680[eax*4]
mov     eax, [ebp+var_10]
xor     edx, ds:dword_413e80[eax]
mov     eax, [ebp+var_38]
xor     edx, ds:dword_413e80[eax]
mov     eax, [ebp+var_3c]
xor     edx, ds:dword_413a80[eax]
mov     eax, [ebp+arg_4]
shr     eax, 18h
mov     [esi+18h], edx
xor     edx, edx
mov     ebx, ds:dword_413a80[eax*4]
mov     eax, [ebp+var_8]
mov     dl, byte ptr [ebp+arg_4+2]
xor     ebx, ds:dword_413280[eax]
mov     eax, [ebp+var_24]
shl     edx, 2
xor     ebx, ds:dword_413280[eax]
mov     [ebp+arg_0], edx
xor     ebx, ds:dword_413e80[edx]
mov     edx, [ebp+var_40]
xor     ebx, ds:dword_413680[edx]
xor     edx, edx
mov     dl, byte ptr [ebp+arg_4+1]
mov     [esi+20h], ebx
mov     ebx, [ebp+arg_4]
mov     edx, ds:dword_413a80[edx*4]
and     ebx, edi
xor     edx, ds:dword_413e80[ebx*4]
mov     ebx, [ebp+var_5c]
xor     edx, ds:dword_413680[ebx]
mov     ebx, [ebp+var_44]
xor     edx, ds:dword_413280[ebx]
mov     ebx, [ebp+arg_0]
xor     edx, ds:dword_413680[ebx]
mov     ebx, [ebp+var_14]
mov     [esi+28h], edx
mov     edx, [ebp+var_8]
mov     edx, ds:dword_413a80[edx]
xor     edx, ds:dword_413e80[ebx]
xor     edx, ds:dword_413a80[eax]
mov     ebx, [ebp+var_60]
xor     edx, ds:dword_413680[ebx]
xor     edx, ds:dword_413280[ecx]
mov     [esi+30h], edx
mov     edx, [ebp+var_64]
mov     ecx, ds:dword_413e80[ecx]
xor     ecx, ds:dword_413680[edx]
mov     edx, [ebp+var_48]
xor     ecx, ds:dword_413280[edx]
mov     edx, [ebp+var_20]
xor     ecx, ds:dword_413e80[edx]
mov     edx, [ebp+var_18]
xor     ecx, ds:dword_413a80[edx]
mov     [esi+38h], ecx
jmp     short loc_4023b3
mov     eax, [ebp+var_24]
inc     [ebp+var_68]
cmp     [ebp+var_68], 4
jl      loc_401a9a
pop     edi
pop     esi
pop     ebx
leave
retn
push    [esp+arg_0]
push    [esp+4+arg_8]
push    [esp+8+arg_4]
call    sub_4023da
add     esp, 0ch
retn
push    ebp
mov     ebp, esp
push    ecx
mov     edx, [ebp+arg_0]
xor     eax, eax
push    ebx
push    esi
mov     ah, [edx+4]
mov     esi, [ebp+arg_8]
mov     al, [edx+5]
push    edi
movzx   ecx, byte ptr [edx+6]
shl     eax, 8
or      eax, ecx
mov     edi, [esi+4]
movzx   ecx, byte ptr [edx+7]
shl     eax, 8
or      eax, ecx
mov     ecx, [esi]
mov     [ebp+var_4], eax
push    20h
add     eax, ecx
pop     ecx
sub     ecx, edi
mov     ebx, eax
shr     ebx, cl
mov     ecx, edi
mov     edi, 0ffh
shl     eax, cl
push    20h
or      ebx, eax
xor     eax, eax
mov     [ebp+arg_0], ebx
mov     ecx, ebx
mov     al, byte ptr [ebp+arg_0+2]
shr     ecx, 18h
mov     eax, ds:dword_412680[eax*4]
xor     eax, ds:dword_412280[ecx*4]
xor     ecx, ecx
mov     cl, bh
and     ebx, edi
sub     eax, ds:dword_412a80[ecx*4]
xor     ecx, ecx
mov     ch, [edx]
add     eax, ds:dword_412e80[ebx*4]
mov     cl, [edx+1]
movzx   ebx, byte ptr [edx+2]
movzx   edx, byte ptr [edx+3]
shl     ecx, 8
or      ecx, ebx
mov     ebx, [esi+8]
shl     ecx, 8
or      ecx, edx
mov     edx, [esi+0ch]
xor     eax, ecx
pop     ecx
xor     ebx, eax
sub     ecx, edx
mov     edx, ebx
push    20h
shr     edx, cl
mov     ecx, [esi+0ch]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
xor     ebx, ebx
mov     [ebp+arg_0], edx
mov     bl, dh
mov     cl, byte ptr [ebp+arg_0+2]
mov     ebx, ds:dword_412a80[ebx*4]
sub     ebx, ds:dword_412680[ecx*4]
mov     ecx, edx
shr     ecx, 18h
and     edx, edi
add     ebx, ds:dword_412280[ecx*4]
pop     ecx
xor     ebx, ds:dword_412e80[edx*4]
mov     edx, [esi+14h]
sub     ecx, edx
xor     [ebp+var_4], ebx
mov     ebx, [esi+10h]
sub     ebx, [ebp+var_4]
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+14h]
push    20h
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
add     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
xor     ecx, ds:dword_412a80[ebx*4]
sub     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+1ch]
xor     eax, ecx
mov     ecx, [esi+18h]
lea     ebx, [ecx+eax]
pop     ecx
sub     ecx, edx
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+1ch]
push    20h
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
xor     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
sub     ecx, ds:dword_412a80[ebx*4]
mov     ebx, [esi+20h]
add     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+24h]
xor     [ebp+var_4], ecx
pop     ecx
xor     ebx, [ebp+var_4]
sub     ecx, edx
push    20h
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+24h]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
xor     ebx, ebx
mov     [ebp+arg_0], edx
mov     bl, dh
mov     cl, byte ptr [ebp+arg_0+2]
mov     ebx, ds:dword_412a80[ebx*4]
sub     ebx, ds:dword_412680[ecx*4]
mov     ecx, edx
shr     ecx, 18h
and     edx, edi
add     ebx, ds:dword_412280[ecx*4]
pop     ecx
xor     ebx, ds:dword_412e80[edx*4]
mov     edx, [esi+2ch]
sub     ecx, edx
xor     eax, ebx
mov     ebx, [esi+28h]
sub     ebx, eax
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+2ch]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
add     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
push    20h
xor     ecx, ds:dword_412a80[ebx*4]
sub     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+34h]
xor     [ebp+var_4], ecx
mov     ecx, [esi+30h]
mov     ebx, [ebp+var_4]
add     ebx, ecx
pop     ecx
sub     ecx, edx
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+34h]
push    20h
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
xor     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
sub     ecx, ds:dword_412a80[ebx*4]
mov     ebx, [esi+38h]
add     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+3ch]
xor     eax, ecx
pop     ecx
xor     ebx, eax
sub     ecx, edx
mov     edx, ebx
push    20h
shr     edx, cl
mov     ecx, [esi+3ch]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
xor     ebx, ebx
mov     [ebp+arg_0], edx
mov     bl, dh
mov     cl, byte ptr [ebp+arg_0+2]
mov     ebx, ds:dword_412a80[ebx*4]
sub     ebx, ds:dword_412680[ecx*4]
mov     ecx, edx
shr     ecx, 18h
and     edx, edi
add     ebx, ds:dword_412280[ecx*4]
pop     ecx
xor     ebx, ds:dword_412e80[edx*4]
mov     edx, [esi+44h]
sub     ecx, edx
xor     [ebp+var_4], ebx
mov     ebx, [esi+40h]
sub     ebx, [ebp+var_4]
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+44h]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
add     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
xor     ecx, ds:dword_412a80[ebx*4]
sub     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+4ch]
xor     eax, ecx
mov     ecx, [esi+48h]
push    20h
lea     ebx, [ecx+eax]
pop     ecx
sub     ecx, edx
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+4ch]
push    20h
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
xor     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
sub     ecx, ds:dword_412a80[ebx*4]
mov     ebx, [esi+50h]
add     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+54h]
xor     [ebp+var_4], ecx
pop     ecx
xor     ebx, [ebp+var_4]
sub     ecx, edx
push    20h
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+54h]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
xor     ebx, ebx
mov     [ebp+arg_0], edx
mov     bl, dh
mov     cl, byte ptr [ebp+arg_0+2]
mov     ebx, ds:dword_412a80[ebx*4]
sub     ebx, ds:dword_412680[ecx*4]
mov     ecx, edx
shr     ecx, 18h
and     edx, edi
add     ebx, ds:dword_412280[ecx*4]
pop     ecx
push    20h
xor     ebx, ds:dword_412e80[edx*4]
mov     edx, [esi+5ch]
sub     ecx, edx
xor     eax, ebx
mov     ebx, [esi+58h]
sub     ebx, eax
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+5ch]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
add     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
xor     ecx, ds:dword_412a80[ebx*4]
sub     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+64h]
xor     [ebp+var_4], ecx
mov     ecx, [esi+60h]
mov     ebx, [ebp+var_4]
add     ebx, ecx
pop     ecx
sub     ecx, edx
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+64h]
shl     ebx, cl
xor     ecx, ecx
push    20h
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
xor     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
sub     ecx, ds:dword_412a80[ebx*4]
mov     ebx, [esi+68h]
add     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+6ch]
xor     eax, ecx
pop     ecx
xor     ebx, eax
sub     ecx, edx
mov     edx, ebx
push    20h
shr     edx, cl
mov     ecx, [esi+6ch]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
xor     ebx, ebx
mov     [ebp+arg_0], edx
mov     bl, dh
mov     cl, byte ptr [ebp+arg_0+2]
mov     ebx, ds:dword_412a80[ebx*4]
sub     ebx, ds:dword_412680[ecx*4]
mov     ecx, edx
shr     ecx, 18h
and     edx, edi
add     ebx, ds:dword_412280[ecx*4]
pop     ecx
push    20h
xor     ebx, ds:dword_412e80[edx*4]
mov     edx, [esi+74h]
sub     ecx, edx
xor     [ebp+var_4], ebx
mov     ebx, [esi+70h]
sub     ebx, [ebp+var_4]
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+74h]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
add     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
xor     ecx, ds:dword_412a80[ebx*4]
mov     ebx, [esi+7ch]
sub     ecx, ds:dword_412e80[edx*4]
xor     eax, ecx
mov     ecx, [esi+78h]
lea     esi, [ecx+eax]
pop     ecx
sub     ecx, ebx
mov     edx, esi
shr     edx, cl
mov     ecx, ebx
shl     esi, cl
xor     ecx, ecx
or      edx, esi
mov     [ebp+arg_0], edx
mov     esi, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     esi, 18h
mov     ecx, ds:dword_412680[ecx*4]
xor     ecx, ds:dword_412280[esi*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
pop     edi
pop     esi
sub     ecx, ds:dword_412a80[ebx*4]
add     ecx, ds:dword_412e80[edx*4]
mov     edx, [ebp+var_4]
xor     edx, ecx
mov     ecx, [ebp+arg_4]
mov     ebx, edx
shr     ebx, 18h
mov     [ecx], bl
mov     ebx, edx
shr     ebx, 10h
mov     [ecx+1], bl
mov     ebx, edx
mov     [ecx+3], dl
mov     edx, eax
shr     edx, 18h
mov     [ecx+4], dl
mov     edx, eax
shr     edx, 10h
mov     [ecx+5], dl
mov     edx, eax
shr     ebx, 8
shr     edx, 8
mov     [ecx+2], bl
mov     [ecx+6], dl
mov     [ecx+7], al
pop     ebx
leave
retn
push    [esp+arg_0]
push    [esp+4+arg_8]
push    [esp+8+arg_4]
call    sub_402919
add     esp, 0ch
retn
push    ebp
mov     ebp, esp
push    ecx
mov     edx, [ebp+arg_0]
xor     eax, eax
push    ebx
push    esi
mov     ah, [edx+4]
mov     esi, [ebp+arg_8]
mov     al, [edx+5]
push    edi
movzx   ecx, byte ptr [edx+6]
shl     eax, 8
or      eax, ecx
mov     edi, [esi+7ch]
movzx   ecx, byte ptr [edx+7]
shl     eax, 8
or      eax, ecx
mov     ecx, [esi+78h]
mov     [ebp+var_4], eax
push    20h
add     eax, ecx
pop     ecx
sub     ecx, edi
mov     ebx, eax
shr     ebx, cl
mov     ecx, edi
mov     edi, 0ffh
shl     eax, cl
push    20h
or      ebx, eax
xor     eax, eax
mov     [ebp+arg_0], ebx
mov     ecx, ebx
mov     al, byte ptr [ebp+arg_0+2]
shr     ecx, 18h
mov     eax, ds:dword_412680[eax*4]
xor     eax, ds:dword_412280[ecx*4]
xor     ecx, ecx
mov     cl, bh
and     ebx, edi
sub     eax, ds:dword_412a80[ecx*4]
xor     ecx, ecx
mov     ch, [edx]
add     eax, ds:dword_412e80[ebx*4]
mov     cl, [edx+1]
movzx   ebx, byte ptr [edx+2]
movzx   edx, byte ptr [edx+3]
shl     ecx, 8
or      ecx, ebx
mov     ebx, [esi+70h]
shl     ecx, 8
or      ecx, edx
mov     edx, [esi+74h]
xor     eax, ecx
pop     ecx
sub     ebx, eax
sub     ecx, edx
mov     edx, ebx
push    20h
shr     edx, cl
mov     ecx, [esi+74h]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
add     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
xor     ecx, ds:dword_412a80[ebx*4]
mov     ebx, [esi+68h]
sub     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+6ch]
xor     [ebp+var_4], ecx
pop     ecx
xor     ebx, [ebp+var_4]
sub     ecx, edx
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+6ch]
push    20h
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
xor     ebx, ebx
mov     bl, dh
mov     [ebp+arg_0], edx
mov     cl, byte ptr [ebp+arg_0+2]
mov     ebx, ds:dword_412a80[ebx*4]
sub     ebx, ds:dword_412680[ecx*4]
mov     ecx, edx
shr     ecx, 18h
and     edx, edi
add     ebx, ds:dword_412280[ecx*4]
mov     ecx, [esi+60h]
xor     ebx, ds:dword_412e80[edx*4]
mov     edx, [esi+64h]
xor     eax, ebx
lea     ebx, [ecx+eax]
pop     ecx
sub     ecx, edx
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+64h]
push    20h
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
xor     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
sub     ecx, ds:dword_412a80[ebx*4]
mov     ebx, [esi+58h]
add     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+5ch]
xor     [ebp+var_4], ecx
pop     ecx
sub     ebx, [ebp+var_4]
sub     ecx, edx
push    20h
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+5ch]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
add     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
xor     ecx, ds:dword_412a80[ebx*4]
mov     ebx, [esi+50h]
sub     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+54h]
xor     eax, ecx
pop     ecx
xor     ebx, eax
sub     ecx, edx
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+54h]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
xor     ebx, ebx
mov     bl, dh
mov     [ebp+arg_0], edx
mov     cl, byte ptr [ebp+arg_0+2]
mov     ebx, ds:dword_412a80[ebx*4]
sub     ebx, ds:dword_412680[ecx*4]
mov     ecx, edx
shr     ecx, 18h
and     edx, edi
push    20h
add     ebx, ds:dword_412280[ecx*4]
mov     ecx, [esi+48h]
xor     ebx, ds:dword_412e80[edx*4]
mov     edx, [esi+4ch]
xor     [ebp+var_4], ebx
mov     ebx, [ebp+var_4]
add     ebx, ecx
pop     ecx
sub     ecx, edx
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+4ch]
push    20h
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
xor     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
sub     ecx, ds:dword_412a80[ebx*4]
mov     ebx, [esi+40h]
add     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+44h]
xor     eax, ecx
pop     ecx
sub     ebx, eax
sub     ecx, edx
mov     edx, ebx
push    20h
shr     edx, cl
mov     ecx, [esi+44h]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
add     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
xor     ecx, ds:dword_412a80[ebx*4]
mov     ebx, [esi+38h]
sub     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+3ch]
xor     [ebp+var_4], ecx
pop     ecx
xor     ebx, [ebp+var_4]
sub     ecx, edx
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+3ch]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
xor     ebx, ebx
mov     [ebp+arg_0], edx
mov     bl, dh
mov     cl, byte ptr [ebp+arg_0+2]
mov     ebx, ds:dword_412a80[ebx*4]
sub     ebx, ds:dword_412680[ecx*4]
mov     ecx, edx
shr     ecx, 18h
and     edx, edi
add     ebx, ds:dword_412280[ecx*4]
xor     ebx, ds:dword_412e80[edx*4]
mov     edx, [esi+34h]
xor     eax, ebx
mov     ecx, [esi+30h]
push    20h
lea     ebx, [ecx+eax]
pop     ecx
sub     ecx, edx
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+34h]
push    20h
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
xor     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
sub     ecx, ds:dword_412a80[ebx*4]
mov     ebx, [esi+28h]
add     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+2ch]
xor     [ebp+var_4], ecx
pop     ecx
sub     ebx, [ebp+var_4]
sub     ecx, edx
push    20h
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+2ch]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
add     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
xor     ecx, ds:dword_412a80[ebx*4]
mov     ebx, [esi+20h]
sub     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+24h]
xor     eax, ecx
pop     ecx
xor     ebx, eax
sub     ecx, edx
mov     edx, ebx
push    20h
shr     edx, cl
mov     ecx, [esi+24h]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
xor     ebx, ebx
mov     [ebp+arg_0], edx
mov     bl, dh
mov     cl, byte ptr [ebp+arg_0+2]
mov     ebx, ds:dword_412a80[ebx*4]
sub     ebx, ds:dword_412680[ecx*4]
mov     ecx, edx
shr     ecx, 18h
and     edx, edi
add     ebx, ds:dword_412280[ecx*4]
mov     ecx, [esi+18h]
xor     ebx, ds:dword_412e80[edx*4]
mov     edx, [esi+1ch]
xor     [ebp+var_4], ebx
mov     ebx, [ebp+var_4]
add     ebx, ecx
pop     ecx
sub     ecx, edx
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+1ch]
shl     ebx, cl
xor     ecx, ecx
push    20h
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
xor     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
sub     ecx, ds:dword_412a80[ebx*4]
mov     ebx, [esi+10h]
add     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+14h]
xor     eax, ecx
pop     ecx
sub     ebx, eax
sub     ecx, edx
mov     edx, ebx
push    20h
shr     edx, cl
mov     ecx, [esi+14h]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
mov     [ebp+arg_0], edx
mov     ebx, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     ebx, 18h
mov     ecx, ds:dword_412680[ecx*4]
add     ecx, ds:dword_412280[ebx*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
xor     ecx, ds:dword_412a80[ebx*4]
mov     ebx, [esi+8]
sub     ecx, ds:dword_412e80[edx*4]
mov     edx, [esi+0ch]
xor     [ebp+var_4], ecx
pop     ecx
xor     ebx, [ebp+var_4]
sub     ecx, edx
push    20h
mov     edx, ebx
shr     edx, cl
mov     ecx, [esi+0ch]
shl     ebx, cl
xor     ecx, ecx
or      edx, ebx
xor     ebx, ebx
mov     [ebp+arg_0], edx
mov     bl, dh
mov     cl, byte ptr [ebp+arg_0+2]
mov     ebx, ds:dword_412a80[ebx*4]
sub     ebx, ds:dword_412680[ecx*4]
mov     ecx, edx
shr     ecx, 18h
and     edx, edi
add     ebx, ds:dword_412280[ecx*4]
mov     ecx, [esi]
xor     ebx, ds:dword_412e80[edx*4]
xor     eax, ebx
mov     ebx, [esi+4]
lea     esi, [ecx+eax]
pop     ecx
sub     ecx, ebx
mov     edx, esi
shr     edx, cl
mov     ecx, ebx
shl     esi, cl
xor     ecx, ecx
or      edx, esi
mov     [ebp+arg_0], edx
mov     esi, edx
mov     cl, byte ptr [ebp+arg_0+2]
shr     esi, 18h
mov     ecx, ds:dword_412680[ecx*4]
xor     ecx, ds:dword_412280[esi*4]
xor     ebx, ebx
mov     bl, dh
and     edx, edi
pop     edi
pop     esi
sub     ecx, ds:dword_412a80[ebx*4]
add     ecx, ds:dword_412e80[edx*4]
mov     edx, [ebp+var_4]
xor     edx, ecx
mov     ecx, [ebp+arg_4]
mov     ebx, edx
shr     ebx, 18h
mov     [ecx], bl
mov     ebx, edx
shr     ebx, 10h
mov     [ecx+1], bl
mov     ebx, edx
mov     [ecx+3], dl
mov     edx, eax
shr     edx, 18h
mov     [ecx+4], dl
mov     edx, eax
shr     edx, 10h
mov     [ecx+5], dl
mov     edx, eax
shr     ebx, 8
shr     edx, 8
mov     [ecx+2], bl
mov     [ecx+6], dl
mov     [ecx+7], al
pop     ebx
leave
retn
push    ebp
mov     ebp, esp
sub     esp, 20h
mov     ecx, [ebp+arg_0]
push    esi
push    edi
mov     edi, [ebp+src]
push    8
lea     eax, [ebp+var_20+1]
pop     esi
mov     edx, [ecx]
shr     edx, 8
mov     [eax-1], dl
mov     dl, [ecx]
mov     [eax], dl
add     ecx, 4
inc     eax
inc     eax
dec     esi
jnz     short loc_402e57
push    ebx
mov     ebx, [ebp+size]
cmp     ebx, 8
mov     esi, ebx
jb      short loc_402e92
shr     ebx, 3
push    [ebp+arg_0]
lea     eax, [ebp+var_20]
push    edi
push    eax
call    sub_402f22
add     esp, 0ch
add     edi, 8
sub     esi, 8
dec     ebx
jnz     short loc_402e79
push    esi
lea     eax, [ebp+var_8]
push    edi
push    eax
call    _memcpy
add     esp, 0ch
mov     [ebp+esi+var_8], 80h
inc     esi
xor     edi, edi
cmp     esi, 6
pop     ebx
jbe     short loc_402ed4
push    8
pop     eax
sub     eax, esi
push    eax
lea     eax, [ebp+esi+var_8]
push    edi
push    eax
call    _memset
push    [ebp+arg_0]
lea     eax, [ebp+var_8]
push    eax
lea     eax, [ebp+var_20]
push    eax
call    sub_402f22
add     esp, 18h
xor     esi, esi
push    6
pop     eax
sub     eax, esi
push    eax
lea     eax, [ebp+esi+var_8]
push    edi
push    eax
call    _memset
mov     eax, [ebp+size]
push    [ebp+arg_0]
mov     ecx, eax
mov     [ebp+var_1], al
lea     eax, [ebp+var_8]
push    eax
lea     eax, [ebp+var_20]
shr     ecx, 8
push    eax
mov     [ebp+var_2], cl
call    sub_402f22
lea     eax, [ebp+var_20]
push    eax
push    [ebp+arg_0]
call    sub_4019ea
push    20h
lea     eax, [ebp+var_20]
push    edi
push    eax
call    _memset
add     esp, 2ch
pop     edi
pop     esi
leave
retn
push    ebp
mov     ebp, esp
push    ebx
push    esi
mov     esi, [ebp+arg_0]
push    edi
push    8
push    [ebp+src]
lea     edi, [esi+10h]
push    edi
call    _memcpy
lea     ebx, [esi+8]
push    ebx
push    [ebp+arg_8]
call    sub_4019ea
push    [ebp+arg_8]
lea     eax, [esi+18h]
push    eax
push    esi
call    sub_4023da
push    edi
push    [ebp+arg_8]
call    sub_4019ea
push    [ebp+arg_8]
push    edi
push    ebx
call    sub_4023da
add     esp, 34h
xor     eax, eax
mov     cl, [esi+eax+18h]
xor     [eax+esi], cl
mov     cl, [edi+eax]
xor     [ebx+eax], cl
inc     eax
cmp     eax, 8
jl      short loc_402f6a
pop     edi
pop     esi
pop     ebx
pop     ebp
retn
mov     eax, [esp+arg_8]
test    eax, eax
jz      short loc_402f92
cmp     byte ptr [eax], 0
jz      short loc_402f92
xor     eax, eax
retn
push    esi
push    0ch
call    _malloc
mov     esi, eax
push    0ch
push    0
push    esi
call    _memset
push    [esp+14h+str]
call    _strlen
inc     eax
push    eax
call    _malloc
push    [esp+1ch+str]
mov     [esi], eax
push    eax
call    _strcpy
mov     eax, [esp+24h+arg_0]
add     esp, 20h
mov     ecx, [eax]
push    1
mov     [esi+8], ecx
mov     [eax], esi
pop     eax
pop     esi
retn
push    edi
mov     edi, [esp+4+lpmem]
test    edi, edi
jz      short loc_40301f
push    esi
mov     esi, edi
mov     edi, [edi+8]
cmp     byte ptr [esi+4], 0
push    dword ptr [esi]
jz      short loc_402ff3
call    __rmdir
jmp     short loc_402ff8
call    __unlink
pop     ecx
push    dword ptr [esi]
call    _strlen
push    eax
push    0
push    dword ptr [esi]
call    _memset
push    dword ptr [esi]
call    sub_40959b
push    esi
call    sub_40959b
add     esp, 18h
test    edi, edi
jnz     short loc_402fdf
pop     esi
pop     edi
retn
push    ebp
mov     ebp, esp
sub     esp, 18h
push    ebx
push    esi
mov     esi, [ebp+arg_0]
xor     ebx, ebx
push    edi
cmp     [esi+28h], ebx
jnz     loc_4030de
mov     edi, 200h
cmp     [esi+14h], edi
jz      short loc_403047
cmp     [esi+10h], ebx
jnz     short loc_4030c4
mov     ecx, [esi+10h]
push    0ah
mov     eax, ecx
xor     edx, edx
pop     ebx
div     ebx
test    edx, edx
jnz     short loc_40308e
mov     eax, [esi+18h]
push    dword ptr [esi+164h]
mov     [ebp+var_8], eax
mov     eax, [esi+1ch]
mov     [ebp+var_4], eax
lea     eax, [ebp+var_18]
xor     ebx, ebx
push    eax
shl     ecx, 9
push    ebx
mov     [ebp+var_18], ebx
mov     [ebp+var_10], ecx
mov     [ebp+var_c], ebx
call    dword ptr [esi+160h]
add     esp, 0ch
cmp     eax, ebx
jz      short loc_403090
mov     [esi+28h], eax
jmp     short loc_4030de
xor     ebx, ebx
push    edi
push    ebx
push    dword ptr [esi+24h]
call    _memset
push    dword ptr [esi]
push    edi
push    1
push    dword ptr [esi+24h]
call    sub_409ba9
push    dword ptr [esi+20h]
push    dword ptr [esi+24h]
push    dword ptr [esi+10h]
push    dword ptr [esi+0ch]
push    dword ptr [esi+8]
call    sub_405746
add     esp, 30h
inc     dword ptr [esi+10h]
mov     [esi+14h], ebx
mov     eax, [esi+10h]
mov     ecx, [esi+14h]
add     eax, 7fffffh
shl     eax, 9
add     eax, ecx
cmp     eax, [esi+18h]
jnz     short loc_4030e3
cmp     ebx, [esi+1ch]
jnz     short loc_4030e3
or      eax, 0ffffffffh
jmp     short loc_4030ee
mov     eax, [esi+20h]
movzx   eax, byte ptr [eax+ecx]
inc     ecx
mov     [esi+14h], ecx
pop     edi
pop     esi
pop     ebx
leave
retn
push    ebp
mov     ebp, esp
sub     esp, 220h
push    ebx
push    esi
mov     esi, [ebp+arg_4]
xor     ebx, ebx
push    edi
cmp     [esi+28h], ebx
jnz     loc_403485
cmp     [esi+38h], bl
jz      loc_403440
cmp     [esi+154h], ebx
ja      short loc_40314d
jb      short loc_403129
cmp     dword ptr [esi+150h], 8
jnb     short loc_40314d
mov     eax, [esi+150h]
mov     cl, byte ptr [ebp+character]
push    1
mov     [eax+esi+140h], cl
pop     eax
add     [esi+150h], eax
adc     [esi+154h], ebx
jmp     loc_403488
mov     ecx, [esi+150h]
mov     eax, [ebp+character]
mov     [ecx+esi+31h], al
add     dword ptr [esi+150h], 1
adc     [esi+154h], ebx
cmp     eax, ebx
jnz     loc_403485
lea     eax, [esi+39h]
push    eax
call    _strlen
push    dword ptr [esi+158h]
mov     edi, eax
call    _strlen
add     edi, eax
pop     ecx
cmp     edi, 104h
pop     ecx
jb      short loc_4031c2
push    dword ptr [esi+164h]
mov     eax, 0ffffd122h
mov     [esi+28h], eax
mov     [ebp+var_c], eax
lea     eax, [ebp+var_18]
lea     ecx, [esi+39h]
push    eax
push    ebx
mov     [ebp+var_18], 5
mov     [ebp+var_10], ecx
call    dword ptr [esi+160h]
add     esp, 0ch
jmp     loc_403485
mov     eax, [esi+140h]
mov     ecx, [esi+144h]
mov     edx, eax
and     edx, ecx
cmp     edx, 0ffffffffh
jnz     loc_40325e
push    dword ptr [esi+158h]
lea     eax, [ebp+destination]
push    eax
call    _strcpy
lea     eax, [esi+39h]
push    eax
lea     eax, [ebp+destination]
push    eax
call    _strcat
push    1
lea     eax, [ebp+destination]
pop     edi
mov     [ebp+var_10], eax
push    dword ptr [esi+164h]
lea     eax, [ebp+var_18]
mov     [ebp+var_18], edi
push    eax
push    ebx
call    dword ptr [esi+160h]
add     esp, 1ch
cmp     eax, ebx
jz      short loc_40322c
mov     [esi+28h], eax
jmp     loc_40340b
lea     eax, [ebp+destination]
push    eax
call    __mkdir
lea     eax, [ebp+destination]
lea     edi, [esi+15ch]
push    ebx
push    eax
push    edi
call    sub_402f82
mov     eax, [edi]
add     esp, 10h
mov     byte ptr [eax+4], 1
mov     byte ptr [esi+38h], 1
jmp     loc_403432
push    dword ptr [esi+158h]
or      eax, ecx
jnz     loc_403343
lea     eax, [ebp+destination]
push    eax
call    _strcpy
lea     eax, [esi+39h]
push    eax
lea     eax, [ebp+destination]
push    eax
call    _strcat
push    1
lea     eax, [ebp+destination]
pop     edi
mov     [ebp+var_10], eax
push    dword ptr [esi+164h]
lea     eax, [ebp+var_18]
mov     [ebp+var_18], edi
push    eax
push    ebx
call    dword ptr [esi+160h]
add     esp, 1ch
cmp     eax, ebx
jnz     loc_403224
push    dword ptr [esi+164h]
lea     eax, [ebp+destination]
mov     [ebp+var_10], eax
lea     eax, [ebp+filename]
mov     [ebp+var_c], eax
lea     eax, [ebp+var_18]
push    eax
push    ebx
mov     [ebp+var_18], 4
call    dword ptr [esi+160h]
add     esp, 0ch
cmp     eax, ebx
jnz     loc_403224
lea     eax, [ebp+filename]
push    offset awb
push    eax
call    _fopen
pop     ecx
cmp     eax, ebx
pop     ecx
mov     [esi+4], eax
jnz     short loc_40331c
mov     eax, 0ffffd129h
mov     [ebp+var_18], 5
mov     [esi+28h], eax
lea     ecx, [ebp+filename]
jmp     loc_4033f1
lea     eax, [ebp+filename]
push    ebx
push    eax
lea     eax, [esi+15ch]
push    eax
call    sub_402f82
push    dword ptr [esi+4]
call    _fclose
add     esp, 10h
mov     [esi+4], ebx
jmp     loc_403255
lea     eax, [ebp+filename]
push    eax
call    _strcpy
lea     eax, [esi+39h]
push    eax
lea     eax, [ebp+filename]
push    eax
call    _strcat
push    1
lea     eax, [ebp+filename]
pop     edi
mov     [ebp+var_10], eax
push    dword ptr [esi+164h]
lea     eax, [ebp+var_18]
mov     [ebp+var_18], edi
push    eax
push    ebx
call    dword ptr [esi+160h]
add     esp, 1ch
cmp     eax, ebx
jnz     loc_403224
push    dword ptr [esi+164h]
lea     eax, [ebp+filename]
mov     [ebp+var_10], eax
lea     eax, [ebp+destination]
mov     [ebp+var_c], eax
lea     eax, [ebp+var_18]
push    eax
push    ebx
mov     [ebp+var_18], 4
call    dword ptr [esi+160h]
add     esp, 0ch
cmp     eax, ebx
jnz     loc_403224
lea     eax, [ebp+destination]
push    offset awb
push    eax
mov     [esi+38h], bl
call    _fopen
pop     ecx
cmp     eax, ebx
pop     ecx
mov     [esi+4], eax
jnz     short loc_40340f
mov     eax, 0ffffd129h
mov     [ebp+var_18], 5
mov     [esi+28h], eax
lea     ecx, [ebp+destination]
push    dword ptr [esi+164h]
mov     [ebp+var_c], eax
lea     eax, [ebp+var_18]
mov     [ebp+var_10], ecx
push    eax
push    ebx
call    dword ptr [esi+160h]
add     esp, 0ch
mov     eax, edi
jmp     short loc_403488
lea     eax, [ebp+destination]
push    ebx
push    eax
lea     eax, [esi+15ch]
push    eax
call    sub_402f82
mov     [esi+148h], ebx
add     esp, 0ch
mov     [esi+14ch], ebx
mov     [esi+150h], ebx
mov     [esi+154h], ebx
jmp     short loc_403485
push    dword ptr [esi+4]
push    [ebp+character]
call    _fputc
add     dword ptr [esi+148h], 1
lea     eax, [esi+148h]
pop     ecx
pop     ecx
adc     [eax+4], ebx
mov     edx, [eax]
cmp     edx, [esi+140h]
lea     ecx, [esi+140h]
jnz     short loc_403485
mov     eax, [eax+4]
cmp     eax, [ecx+4]
jnz     short loc_403485
push    dword ptr [esi+4]
call    _fclose
pop     ecx
mov     [esi+4], ebx
mov     byte ptr [esi+38h], 1
push    1
pop     eax
pop     edi
pop     esi
pop     ebx
leave
retn
push    [esp+arg_0]
call    sub_401511
pop     ecx
retn
push    ebp
mov     ebp, esp
sub     esp, 580h
push    ebx
push    esi
push    edi
xor     edi, edi
push    168h
lea     eax, [ebp+var_180]
push    edi
push    eax
call    _memset
push    offset mode
push    [ebp+arg_c]
call    _fopen
mov     esi, [ebp+arg_0]
push    edi
mov     [ebp+arg_c], eax
push    dword ptr [esi+6]
push    eax
call    _fseek
mov     ebx, [ebp+arg_8]
mov     [ebp+var_158], edi
mov     [ebp+var_178], esi
mov     [ebp+var_170], edi
mov     eax, [ebx]
mov     [ebp+var_148], 1
mov     [ebp+var_24], eax
mov     eax, [ebp+arg_10]
mov     [ebp+var_28], eax
mov     eax, [ebp+arg_c]
mov     [ebp+var_180], eax
mov     eax, [esi+12h]
mov     [ebp+var_150], eax
mov     eax, [esi+16h]
mov     [ebp+var_14c], eax
mov     eax, [ebp+arg_4]
mov     [ebp+var_174], eax
lea     eax, [ebp+var_580]
mov     [ebp+var_160], eax
lea     eax, [ebp+var_380]
mov     [ebp+var_15c], eax
mov     eax, [esi+0ah]
mov     [ebp+var_168], eax
mov     eax, [esi+0eh]
mov     [ebp+var_164], eax
mov     eax, [ebp+arg_14]
mov     [ebp+var_20], eax
mov     eax, [ebp+arg_18]
mov     [ebp+var_1c], eax
lea     eax, [ebp+var_180]
push    eax
call    sub_40348d
add     esp, 24h
cmp     [ebp+stream], edi
jz      short loc_403579
push    [ebp+stream]
call    _fclose
pop     ecx
mov     esi, 200h
lea     eax, [ebp+var_380]
push    esi
push    edi
push    eax
call    _memset
push    esi
lea     eax, [ebp+var_580]
push    edi
push    eax
call    _memset
mov     eax, [ebp+var_168]
push    [ebp+var_1c]
mov     ecx, [ebp+var_164]
mov     [ebp+var_10], eax
mov     [ebp+var_8], eax
lea     eax, [ebp+var_18]
push    eax
push    edi
mov     [ebp+var_18], edi
mov     [ebp+var_c], ecx
mov     [ebp+var_4], ecx
call    [ebp+var_20]
push    [ebp+arg_c]
call    _fclose
mov     eax, [ebp+var_24]
add     esp, 28h
mov     [ebx], eax
mov     eax, [ebp+var_158]
pop     edi
pop     esi
pop     ebx
leave
retn
mov     eax, [esp+arg_0]
and     dword ptr [eax+54h], 0
and     dword ptr [eax+58h], 0
mov     dword ptr [eax+40h], 67452301h
mov     dword ptr [eax+44h], 0efcdab89h
mov     dword ptr [eax+48h], 98badcfeh
mov     dword ptr [eax+4ch], 10325476h
mov     dword ptr [eax+50h], 0c3d2e1f0h
retn
push    ebp
mov     ebp, esp
sub     esp, 10h
mov     ecx, [ebp+arg_0]
push    ebx
push    esi
push    edi
mov     edx, [ecx]
mov     eax, [ecx+4]
mov     esi, [ecx+8]
mov     edi, edx
mov     ebx, edx
mov     [ebp+var_8], eax
shr     edi, 1bh
shl     ebx, 5
or      edi, ebx
mov     ebx, [ecx+0ch]
mov     eax, [ebp+arg_4]
xor     ebx, esi
and     ebx, [ebp+var_8]
mov     esi, [eax]
xor     ebx, [ecx+0ch]
add     edi, ebx
add     edi, [ecx+10h]
lea     ebx, [edi+esi+5a827999h]
mov     edi, [ebp+var_8]
mov     esi, edi
mov     [ebp+arg_0], ebx
shl     esi, 1eh
shr     edi, 2
or      esi, edi
mov     edi, ebx
shr     edi, 1bh
shl     ebx, 5
or      edi, ebx
mov     ebx, [ecx+8]
xor     ebx, esi
mov     [ebp+var_8], esi
and     ebx, edx
mov     esi, [ecx+0ch]
xor     ebx, [ecx+8]
add     edi, ebx
add     edi, [eax+4]
lea     esi, [esi+edi+5a827999h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, esi
mov     ebx, esi
mov     [ebp+arg_4], edi
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_8]
xor     ebx, edi
mov     edi, [eax+8]
and     ebx, [ebp+arg_0]
add     edi, edx
mov     edx, [ecx+8]
xor     ebx, [ebp+var_8]
add     ebx, edi
mov     edi, [ebp+arg_0]
lea     ebx, [edx+ebx+5a827999h]
mov     edx, edi
shl     edx, 1eh
shr     edi, 2
or      edx, edi
mov     edi, ebx
mov     [ebp+arg_0], edx
xor     edx, [ebp+arg_4]
mov     [ebp+var_c], ebx
and     edx, esi
xor     edx, [ebp+arg_4]
shr     edi, 1bh
shl     ebx, 5
or      edi, ebx
add     edi, edx
mov     edx, [ebp+var_8]
add     edi, [eax+0ch]
lea     edx, [edx+edi+5a827999h]
mov     edi, esi
shl     edi, 1eh
shr     esi, 2
or      edi, esi
mov     esi, edx
mov     ebx, edx
mov     [ebp+var_4], edi
shr     esi, 1bh
shl     ebx, 5
or      esi, ebx
mov     ebx, [ebp+arg_0]
xor     ebx, edi
mov     edi, [ebp+arg_4]
and     ebx, [ebp+var_c]
xor     ebx, [ebp+arg_0]
add     esi, ebx
add     esi, [eax+10h]
lea     ebx, [edi+esi+5a827999h]
mov     edi, [ebp+var_c]
mov     esi, edi
mov     [ebp+arg_4], ebx
shl     esi, 1eh
shr     edi, 2
or      esi, edi
mov     edi, ebx
shr     edi, 1bh
shl     ebx, 5
or      edi, ebx
mov     ebx, [ebp+var_4]
xor     ebx, esi
mov     [ebp+var_c], esi
and     ebx, edx
mov     esi, [ebp+arg_0]
xor     ebx, [ebp+var_4]
add     edi, ebx
add     edi, [eax+14h]
lea     esi, [esi+edi+5a827999h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, esi
mov     ebx, esi
mov     [ebp+var_8], edi
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_c]
xor     ebx, edi
mov     edi, [ebp+var_4]
and     ebx, [ebp+arg_4]
xor     ebx, [ebp+var_c]
add     edx, ebx
add     edx, [eax+18h]
lea     ebx, [edi+edx+5a827999h]
mov     edi, [ebp+arg_4]
mov     edx, edi
mov     [ebp+var_4], ebx
shl     edx, 1eh
shr     edi, 2
or      edx, edi
mov     edi, ebx
shr     edi, 1bh
shl     ebx, 5
or      edi, ebx
mov     ebx, [ebp+var_8]
xor     ebx, edx
mov     [ebp+arg_4], edx
and     ebx, esi
mov     edx, [ebp+var_c]
xor     ebx, [ebp+var_8]
add     edi, ebx
add     edi, [eax+1ch]
lea     edx, [edx+edi+5a827999h]
mov     edi, esi
shl     edi, 1eh
shr     esi, 2
or      edi, esi
mov     esi, edx
mov     ebx, edx
mov     [ebp+arg_0], edi
shr     esi, 1bh
shl     ebx, 5
or      esi, ebx
xor     edi, [ebp+arg_4]
mov     ebx, [eax+20h]
add     ebx, esi
mov     esi, [ebp+var_8]
and     edi, [ebp+var_4]
xor     edi, [ebp+arg_4]
add     edi, ebx
lea     ebx, [esi+edi+5a827999h]
mov     edi, [ebp+var_4]
mov     esi, edi
mov     [ebp+var_8], ebx
shl     esi, 1eh
shr     edi, 2
or      esi, edi
mov     edi, ebx
shr     edi, 1bh
shl     ebx, 5
or      edi, ebx
mov     ebx, [ebp+arg_0]
xor     ebx, esi
mov     [ebp+var_4], esi
and     ebx, edx
mov     esi, [ebp+arg_4]
xor     ebx, [ebp+arg_0]
add     edi, ebx
add     edi, [eax+24h]
lea     esi, [esi+edi+5a827999h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, esi
mov     ebx, esi
mov     [ebp+var_c], edi
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_4]
xor     ebx, edi
mov     edi, [ebp+arg_0]
and     ebx, [ebp+var_8]
xor     ebx, [ebp+var_4]
add     edx, ebx
add     edx, [eax+28h]
lea     ebx, [edi+edx+5a827999h]
mov     edi, [ebp+var_8]
mov     edx, edi
mov     [ebp+arg_0], ebx
shl     edx, 1eh
shr     edi, 2
or      edx, edi
mov     edi, ebx
shr     edi, 1bh
shl     ebx, 5
or      edi, ebx
mov     ebx, [ebp+var_c]
xor     ebx, edx
mov     [ebp+var_8], edx
and     ebx, esi
mov     edx, [ebp+var_4]
xor     ebx, [ebp+var_c]
add     edi, ebx
add     edi, [eax+2ch]
lea     edx, [edx+edi+5a827999h]
mov     edi, esi
shl     edi, 1eh
shr     esi, 2
or      edi, esi
mov     esi, edx
mov     ebx, edx
mov     [ebp+arg_4], edi
shr     esi, 1bh
shl     ebx, 5
or      esi, ebx
mov     ebx, [ebp+var_8]
xor     ebx, edi
mov     edi, [ebp+var_c]
and     ebx, [ebp+arg_0]
xor     ebx, [ebp+var_8]
add     esi, ebx
add     esi, [eax+30h]
lea     ebx, [edi+esi+5a827999h]
mov     edi, [ebp+arg_0]
mov     esi, edi
mov     [ebp+var_c], ebx
shl     esi, 1eh
shr     edi, 2
or      esi, edi
mov     edi, [eax+34h]
mov     [ebp+var_10], edi
mov     [ebp+arg_0], esi
xor     esi, [ebp+arg_4]
mov     edi, ebx
shr     edi, 1bh
shl     ebx, 5
or      edi, ebx
mov     ebx, [ebp+var_10]
and     esi, edx
add     ebx, edi
xor     esi, [ebp+arg_4]
mov     edi, [ebp+var_8]
add     esi, ebx
lea     esi, [edi+esi+5a827999h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, esi
mov     ebx, esi
mov     [ebp+var_4], edi
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+arg_0]
xor     ebx, edi
mov     edi, [ebp+arg_4]
and     ebx, [ebp+var_c]
xor     ebx, [ebp+arg_0]
add     edx, ebx
add     edx, [eax+38h]
lea     ebx, [edi+edx+5a827999h]
mov     edi, [ebp+var_c]
mov     edx, edi
mov     [ebp+arg_4], ebx
shl     edx, 1eh
shr     edi, 2
or      edx, edi
mov     edi, ebx
shr     edi, 1bh
shl     ebx, 5
or      edi, ebx
mov     ebx, [ebp+var_4]
xor     ebx, edx
mov     [ebp+var_c], edx
and     ebx, esi
mov     edx, [ebp+arg_0]
xor     ebx, [ebp+var_4]
add     edi, ebx
add     edi, [eax+3ch]
lea     ebx, [edx+edi+5a827999h]
mov     edx, [ebp+var_10]
xor     edx, [eax+20h]
mov     edi, esi
shl     edi, 1eh
xor     edx, [eax+8]
mov     [ebp+arg_0], ebx
shr     esi, 2
xor     edx, [eax]
or      edi, esi
mov     [ebp+var_8], edi
mov     esi, edx
shr     edx, 1fh
add     esi, esi
or      edx, esi
mov     esi, ebx
shr     esi, 1bh
shl     ebx, 5
or      esi, ebx
mov     ebx, [ebp+var_c]
xor     ebx, edi
mov     [eax], edx
and     ebx, [ebp+arg_4]
xor     ebx, [ebp+var_c]
add     edx, esi
add     ebx, edx
mov     edx, [ebp+var_4]
lea     ebx, [edx+ebx+5a827999h]
mov     edx, [ebp+arg_4]
mov     edi, edx
mov     [ebp+var_4], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+38h]
xor     edx, [eax+24h]
mov     [ebp+arg_4], edi
xor     edx, [eax+0ch]
xor     edx, [eax+4]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_8]
xor     ebx, edi
mov     [eax+4], esi
and     ebx, [ebp+arg_0]
add     esi, edx
mov     edx, [ebp+var_c]
xor     ebx, [ebp+var_8]
add     ebx, esi
lea     ebx, [edx+ebx+5a827999h]
mov     edx, [ebp+arg_0]
mov     edi, edx
mov     [ebp+var_c], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+28h]
xor     edx, [eax+3ch]
mov     [ebp+arg_0], edi
xor     edi, [ebp+arg_4]
xor     edx, [eax+10h]
and     edi, [ebp+var_4]
xor     edx, [eax+8]
xor     edi, [ebp+arg_4]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     [eax+8], esi
add     esi, edx
mov     edx, [ebp+var_8]
add     edi, esi
lea     ebx, [edx+edi+5a827999h]
mov     edx, [ebp+var_4]
mov     edi, edx
mov     [ebp+var_8], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+2ch]
xor     edx, [eax+14h]
mov     [ebp+var_4], edi
xor     edx, [eax]
xor     edx, [eax+0ch]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+arg_0]
mov     [eax+0ch], esi
xor     ebx, edi
add     esi, edx
and     ebx, [ebp+var_c]
mov     edx, [ebp+arg_4]
xor     ebx, [ebp+arg_0]
add     ebx, esi
lea     ebx, [edx+ebx+5a827999h]
mov     edx, [ebp+var_c]
mov     edi, edx
mov     [ebp+arg_4], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+30h]
xor     edx, [eax+18h]
mov     [ebp+var_c], edi
xor     edx, [eax+10h]
xor     edx, [eax+4]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_4]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_8]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+10h], esi
add     esi, edi
mov     edi, edx
xor     ebx, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+34h]
xor     edx, [eax+1ch]
add     ebx, esi
mov     esi, [ebp+arg_0]
mov     [ebp+var_8], edi
xor     edx, [eax+14h]
lea     ebx, [esi+ebx+6ed9eba1h]
xor     edx, [eax+8]
mov     [ebp+arg_0], ebx
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_c]
mov     [ebp+var_10], edx
mov     edx, [ebp+arg_4]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+14h], esi
xor     ebx, edx
add     esi, edi
add     ebx, esi
mov     esi, [ebp+var_4]
lea     edi, [esi+ebx+6ed9eba1h]
mov     esi, edx
shl     esi, 1eh
shr     edx, 2
or      esi, edx
mov     edx, [eax+38h]
xor     edx, [eax+20h]
mov     [ebp+arg_4], esi
mov     [ebp+var_4], edi
xor     edx, [eax+18h]
xor     edx, [eax+0ch]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     [eax+18h], esi
mov     edx, edi
shr     edx, 1bh
shl     edi, 5
or      edx, edi
mov     edi, [ebp+arg_0]
xor     edi, [ebp+var_8]
add     esi, edx
mov     edx, [ebp+var_c]
xor     edi, [ebp+arg_4]
add     edi, esi
lea     ebx, [edx+edi+6ed9eba1h]
mov     edx, [ebp+arg_0]
mov     edi, edx
mov     [ebp+var_c], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+3ch]
xor     edx, [eax+24h]
mov     [ebp+arg_0], edi
xor     edi, [ebp+var_4]
xor     edx, [eax+1ch]
xor     edi, [ebp+arg_4]
xor     edx, [eax+10h]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     [eax+1ch], esi
add     esi, edx
mov     edx, [ebp+var_8]
add     edi, esi
lea     ebx, [edx+edi+6ed9eba1h]
mov     edx, [ebp+var_4]
mov     edi, edx
mov     [ebp+var_8], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+28h]
xor     edx, [eax+20h]
mov     [ebp+var_4], edi
xor     edx, [eax+14h]
xor     edx, [eax]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+arg_0]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_c]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+20h], esi
add     esi, edi
mov     edi, edx
xor     ebx, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+18h]
xor     edx, [eax+2ch]
add     ebx, esi
mov     esi, [ebp+arg_4]
mov     [ebp+var_c], edi
xor     edx, [eax+24h]
lea     ebx, [esi+ebx+6ed9eba1h]
xor     edx, [eax+4]
mov     [ebp+arg_4], ebx
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
mov     [eax+24h], esi
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_4]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_8]
xor     ebx, edi
mov     edi, [ebp+var_10]
add     esi, edi
mov     edi, edx
xor     ebx, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+30h]
xor     edx, [eax+28h]
add     ebx, esi
mov     esi, [ebp+arg_0]
mov     [ebp+var_8], edi
xor     edx, [eax+1ch]
lea     ebx, [esi+ebx+6ed9eba1h]
xor     edx, [eax+8]
mov     [ebp+arg_0], ebx
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_c]
mov     [ebp+var_10], edx
mov     edx, [ebp+arg_4]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+28h], esi
xor     ebx, edx
add     esi, edi
add     ebx, esi
mov     esi, [ebp+var_4]
lea     edi, [esi+ebx+6ed9eba1h]
mov     esi, edx
shl     esi, 1eh
shr     edx, 2
or      esi, edx
mov     edx, [eax+20h]
xor     edx, [eax+34h]
mov     [ebp+arg_4], esi
mov     [ebp+var_4], edi
xor     edx, [eax+2ch]
xor     edx, [eax+0ch]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, edi
shr     edx, 1bh
shl     edi, 5
or      edx, edi
mov     edi, [ebp+arg_0]
xor     edi, [ebp+var_8]
mov     [eax+2ch], esi
add     esi, edx
mov     edx, [ebp+var_c]
xor     edi, [ebp+arg_4]
add     edi, esi
lea     ebx, [edx+edi+6ed9eba1h]
mov     edx, [ebp+arg_0]
mov     edi, edx
mov     [ebp+var_c], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+38h]
xor     edx, [eax+30h]
mov     [ebp+arg_0], edi
xor     edx, [eax+24h]
xor     edx, [eax+10h]
xor     edi, [ebp+var_4]
mov     esi, edx
shr     esi, 1fh
add     edx, edx
xor     edi, [ebp+arg_4]
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     [eax+30h], esi
add     esi, edx
mov     edx, [ebp+var_8]
add     edi, esi
lea     ebx, [edx+edi+6ed9eba1h]
mov     edx, [ebp+var_4]
mov     edi, edx
mov     [ebp+var_8], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+28h]
xor     edx, [eax+3ch]
mov     [ebp+var_4], edi
xor     edx, [eax+34h]
xor     edx, [eax+14h]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+arg_0]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_c]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+34h], esi
add     esi, edi
mov     edi, edx
xor     ebx, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+38h]
xor     edx, [eax+18h]
add     ebx, esi
mov     esi, [ebp+arg_4]
mov     [ebp+var_c], edi
xor     edx, [eax+2ch]
lea     ebx, [esi+ebx+6ed9eba1h]
xor     edx, [eax]
mov     [ebp+arg_4], ebx
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_4]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_8]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+38h], esi
xor     ebx, edx
add     esi, edi
mov     edi, edx
add     ebx, esi
mov     esi, [ebp+arg_0]
shl     edi, 1eh
shr     edx, 2
lea     ebx, [esi+ebx+6ed9eba1h]
or      edi, edx
mov     edx, [eax+30h]
mov     [ebp+arg_0], ebx
mov     [ebp+var_8], edi
xor     edx, [eax+3ch]
xor     edx, [eax+1ch]
xor     edx, [eax+4]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_c]
mov     [ebp+var_10], edx
mov     edx, [ebp+arg_4]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+3ch], esi
xor     ebx, edx
add     esi, edi
add     ebx, esi
mov     esi, [ebp+var_4]
lea     edi, [esi+ebx+6ed9eba1h]
mov     esi, edx
shl     esi, 1eh
shr     edx, 2
or      esi, edx
mov     edx, [eax+20h]
xor     edx, [eax+34h]
mov     [ebp+arg_4], esi
mov     [ebp+var_4], edi
xor     edx, [eax]
xor     edx, [eax+8]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, edi
shr     edx, 1bh
shl     edi, 5
or      edx, edi
mov     edi, [ebp+arg_0]
xor     edi, [ebp+var_8]
mov     [eax], esi
add     esi, edx
mov     edx, [ebp+var_c]
xor     edi, [ebp+arg_4]
add     edi, esi
lea     ebx, [edx+edi+6ed9eba1h]
mov     edx, [ebp+arg_0]
mov     edi, edx
mov     [ebp+var_c], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+38h]
xor     edx, [eax+24h]
mov     [ebp+arg_0], edi
xor     edi, [ebp+var_4]
xor     edx, [eax+0ch]
xor     edi, [ebp+arg_4]
xor     edx, [eax+4]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     [eax+4], esi
add     esi, edx
mov     edx, [ebp+var_8]
add     edi, esi
lea     ebx, [edx+edi+6ed9eba1h]
mov     edx, [ebp+var_4]
mov     edi, edx
mov     [ebp+var_8], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     [ebp+var_4], edi
mov     edx, [eax+28h]
xor     edx, [eax+3ch]
xor     edx, [eax+10h]
xor     edx, [eax+8]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+arg_0]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_c]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+8], esi
add     esi, edi
mov     edi, edx
xor     ebx, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+2ch]
xor     edx, [eax+14h]
add     ebx, esi
mov     esi, [ebp+arg_4]
mov     [ebp+var_c], edi
xor     edx, [eax]
lea     ebx, [esi+ebx+6ed9eba1h]
xor     edx, [eax+0ch]
mov     [ebp+arg_4], ebx
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_4]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_8]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+0ch], esi
add     esi, edi
mov     edi, edx
xor     ebx, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+30h]
xor     edx, [eax+18h]
add     ebx, esi
mov     esi, [ebp+arg_0]
mov     [ebp+var_8], edi
xor     edx, [eax+10h]
lea     ebx, [esi+ebx+6ed9eba1h]
xor     edx, [eax+4]
mov     [ebp+arg_0], ebx
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_c]
mov     [ebp+var_10], edx
mov     edx, [ebp+arg_4]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+10h], esi
xor     ebx, edx
add     esi, edi
add     ebx, esi
mov     esi, [ebp+var_4]
lea     edi, [esi+ebx+6ed9eba1h]
mov     esi, edx
mov     [ebp+var_4], edi
shr     edx, 2
shl     esi, 1eh
or      esi, edx
mov     edx, [eax+34h]
xor     edx, [eax+1ch]
mov     [ebp+arg_4], esi
xor     edx, [eax+14h]
xor     edx, [eax+8]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, edi
shr     edx, 1bh
shl     edi, 5
or      edx, edi
mov     edi, [ebp+arg_0]
xor     edi, [ebp+var_8]
mov     [eax+14h], esi
add     esi, edx
mov     edx, [ebp+var_c]
xor     edi, [ebp+arg_4]
add     edi, esi
lea     ebx, [edx+edi+6ed9eba1h]
mov     edx, [ebp+arg_0]
mov     edi, edx
mov     [ebp+var_c], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+38h]
xor     edx, [eax+20h]
mov     [ebp+arg_0], edi
xor     edi, [ebp+var_4]
xor     edx, [eax+18h]
xor     edi, [ebp+arg_4]
xor     edx, [eax+0ch]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     [eax+18h], esi
add     esi, edx
mov     edx, [ebp+var_8]
add     edi, esi
lea     ebx, [edx+edi+6ed9eba1h]
mov     edx, [ebp+var_4]
mov     edi, edx
mov     [ebp+var_8], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+3ch]
xor     edx, [eax+24h]
mov     [ebp+var_4], edi
xor     edx, [eax+1ch]
xor     edx, [eax+10h]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+arg_0]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_c]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+1ch], esi
xor     ebx, edx
add     esi, edi
add     ebx, esi
mov     esi, [ebp+arg_4]
mov     edi, edx
lea     ebx, [esi+ebx+6ed9eba1h]
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+28h]
xor     edx, [eax+20h]
mov     [ebp+arg_4], ebx
mov     [ebp+var_c], edi
xor     edx, [eax+14h]
xor     edx, [eax]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, edi
xor     ebx, [ebp+var_8]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_8]
mov     [eax+20h], esi
and     ebx, [ebp+var_4]
and     edi, edx
add     ebx, esi
mov     esi, [ebp+var_10]
add     ebx, esi
mov     esi, [ebp+arg_0]
add     edi, ebx
lea     ebx, [esi+edi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+18h]
xor     edx, [eax+2ch]
mov     [ebp+arg_0], ebx
mov     [ebp+var_8], edi
xor     edx, [eax+24h]
xor     edx, [eax+4]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, edi
xor     ebx, [ebp+arg_4]
mov     [ebp+var_10], edx
mov     edx, [ebp+arg_4]
mov     [eax+24h], esi
and     ebx, [ebp+var_c]
and     edi, edx
add     ebx, esi
mov     esi, [ebp+var_10]
add     ebx, esi
mov     esi, [ebp+var_4]
add     edi, ebx
lea     ebx, [esi+edi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+30h]
xor     edx, [eax+28h]
mov     [ebp+var_4], ebx
mov     [ebp+arg_4], edi
xor     edx, [eax+1ch]
xor     edx, [eax+8]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
mov     [eax+28h], esi
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+arg_0]
xor     ebx, edi
and     ebx, [ebp+var_8]
add     ebx, esi
mov     esi, [ebp+arg_0]
add     ebx, edx
mov     edx, [ebp+var_c]
and     esi, edi
add     esi, ebx
lea     ebx, [edx+esi-70e44324h]
mov     edx, [ebp+arg_0]
mov     edi, edx
mov     [ebp+var_c], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+20h]
xor     edx, [eax+34h]
mov     [ebp+arg_0], edi
xor     edi, [ebp+var_4]
xor     edx, [eax+2ch]
and     edi, [ebp+arg_4]
xor     edx, [eax+0ch]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     [eax+2ch], esi
mov     ebx, edx
mov     edx, [ebp+var_4]
add     edi, esi
mov     esi, [ebp+arg_0]
add     edi, ebx
and     esi, edx
add     esi, edi
mov     edi, [ebp+var_8]
lea     ebx, [edi+esi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+38h]
xor     edx, [eax+30h]
mov     [ebp+var_8], ebx
mov     [ebp+var_4], edi
xor     edx, [eax+24h]
xor     edx, [eax+10h]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, edi
xor     ebx, [ebp+var_c]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_c]
mov     [eax+30h], esi
and     ebx, [ebp+arg_0]
and     edi, edx
add     ebx, esi
mov     esi, [ebp+var_10]
add     ebx, esi
mov     esi, [ebp+arg_4]
add     edi, ebx
lea     ebx, [esi+edi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+28h]
mov     [ebp+arg_4], ebx
mov     [ebp+var_c], edi
xor     edx, [eax+3ch]
xor     edx, [eax+34h]
xor     edx, [eax+14h]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, edi
xor     ebx, [ebp+var_8]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_8]
mov     [eax+34h], esi
and     ebx, [ebp+var_4]
and     edi, edx
add     ebx, esi
mov     esi, [ebp+var_10]
add     ebx, esi
mov     esi, [ebp+arg_0]
add     edi, ebx
lea     ebx, [esi+edi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+38h]
xor     edx, [eax+18h]
mov     [ebp+arg_0], ebx
mov     [ebp+var_8], edi
xor     edx, [eax+2ch]
xor     edx, [eax]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, edi
xor     ebx, [ebp+arg_4]
mov     [ebp+var_10], edx
mov     edx, [ebp+arg_4]
mov     [eax+38h], esi
and     ebx, [ebp+var_c]
and     edi, edx
add     ebx, esi
mov     esi, [ebp+var_10]
add     ebx, esi
mov     esi, [ebp+var_4]
add     edi, ebx
lea     ebx, [esi+edi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+30h]
xor     edx, [eax+3ch]
mov     [ebp+var_4], ebx
mov     [ebp+arg_4], edi
xor     edx, [eax+1ch]
xor     edx, [eax+4]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+arg_0]
xor     ebx, edi
mov     [eax+3ch], esi
and     ebx, [ebp+var_8]
add     ebx, esi
mov     esi, [ebp+arg_0]
and     esi, edi
add     ebx, edx
mov     edx, [ebp+var_c]
add     esi, ebx
lea     ebx, [edx+esi-70e44324h]
mov     edx, [ebp+arg_0]
mov     edi, edx
mov     [ebp+var_c], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+20h]
xor     edx, [eax+34h]
mov     [ebp+arg_0], edi
xor     edi, [ebp+var_4]
xor     edx, [eax]
and     edi, [ebp+arg_4]
xor     edx, [eax+8]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     [eax], esi
mov     ebx, edx
mov     edx, [ebp+var_4]
add     edi, esi
mov     esi, [ebp+arg_0]
add     edi, ebx
and     esi, edx
add     esi, edi
mov     edi, [ebp+var_8]
lea     ebx, [edi+esi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+38h]
xor     edx, [eax+24h]
mov     [ebp+var_8], ebx
mov     [ebp+var_4], edi
xor     edx, [eax+0ch]
xor     edx, [eax+4]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, edi
xor     ebx, [ebp+var_c]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_c]
mov     [eax+4], esi
and     ebx, [ebp+arg_0]
and     edi, edx
add     ebx, esi
mov     esi, [ebp+var_10]
add     ebx, esi
mov     esi, [ebp+arg_4]
add     edi, ebx
lea     ebx, [esi+edi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+28h]
xor     edx, [eax+3ch]
mov     [ebp+arg_4], ebx
mov     [ebp+var_c], edi
xor     edx, [eax+10h]
xor     edx, [eax+8]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     [eax+8], esi
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, edi
xor     ebx, [ebp+var_8]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_8]
and     ebx, [ebp+var_4]
and     edi, edx
add     ebx, esi
mov     esi, [ebp+var_10]
add     ebx, esi
mov     esi, [ebp+arg_0]
add     edi, ebx
lea     ebx, [esi+edi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+2ch]
xor     edx, [eax+14h]
mov     [ebp+arg_0], ebx
mov     [ebp+var_8], edi
xor     edx, [eax]
xor     edx, [eax+0ch]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, edi
xor     ebx, [ebp+arg_4]
mov     [ebp+var_10], edx
mov     edx, [ebp+arg_4]
mov     [eax+0ch], esi
and     ebx, [ebp+var_c]
and     edi, edx
add     ebx, esi
mov     esi, [ebp+var_10]
add     ebx, esi
mov     esi, [ebp+var_4]
add     edi, ebx
lea     ebx, [esi+edi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+30h]
xor     edx, [eax+18h]
mov     [ebp+var_4], ebx
mov     [ebp+arg_4], edi
xor     edx, [eax+10h]
xor     edx, [eax+4]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+arg_0]
xor     ebx, edi
mov     [eax+10h], esi
and     ebx, [ebp+var_8]
add     ebx, esi
mov     esi, [ebp+arg_0]
and     esi, edi
add     ebx, edx
mov     edx, [ebp+var_c]
add     esi, ebx
lea     ebx, [edx+esi-70e44324h]
mov     edx, [ebp+arg_0]
mov     edi, edx
mov     [ebp+var_c], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+34h]
xor     edx, [eax+1ch]
mov     [ebp+arg_0], edi
xor     edi, [ebp+var_4]
xor     edx, [eax+14h]
and     edi, [ebp+arg_4]
xor     edx, [eax+8]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     [eax+14h], esi
mov     ebx, edx
mov     edx, [ebp+var_4]
add     edi, esi
mov     esi, [ebp+arg_0]
add     edi, ebx
and     esi, edx
add     esi, edi
mov     edi, [ebp+var_8]
lea     ebx, [edi+esi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+38h]
xor     edx, [eax+20h]
mov     [ebp+var_8], ebx
mov     [ebp+var_4], edi
xor     edx, [eax+18h]
xor     edx, [eax+0ch]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, edi
xor     ebx, [ebp+var_c]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_c]
mov     [eax+18h], esi
and     ebx, [ebp+arg_0]
and     edi, edx
add     ebx, esi
mov     esi, [ebp+var_10]
add     ebx, esi
mov     esi, [ebp+arg_4]
add     edi, ebx
lea     ebx, [esi+edi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+3ch]
xor     edx, [eax+24h]
mov     [ebp+arg_4], ebx
mov     [ebp+var_c], edi
xor     edx, [eax+1ch]
xor     edx, [eax+10h]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, edi
xor     ebx, [ebp+var_8]
mov     [eax+1ch], esi
and     ebx, [ebp+var_4]
add     ebx, esi
mov     esi, edx
mov     edx, [ebp+var_8]
and     edi, edx
add     ebx, esi
mov     esi, [ebp+arg_0]
add     edi, ebx
lea     ebx, [esi+edi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+28h]
xor     edx, [eax+20h]
mov     [ebp+arg_0], ebx
mov     [ebp+var_8], edi
xor     edx, [eax+14h]
xor     edx, [eax]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, edi
xor     ebx, [ebp+arg_4]
mov     [ebp+var_10], edx
mov     edx, [ebp+arg_4]
mov     [eax+20h], esi
and     ebx, [ebp+var_c]
and     edi, edx
add     ebx, esi
mov     esi, [ebp+var_10]
add     ebx, esi
mov     esi, [ebp+var_4]
add     edi, ebx
lea     ebx, [esi+edi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+18h]
xor     edx, [eax+2ch]
mov     [ebp+var_4], ebx
mov     [ebp+arg_4], edi
xor     edx, [eax+24h]
xor     edx, [eax+4]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+arg_0]
xor     ebx, edi
mov     [eax+24h], esi
and     ebx, [ebp+var_8]
add     ebx, esi
mov     esi, [ebp+arg_0]
and     esi, edi
add     ebx, edx
mov     edx, [ebp+var_c]
add     esi, ebx
lea     ebx, [edx+esi-70e44324h]
mov     edx, [ebp+arg_0]
mov     edi, edx
mov     [ebp+var_c], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+30h]
xor     edx, [eax+28h]
mov     [ebp+arg_0], edi
xor     edx, [eax+1ch]
xor     edx, [eax+8]
mov     esi, edx
shr     esi, 1fh
xor     edi, [ebp+var_4]
add     edx, edx
or      esi, edx
mov     edx, ebx
and     edi, [ebp+arg_4]
mov     [eax+28h], esi
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
add     edi, esi
mov     esi, [ebp+arg_0]
mov     ebx, edx
mov     edx, [ebp+var_4]
and     esi, edx
add     edi, ebx
add     esi, edi
mov     edi, [ebp+var_8]
lea     ebx, [edi+esi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+20h]
xor     edx, [eax+34h]
mov     [ebp+var_8], ebx
mov     [ebp+var_4], edi
xor     edx, [eax+2ch]
xor     edx, [eax+0ch]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, edi
xor     ebx, [ebp+var_c]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_c]
mov     [eax+2ch], esi
and     ebx, [ebp+arg_0]
and     edi, edx
add     ebx, esi
mov     esi, [ebp+var_10]
add     ebx, esi
mov     esi, [ebp+arg_4]
add     edi, ebx
lea     ebx, [esi+edi-70e44324h]
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+38h]
xor     edx, [eax+30h]
mov     [ebp+arg_4], ebx
mov     [ebp+var_c], edi
xor     edx, [eax+24h]
xor     edx, [eax+10h]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_4]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_8]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+30h], esi
xor     ebx, edx
add     esi, edi
mov     edi, edx
add     ebx, esi
mov     esi, [ebp+arg_0]
lea     ebx, [esi+ebx-359d3e2ah]
mov     [ebp+arg_0], ebx
shr     edx, 2
shl     edi, 1eh
or      edi, edx
mov     edx, [eax+28h]
xor     edx, [eax+3ch]
mov     [ebp+var_8], edi
xor     edx, [eax+34h]
xor     edx, [eax+14h]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_c]
mov     [ebp+var_10], edx
mov     edx, [ebp+arg_4]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+34h], esi
xor     ebx, edx
add     esi, edi
add     ebx, esi
mov     esi, [ebp+var_4]
lea     edi, [esi+ebx-359d3e2ah]
mov     esi, edx
shl     esi, 1eh
shr     edx, 2
or      esi, edx
mov     edx, [eax+38h]
xor     edx, [eax+18h]
mov     [ebp+arg_4], esi
mov     [ebp+var_4], edi
xor     edx, [eax+2ch]
xor     edx, [eax]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, edi
shr     edx, 1bh
shl     edi, 5
or      edx, edi
mov     edi, [ebp+arg_0]
xor     edi, [ebp+var_8]
mov     [eax+38h], esi
add     esi, edx
mov     edx, [ebp+var_c]
xor     edi, [ebp+arg_4]
add     edi, esi
lea     ebx, [edx+edi-359d3e2ah]
mov     edx, [ebp+arg_0]
mov     edi, edx
mov     [ebp+var_c], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+30h]
xor     edx, [eax+3ch]
mov     [ebp+arg_0], edi
xor     edi, [ebp+var_4]
xor     edx, [eax+1ch]
xor     edi, [ebp+arg_4]
xor     edx, [eax+4]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     [eax+3ch], esi
add     esi, edx
mov     edx, [ebp+var_8]
add     edi, esi
lea     ebx, [edx+edi-359d3e2ah]
mov     edx, [ebp+var_4]
mov     [ebp+var_8], ebx
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+20h]
xor     edx, [eax+34h]
mov     [ebp+var_4], edi
xor     edx, [eax]
xor     edx, [eax+8]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+arg_0]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_c]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax], esi
add     esi, edi
mov     edi, edx
xor     ebx, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+38h]
xor     edx, [eax+24h]
add     ebx, esi
mov     esi, [ebp+arg_4]
mov     [ebp+var_c], edi
xor     edx, [eax+0ch]
lea     ebx, [esi+ebx-359d3e2ah]
xor     edx, [eax+4]
mov     [ebp+arg_4], ebx
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_4]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_8]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+4], esi
add     esi, edi
mov     edi, edx
xor     ebx, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+28h]
xor     edx, [eax+3ch]
add     ebx, esi
mov     esi, [ebp+arg_0]
mov     [ebp+var_8], edi
xor     edx, [eax+10h]
lea     ebx, [esi+ebx-359d3e2ah]
xor     edx, [eax+8]
mov     [ebp+arg_0], ebx
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_c]
mov     [ebp+var_10], edx
mov     edx, [ebp+arg_4]
xor     ebx, edi
mov     [eax+8], esi
xor     ebx, edx
mov     edi, [ebp+var_10]
add     esi, edi
add     ebx, esi
mov     esi, [ebp+var_4]
lea     edi, [esi+ebx-359d3e2ah]
mov     esi, edx
shr     edx, 2
shl     esi, 1eh
or      esi, edx
mov     edx, [eax+2ch]
xor     edx, [eax+14h]
mov     [ebp+arg_4], esi
mov     [ebp+var_4], edi
xor     edx, [eax]
xor     edx, [eax+0ch]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, edi
shr     edx, 1bh
shl     edi, 5
or      edx, edi
mov     edi, [ebp+arg_0]
xor     edi, [ebp+var_8]
mov     [eax+0ch], esi
add     esi, edx
mov     edx, [ebp+var_c]
xor     edi, [ebp+arg_4]
add     edi, esi
lea     ebx, [edx+edi-359d3e2ah]
mov     edx, [ebp+arg_0]
mov     edi, edx
mov     [ebp+var_c], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+30h]
xor     edx, [eax+18h]
mov     [ebp+arg_0], edi
xor     edi, [ebp+var_4]
xor     edx, [eax+10h]
xor     edi, [ebp+arg_4]
xor     edx, [eax+4]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     [eax+10h], esi
add     esi, edx
mov     edx, [ebp+var_8]
add     edi, esi
lea     ebx, [edx+edi-359d3e2ah]
mov     edx, [ebp+var_4]
mov     edi, edx
mov     [ebp+var_8], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+34h]
xor     edx, [eax+1ch]
mov     [ebp+var_4], edi
xor     edx, [eax+14h]
xor     edx, [eax+8]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+arg_0]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_c]
mov     [eax+14h], esi
xor     ebx, edi
mov     edi, [ebp+var_10]
xor     ebx, edx
add     esi, edi
mov     edi, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+38h]
xor     edx, [eax+20h]
add     ebx, esi
mov     esi, [ebp+arg_4]
mov     [ebp+var_c], edi
xor     edx, [eax+18h]
lea     ebx, [esi+ebx-359d3e2ah]
xor     edx, [eax+0ch]
mov     [ebp+arg_4], ebx
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_4]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_8]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+18h], esi
add     esi, edi
mov     edi, edx
xor     ebx, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+3ch]
xor     edx, [eax+24h]
add     ebx, esi
mov     esi, [ebp+arg_0]
mov     [ebp+var_8], edi
xor     edx, [eax+1ch]
lea     ebx, [esi+ebx-359d3e2ah]
xor     edx, [eax+10h]
mov     [ebp+arg_0], ebx
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_c]
mov     [ebp+var_10], edx
mov     edx, [ebp+arg_4]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+1ch], esi
xor     ebx, edx
add     esi, edi
add     ebx, esi
mov     esi, [ebp+var_4]
lea     edi, [esi+ebx-359d3e2ah]
mov     esi, edx
shl     esi, 1eh
shr     edx, 2
or      esi, edx
mov     edx, [eax+28h]
xor     edx, [eax+20h]
mov     [ebp+arg_4], esi
mov     [ebp+var_4], edi
xor     edx, [eax+14h]
xor     edx, [eax]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, edi
mov     [eax+20h], esi
shr     edx, 1bh
shl     edi, 5
or      edx, edi
mov     edi, [ebp+arg_0]
xor     edi, [ebp+var_8]
add     esi, edx
mov     edx, [ebp+var_c]
xor     edi, [ebp+arg_4]
add     edi, esi
lea     ebx, [edx+edi-359d3e2ah]
mov     edx, [ebp+arg_0]
mov     edi, edx
mov     [ebp+var_c], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+18h]
xor     edx, [eax+2ch]
mov     [ebp+arg_0], edi
xor     edi, [ebp+var_4]
xor     edx, [eax+24h]
xor     edi, [ebp+arg_4]
xor     edx, [eax+4]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     [eax+24h], esi
add     esi, edx
mov     edx, [ebp+var_8]
add     edi, esi
lea     ebx, [edx+edi-359d3e2ah]
mov     edx, [ebp+var_4]
mov     edi, edx
mov     [ebp+var_8], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+30h]
xor     edx, [eax+28h]
mov     [ebp+var_4], edi
xor     edx, [eax+1ch]
xor     edx, [eax+8]
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+arg_0]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_c]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+28h], esi
add     esi, edi
mov     edi, edx
xor     ebx, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+20h]
xor     edx, [eax+34h]
add     ebx, esi
mov     esi, [ebp+arg_4]
mov     [ebp+var_c], edi
xor     edx, [eax+2ch]
lea     ebx, [esi+ebx-359d3e2ah]
xor     edx, [eax+0ch]
mov     [ebp+arg_4], ebx
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
mov     [eax+2ch], esi
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_4]
mov     [ebp+var_10], edx
mov     edx, [ebp+var_8]
xor     ebx, edi
mov     edi, [ebp+var_10]
add     esi, edi
mov     edi, edx
xor     ebx, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+38h]
xor     edx, [eax+30h]
add     ebx, esi
mov     esi, [ebp+arg_0]
mov     [ebp+var_8], edi
xor     edx, [eax+24h]
lea     ebx, [esi+ebx-359d3e2ah]
xor     edx, [eax+10h]
mov     [ebp+arg_0], ebx
mov     esi, edx
add     edx, edx
shr     esi, 1fh
or      esi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
mov     ebx, [ebp+var_c]
mov     [ebp+var_10], edx
mov     edx, [ebp+arg_4]
xor     ebx, edi
mov     edi, [ebp+var_10]
mov     [eax+30h], esi
add     esi, edi
mov     edi, edx
xor     ebx, edx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+28h]
xor     edx, [eax+3ch]
add     ebx, esi
mov     esi, [ebp+var_4]
mov     [ebp+arg_4], edi
xor     edx, [eax+34h]
lea     esi, [esi+ebx-359d3e2ah]
xor     edx, [eax+14h]
mov     ebx, esi
shl     ebx, 5
mov     edi, edx
add     edx, edx
shr     edi, 1fh
or      edi, edx
mov     edx, esi
shr     edx, 1bh
or      edx, ebx
add     edi, edx
mov     edx, [ebp+arg_0]
xor     edx, [ebp+var_8]
xor     edx, [ebp+arg_4]
add     edx, [ebp+var_c]
lea     ebx, [edx+edi-359d3e2ah]
mov     edx, [ebp+arg_0]
mov     edi, edx
mov     [ebp+var_c], ebx
shl     edi, 1eh
shr     edx, 2
or      edi, edx
mov     edx, [eax+38h]
xor     edx, [eax+18h]
mov     [ebp+arg_0], edi
xor     edx, [eax+2ch]
xor     edx, [eax]
mov     edi, edx
add     edx, edx
shr     edi, 1fh
or      edi, edx
mov     edx, ebx
shr     edx, 1bh
shl     ebx, 5
or      edx, ebx
add     edi, edx
mov     edx, [ebp+arg_0]
xor     edx, esi
xor     edx, [ebp+arg_4]
add     edx, [ebp+var_8]
lea     ebx, [edx+edi-359d3e2ah]
mov     edx, [eax+30h]
xor     edx, [eax+3ch]
mov     edi, esi
shl     edi, 1eh
xor     edx, [eax+1ch]
shr     esi, 2
xor     edx, [eax+4]
or      edi, esi
add     [ecx+0ch], edi
add     [ecx+4], ebx
mov     esi, edx
shr     esi, 1fh
lea     eax, [edx+edx]
mov     edx, ebx
or      esi, eax
mov     eax, ebx
shr     eax, 1bh
shl     edx, 5
or      eax, edx
mov     edx, [ebp+arg_0]
add     esi, eax
mov     eax, [ebp+var_c]
xor     edx, edi
pop     edi
xor     edx, eax
add     edx, [ebp+arg_4]
lea     edx, [edx+esi-359d3e2ah]
pop     esi
add     [ecx], edx
mov     edx, eax
shl     edx, 1eh
shr     eax, 2
or      edx, eax
mov     eax, [ebp+arg_0]
add     [ecx+8], edx
add     [ecx+10h], eax
pop     ebx
leave
retn
push    ebp
mov     ebp, esp
push    ecx
push    ebx
push    esi
mov     esi, [ebp+arg_0]
mov     ecx, [ebp+src]
push    edi
mov     edi, [ebp+size]
mov     ebx, [esi+58h]
mov     [ebp+var_4], ecx
lea     eax, [ebx+edi]
cmp     eax, ebx
mov     [esi+58h], eax
jnb     short loc_404d60
inc     dword ptr [esi+54h]
push    40h
and     ebx, 3fh
pop     eax
sub     eax, ebx
cmp     eax, edi
jbe     short loc_404d73
add     ebx, esi
push    edi
push    ebx
push    ecx
jmp     short loc_404ddc
test    ebx, ebx
jz      short loc_404da7
push    eax
lea     eax, [ebx+esi]
push    eax
push    ecx
call    sub_4016de
push    10h
push    esi
push    esi
call    sub_404de9
lea     eax, [esi+40h]
push    esi
push    eax
call    sub_40360b
mov     eax, [ebp+src]
add     esp, 20h
sub     eax, ebx
lea     edi, [edi+ebx-40h]
add     eax, 40h
mov     [ebp+var_4], eax
cmp     edi, 40h
jb      short loc_404dd3
mov     ebx, edi
shr     ebx, 6
push    10h
push    [ebp+var_4]
push    esi
call    sub_404de9
lea     eax, [esi+40h]
push    esi
push    eax
call    sub_40360b
add     [ebp+var_4], 40h
add     esp, 14h
sub     edi, 40h
dec     ebx
jnz     short loc_404db1
test    edi, edi
jz      short loc_404de4
push    edi
push    esi
push    [ebp+var_4]
call    sub_4016de
add     esp, 0ch
pop     edi
pop     esi
pop     ebx
leave
retn
mov     eax, [esp+arg_4]
mov     ecx, [esp+arg_0]
push    esi
movzx   esi, byte ptr [eax+2]
xor     edx, edx
mov     dh, [eax]
mov     dl, [eax+1]
add     eax, 4
shl     edx, 8
or      edx, esi
movzx   esi, byte ptr [eax-1]
shl     edx, 8
or      edx, esi
mov     [ecx], edx
add     ecx, 4
dec     [esp+4+arg_8]
jnz     short loc_404df2
pop     esi
retn
push    ebx
push    esi
mov     esi, [esp+8+arg_0]
push    edi
push    3fh
mov     ecx, [esi+58h]
pop     eax
and     ecx, eax
sub     eax, ecx
lea     edx, [ecx+esi]
mov     byte ptr [edx], 80h
inc     edx
cmp     eax, 8
jnb     short loc_404e5c
push    eax
push    0
push    edx
call    _memset
push    10h
push    esi
push    esi
call    sub_404de9
lea     eax, [esi+40h]
push    esi
push    eax
call    sub_40360b
add     esp, 20h
mov     edx, esi
push    40h
pop     eax
add     eax, 0fffffff8h
push    eax
push    0
push    edx
call    _memset
push    0eh
push    esi
push    esi
call    sub_404de9
mov     eax, [esi+58h]
mov     ecx, [esi+54h]
mov     edx, eax
lea     edi, [esi+40h]
shl     ecx, 3
shr     edx, 1dh
or      ecx, edx
push    esi
shl     eax, 3
push    edi
mov     [esi+38h], ecx
mov     [esi+3ch], eax
call    sub_40360b
add     esp, 20h
mov     eax, edi
mov     esi, edi
push    5
pop     edx
mov     ecx, [esi]
add     esi, 4
mov     ebx, ecx
mov     [eax+3], cl
shr     ebx, 18h
mov     [eax], bl
mov     ebx, ecx
shr     ebx, 10h
mov     [eax+1], bl
mov     ebx, ecx
shr     ebx, 8
mov     [eax+2], bl
add     eax, 4
dec     edx
jnz     short loc_404e9e
mov     eax, edi
pop     edi
pop     esi
pop     ebx
retn
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_8]
mov     ecx, [ebp+arg_0]
push    esi
push    edi
xor     edi, edi
xor     edx, edx
test    eax, eax
mov     esi, ecx
mov     [ebp+arg_8], edi
jnz     short loc_404f1b
test    ecx, ecx
jz      short loc_404f13
cmp     [ecx], ax
jz      short loc_404f13
cmp     edi, [ebp+arg_4]
jnb     short loc_404f13
mov     cx, [esi]
cmp     cx, 80h
jnb     short loc_404efc
inc     edx
jmp     short loc_404f0a
cmp     cx, 800h
jnb     short loc_404f07
inc     edx
inc     edx
jmp     short loc_404f0a
add     edx, 3
inc     esi
inc     esi
inc     edi
cmp     word ptr [esi], 0
jnz     short loc_404eea
mov     ecx, [ebp+arg_10]
jmp     loc_404fd9
test    ecx, ecx
push    ebx
jz      loc_404fcd
cmp     word ptr [ecx], 0
jz      loc_404fcd
cmp     edi, [ebp+arg_4]
jnb     loc_404fcd
cmp     edx, [ebp+arg_c]
jnb     loc_404fd5
mov     cx, [esi]
cmp     cx, 80h
jnb     short loc_404f53
inc     esi
mov     byte ptr [ebp+arg_0], cl
inc     esi
push    1
jmp     short loc_404f9b
cmp     cx, 800h
inc     esi
jnb     short loc_404f74
mov     ebx, ecx
and     cl, 3fh
shr     ebx, 6
inc     esi
or      bl, 0c0h
or      cl, 80h
mov     byte ptr [ebp+arg_0], bl
mov     byte ptr [ebp+arg_0+1], cl
push    2
jmp     short loc_404f9b
mov     bx, cx
inc     esi
shr     bx, 0ch
or      bl, 0e0h
push    3
mov     byte ptr [ebp+arg_0], bl
mov     ebx, ecx
shr     ebx, 6
and     bl, 3fh
and     cl, 3fh
or      bl, 80h
or      cl, 80h
mov     byte ptr [ebp+arg_0+1], bl
mov     byte ptr [ebp+arg_0+2], cl
inc     [ebp+arg_8]
pop     ecx
lea     edi, [ecx+edx]
cmp     edi, [ebp+arg_c]
jnb     short loc_404fc0
xor     ebx, ebx
test    ecx, ecx
jbe     short loc_404fbe
xor     edx, edx
mov     dl, byte ptr [ebp+edx+arg_0]
mov     [eax], dl
inc     eax
inc     ebx
movzx   edx, bx
cmp     edx, ecx
jb      short loc_404faf
mov     edx, edi
cmp     word ptr [esi], 0
mov     edi, [ebp+arg_8]
jnz     loc_404f2e
cmp     edx, [ebp+arg_c]
jnb     short loc_404fd5
and     byte ptr [eax], 0
mov     ecx, [ebp+arg_10]
pop     ebx
test    ecx, ecx
jz      short loc_404fdf
mov     [ecx], edx
mov     eax, edi
pop     edi
pop     esi
pop     ebp
retn
push    ebp
mov     ebp, esp
sub     esp, 1ach
push    ebx
push    esi
push    edi
push    24h
xor     esi, esi
xor     ebx, ebx
pop     ecx
xor     eax, eax
cmp     dword_41b344, esi
lea     edi, [ebp+versioninformation.dwmajorversion]
mov     [ebp+versioninformation.dwosversioninfosize], esi
rep stosd
jnz     loc_40512e
lea     eax, [ebp+versioninformation]
mov     [ebp+versioninformation.dwosversioninfosize], 94h
push    eax
call    ds:getversionexa
cmp     [ebp+versioninformation.dwplatformid], 1
jnz     loc_4050d9
and     [ebp+data], bl
push    43h
pop     ecx
xor     eax, eax
lea     edi, [ebp+var_1ab]
mov     [ebp+cbdata], 104h
rep stosd
stosw
lea     eax, [ebp+phkresult]
mov     [ebp+phkresult], esi
push    eax
push    20019h
push    esi
push    offset subkey
push    80000002h
call    ds:regopenkeyexa
mov     edi, ds:loadlibrarya
test    eax, eax
jnz     short loc_4050d0
cmp     [ebp+phkresult], esi
jz      short loc_4050d0
lea     eax, [ebp+cbdata]
push    eax
lea     eax, [ebp+data]
push    eax
push    esi
push    esi
push    offset valuename
push    [ebp+phkresult]
call    ds:regqueryvalueexa
test    eax, eax
jnz     short loc_4050c0
push    0bh
lea     eax, [ebp+data]
push    offset aunicowsdll
push    eax
call    _strncat
add     esp, 0ch
lea     eax, [ebp+data]
push    eax
call    edi
mov     ebx, eax
push    [ebp+phkresult]
call    ds:regclosekey
cmp     ebx, esi
mov     [ebp+phkresult], esi
jnz     short loc_4050ea
push    offset akernel32dll_0
call    edi
jmp     short loc_4050e4
push    offset akernel32dll_0
call    ds:loadlibrarya
mov     ebx, eax
cmp     ebx, esi
jz      short loc_40512e
mov     esi, ds:getprocaddress
push    offset procname
push    ebx
call    esi
push    offset awidechartomult
push    ebx
mov     dword_41b348, eax
call    esi
cmp     dword_41b348, 0
mov     dword_41b34c, eax
jz      short loc_405123
test    eax, eax
jz      short loc_405123
mov     dword_41b344, 1
jmp     short loc_40512e
test    ebx, ebx
jz      short loc_40512e
push    ebx
call    ds:freelibrary
pop     edi
pop     esi
pop     ebx
leave
retn
push    ebp
mov     ebp, esp
push    esi
xor     esi, esi
cmp     dword_41b344, esi
jnz     short loc_405146
call    sub_404fe5
mov     eax, dword_41b348
cmp     eax, esi
jz      short loc_4051a9
test    [ebp+arg_0], 1
jz      short loc_40518f
push    ebx
mov     ebx, [ebp+arg_c]
cmp     ebx, [ebp+arg_14]
jb      short loc_405161
mov     ebx, [ebp+arg_14]
cmp     ebx, esi
jbe     short loc_405187
push    edi
mov     edi, [ebp+arg_10]
mov     eax, [ebp+arg_8]
push    1
push    edi
add     eax, esi
push    1
push    eax
push    8
push    [ebp+arg_4]
call    dword_41b348
inc     esi
inc     edi
inc     edi
cmp     esi, ebx
jb      short loc_405169
pop     edi
mov     eax, [ebp+arg_18]
mov     [eax], ebx
pop     ebx
jmp     short loc_4051d4
push    [ebp+arg_14]
push    [ebp+arg_10]
push    [ebp+arg_c]
push    [ebp+arg_8]
push    8
push    [ebp+arg_4]
call    eax
mov     ecx, [ebp+arg_18]
mov     [ecx], eax
jmp     short loc_4051d4
mov     edx, [ebp+arg_c]
cmp     edx, [ebp+arg_14]
jb      short loc_4051b4
mov     edx, [ebp+arg_14]
xor     eax, eax
cmp     edx, esi
jbe     short loc_4051cf
mov     ecx, [ebp+arg_10]
mov     esi, [ebp+arg_8]
movsx   si, byte ptr [eax+esi]
mov     [ecx], si
inc     eax
inc     ecx
inc     ecx
cmp     eax, edx
jb      short loc_4051bd
mov     eax, [ebp+arg_18]
mov     [eax], edx
pop     esi
pop     ebp
retn
push    esi
mov     esi, [esp+4+lpthreadparameter]
push    0
push    dword ptr [esi+40h]
call    ds:activatekeyboardlayout
push    dword ptr [esi+0ch]
push    dword ptr [esi]
call    dword ptr [esi+8]
pop     ecx
mov     [esi+34h], eax
pop     ecx
push    0
push    0
push    2
push    dword ptr [esi]
call    ds:sendmessagea
push    0
push    1
push    dword ptr [esi+2ch]
call    ds:releasesemaphore
xor     eax, eax
pop     esi
retn    4
push    ebp
mov     ebp, esp
sub     esp, 10h
mov     eax, [ebp+arg_4]
push    esi
push    edi
push    2
pop     ecx
sub     eax, ecx
jz      loc_405462
sub     eax, 0eh
jz      loc_405462
sub     eax, ecx
jz      loc_405462
sub     eax, 7
jz      loc_40542f
sub     eax, 0f7h
jz      loc_40532a
dec     eax
jz      loc_4052fa
sub     eax, ecx
jnz     loc_40546d
push    0ffffffebh
push    [ebp+hwnd]
call    ds:getwindowlonga
mov     esi, eax
xor     edi, edi
cmp     [esi+30h], edi
lea     eax, [esi+30h]
jnz     short loc_405286
push    eax
push    edi
push    esi
push    offset startaddress
push    edi
push    edi
call    ds:createthread
cmp     [esi+20h], edi
jz      short loc_4052d1
push    dword ptr [esi]
call    ds:iswindowenabled
cmp     eax, edi
jnz     short loc_4052a8
cmp     [esi+3ch], edi
jz      short loc_4052d1
push    edi
push    edi
mov     [esi+3ch], edi
push    466h
jmp     short loc_4052c0
cmp     [esi+3ch], edi
jnz     short loc_4052d1
push    0ffff0000h
push    0ffffffffh
mov     dword ptr [esi+3ch], 1
push    465h
push    6ah
push    dword ptr [esi]
call    ds:getdlgitem
push    eax
call    ds:sendmessagea
mov     eax, [esi+24h]
cmp     eax, [esi+28h]
jz      loc_40546d
push    edi
push    eax
push    402h
push    3f2h
push    [ebp+hwnd]
mov     [esi+28h], eax
call    ds:senddlgitemmessagea
jmp     loc_40546d
movzx   eax, word ptr [ebp+hdc]
sub     eax, ecx
jnz     loc_40546d
push    0ffffffebh
push    [ebp+hwnd]
call    ds:getwindowlonga
push    0
mov     esi, eax
push    [ebp+hwnd]
call    ds:showwindow
mov     dword ptr [esi+38h], 1
jmp     loc_40546d
mov     esi, [ebp+dwnewlong]
mov     edi, [ebp+hwnd]
push    ebx
push    esi
push    0ffffffebh
push    edi
call    ds:setwindowlonga
push    640000h
push    0
mov     ebx, 3f2h
push    401h
push    ebx
mov     [esi], edi
push    edi
mov     edi, ds:senddlgitemmessagea
call    edi
push    0
push    dword ptr [esi+10h]
push    402h
push    ebx
push    [ebp+hwnd]
call    edi
mov     eax, [esi+14h]
mov     ebx, ds:setwindowtexta
test    eax, eax
jz      short loc_40537b
push    eax
push    [ebp+hwnd]
call    ebx
mov     eax, [esi+18h]
mov     edi, ds:getdlgitem
test    eax, eax
jz      short loc_405395
push    eax
push    411h
push    dword ptr [esi]
call    edi
push    eax
call    ebx
mov     eax, [esi+1ch]
test    eax, eax
jz      short loc_4053a9
push    eax
push    3f4h
push    dword ptr [esi]
call    edi
push    eax
call    ebx
cmp     dword ptr [esi+20h], 0
push    1
pop     ebx
jz      short loc_4053ce
movzx   eax, word ptr [esi+20h]
push    eax
push    0
push    464h
push    6ah
push    dword ptr [esi]
mov     [esi+3ch], ebx
call    edi
push    eax
call    ds:sendmessagea
lea     eax, [ebp+rect]
push    eax
push    [ebp+hwnd]
call    ds:getwindowrect
mov     esi, ds:getsystemmetrics
xor     edi, edi
push    5
push    edi
push    edi
push    ebx
call    esi
mov     ecx, [ebp+rect.top]
sub     ecx, [ebp+rect.bottom]
add     eax, ecx
cdq
sub     eax, edx
sar     eax, 1
push    eax
push    edi
call    esi
mov     ecx, [ebp+rect.left]
sub     ecx, [ebp+rect.right]
add     eax, ecx
cdq
sub     eax, edx
sar     eax, 1
push    eax
push    edi
push    [ebp+hwnd]
call    ds:setwindowpos
push    [ebp+hwnd]
call    ds:setforegroundwindow
push    edi
push    4bh
push    64h
push    [ebp+hwnd]
call    ds:settimer
mov     eax, ebx
pop     ebx
jmp     short loc_40546f
cmp     [ebp+hdc], 0
jz      short loc_40546d
mov     esi, ds:getsyscolor
push    0fh
call    esi
mov     edi, eax
push    edi
push    [ebp+hdc]
call    ds:setbkcolor
push    8
call    esi
push    eax
push    [ebp+hdc]
call    ds:settextcolor
push    edi
call    ds:createsolidbrush
jmp     short loc_40546f
push    0
push    [ebp+hwnd]
call    ds:enddialog
xor     eax, eax
pop     edi
pop     esi
leave
retn    10h
push    ebp
mov     ebp, esp
push    esi
push    edi
push    44h
call    _malloc
mov     esi, eax
xor     edi, edi
cmp     esi, edi
pop     ecx
jnz     short loc_405494
mov     eax, 0ffffd121h
jmp     loc_405522
push    ebx
push    44h
push    edi
push    esi
call    _memset
mov     eax, [ebp+arg_4]
mov     ebx, [ebp+hwndparent]
mov     [esi+8], eax
mov     eax, [ebp+arg_8]
mov     [esi+0ch], eax
mov     eax, [ebp+arg_c]
mov     [esi+10h], eax
mov     eax, [ebp+arg_10]
mov     [esi+14h], eax
mov     eax, [ebp+arg_14]
add     esp, 0ch
mov     [esi+18h], eax
mov     eax, [ebp+arg_18]
mov     [esi+4], ebx
push    edi
mov     [esi+1ch], eax
mov     eax, [ebp+arg_1c]
push    1
push    edi
push    edi
mov     [esi+20h], eax
call    ds:createsemaphorea
push    edi
mov     [esi+2ch], eax
call    ds:getkeyboardlayout
push    esi
push    offset dialogfunc
push    ebx
push    3fch
mov     [esi+40h], eax
push    hinstance
call    ds:dialogboxparama
push    0ffffffffh
push    dword ptr [esi+2ch]
call    ds:waitforsingleobject
push    dword ptr [esi+2ch]
call    ds:closehandle
mov     edi, [esi+34h]
push    esi
call    sub_40959b
pop     ecx
mov     eax, edi
pop     ebx
pop     edi
pop     esi
pop     ebp
retn
push    esi
push    0ffffffebh
push    [esp+8+hwnd]
call    ds:getwindowlonga
mov     esi, eax
test    esi, esi
jnz     short loc_40553b
pop     esi
retn
mov     eax, [esp+4+wparam]
cmp     [esp+4+arg_8], 0
mov     [esi+24h], eax
jz      short loc_405561
push    0
push    eax
push    402h
push    3f2h
push    dword ptr [esi]
mov     [esi+28h], eax
call    ds:senddlgitemmessagea
mov     eax, [esi+38h]
pop     esi
neg     eax
sbb     eax, eax
and     ax, 0d12dh
retn
push    0ffffffebh
push    [esp+4+hwnd]
call    ds:getwindowlonga
push    [esp+lpstring]
push    411h
push    dword ptr [eax]
call    ds:getdlgitem
push    eax
call    ds:setwindowtexta
xor     eax, eax
retn
push    0ffffffebh
push    [esp+4+hwnd]
call    ds:getwindowlonga
push    [esp+lpstring]
push    3f4h
push    dword ptr [eax]
call    ds:getdlgitem
push    eax
call    ds:setwindowtexta
xor     eax, eax
retn
push    0ffffffebh
push    [esp+4+hwnd]
call    ds:getwindowlonga
test    eax, eax
jnz     short loc_4055cd
retn
mov     eax, [eax+38h]
retn
push    ebp
mov     ebp, esp
sub     esp, 7d0h
push    ebx
push    esi
push    edi
push    0ffffffebh
push    [ebp+hwnd]
call    ds:getwindowlonga
push    [ebp+source]
mov     edi, eax
lea     eax, [ebp+destination]
xor     esi, esi
push    eax
call    _strcpy
lea     eax, [ebp+destination]
push    5ch
push    eax
call    _strrchr
add     esp, 10h
test    eax, eax
jz      short loc_40563a
and     byte ptr [eax], 0
lea     ebx, [eax+1]
lea     eax, [ebp+destination]
push    5ch
push    eax
call    _strrchr
pop     ecx
test    eax, eax
pop     ecx
jz      short loc_405632
and     byte ptr [eax], 0
lea     esi, [eax+1]
jmp     short loc_405640
lea     esi, [ebp+destination]
jmp     short loc_405640
lea     ebx, [ebp+destination]
test    esi, esi
jz      short loc_40565a
push    esi
push    esi
push    [ebp+format]
lea     eax, [ebp+buffer]
push    eax
call    _sprintf
add     esp, 10h
jmp     short loc_40566d
lea     eax, [ebp+buffer]
push    offset byte_41b350
push    eax
call    _strcpy
pop     ecx
pop     ecx
push    ebx
push    dword ptr [edi]
call    sub_40556e
lea     eax, [ebp+buffer]
push    eax
push    dword ptr [edi]
call    sub_405595
add     esp, 10h
cmp     [ebp+arg_c], 0
jz      short loc_40569a
push    1
push    0
push    dword ptr [edi]
call    sub_405526
add     esp, 0ch
pop     edi
pop     esi
pop     ebx
leave
retn
push    ebp
mov     ebp, esp
sub     esp, 20h
mov     eax, [ebp+arg_4]
mov     [ebp+var_10], eax
mov     eax, [ebp+arg_8]
mov     [ebp+var_c], eax
mov     eax, [ebp+arg_c]
mov     [ebp+var_8], eax
mov     eax, [ebp+arg_10]
mov     [ebp+var_4], eax
mov     eax, [ebp+arg_1c]
mov     ecx, eax
dec     eax
test    ecx, ecx
jz      short locret_405744
push    ebx
push    esi
mov     esi, [ebp+arg_18]
push    edi
mov     edi, [ebp+arg_14]
inc     eax
push    4
mov     [ebp+arg_4], eax
pop     ebx
lea     eax, [ebp+var_20]
push    eax
lea     eax, [ebp+var_10]
push    eax
push    [ebp+arg_0]
call    ds:off_41429c
mov     eax, [edi]
mov     ecx, [ebp+var_20]
xor     ecx, eax
add     edi, ebx
mov     [ebp+var_10], eax
mov     [esi], ecx
mov     eax, [edi]
mov     ecx, [ebp+var_1c]
mov     [ebp+var_c], eax
xor     ecx, eax
lea     eax, [ebp+var_18]
add     esi, ebx
push    eax
lea     eax, [ebp+var_8]
push    eax
mov     [esi], ecx
push    [ebp+arg_0]
add     esi, ebx
add     edi, ebx
call    ds:off_41429c
mov     eax, [edi]
mov     ecx, [ebp+var_18]
xor     ecx, eax
add     edi, ebx
mov     [ebp+var_8], eax
mov     [esi], ecx
mov     eax, [edi]
mov     ecx, [ebp+var_14]
add     esi, ebx
xor     ecx, eax
add     esp, 18h
add     edi, ebx
mov     [esi], ecx
add     esi, ebx
dec     [ebp+arg_4]
mov     [ebp+var_4], eax
jnz     short loc_4056d7
pop     edi
pop     esi
pop     ebx
leave
retn
push    ebp
mov     ebp, esp
push    esi
mov     esi, [ebp+arg_10]
push    edi
mov     edi, [ebp+arg_c]
lea     ecx, [esi+100h]
push    10h
lea     eax, [edi+100h]
push    ecx
push    eax
push    dword ptr [eax-4]
push    dword ptr [edi+0f8h]
push    dword ptr [edi+0f4h]
push    dword ptr [edi+0f0h]
push    [ebp+arg_4]
call    sub_40569f
mov     ecx, [esi+1fch]
mov     eax, [esi+1f8h]
mov     edx, ecx
push    10h
push    esi
push    edi
not     edx
push    edx
mov     edx, eax
not     edx
push    edx
push    ecx
push    eax
push    [ebp+arg_4]
call    sub_40569f
mov     eax, [ebp+arg_0]
add     esp, 40h
mov     edx, esi
mov     ecx, [eax+1ah]
mov     eax, [eax+1eh]
add     ecx, [ebp+arg_8]
add     eax, [ebp+arg_8]
push    7eh
pop     edi
add     eax, [edx]
add     edx, 4
add     ecx, eax
dec     edi
jnz     short loc_4057b9
xor     [esi+1f8h], ecx
xor     [esi+1fch], eax
pop     edi
pop     esi
pop     ebp
retn
push    esi
mov     esi, [esp+4+arg_0]
mov     eax, [esi]
test    eax, eax
jz      short loc_4057e8
push    eax
call    sub_40959b
and     dword ptr [esi], 0
pop     ecx
pop     esi
retn
push    14h
call    ds:getkeystate
test    al, 1
jz      short loc_4057fa
push    5
jmp     short loc_4057fc
push    0
push    3ebh
push    [esp+8+hdlg]
call    ds:getdlgitem
push    eax
call    ds:showwindow
retn
push    esi
push    4d7h
push    [esp+8+hdlg]
call    ds:getdlgitem
mov     esi, eax
push    esi
call    sub_406a3a
pop     ecx
push    esi
call    ds:setfocus
pop     esi
retn
push    ebp
mov     ebp, esp
sub     esp, 124h
push    esi
lea     eax, [ebp+ppmalloc]
push    edi
push    eax
call    ds:shgetmalloc
test    eax, eax
jnz     short loc_4058a5
lea     eax, [ebp+buffer]
push    100h
push    eax
push    13e0h
push    hinstance
call    ds:loadstringa
mov     eax, [ebp+arg_0]
mov     esi, [ebp+arg_4]
mov     [ebp+bi.hwndowner], eax
xor     eax, eax
mov     ecx, [esi+1ch]
mov     [ebp+bi.pidlroot], eax
mov     [ebp+bi.lpfn], eax
mov     [ebp+bi.lparam], eax
mov     [ebp+bi.pszdisplayname], ecx
lea     eax, [ebp+bi]
lea     ecx, [ebp+buffer]
push    eax
mov     [ebp+bi.lpsztitle], ecx
mov     [ebp+bi.ulflags], 1
call    ds:shbrowseforfoldera
mov     edi, eax
test    edi, edi
jnz     short loc_4058a9
xor     eax, eax
jmp     short loc_4058c0
push    dword ptr [esi+1ch]
push    edi
call    ds:shgetpathfromidlista
mov     eax, [ebp+ppmalloc]
push    edi
push    eax
mov     ecx, [eax]
call    dword ptr [ecx+14h]
push    1
pop     eax
pop     edi
pop     esi
leave
retn
push    ebp
mov     ebp, esp
sub     esp, 68h
push    esi
push    edi
push    5ch
lea     eax, [ebp+var_68]
push    0
push    eax
call    _memset
lea     eax, [ebp+var_68]
push    eax
call    sub_4035db
mov     esi, [ebp+arg_0]
push    8
mov     eax, [esi+10h]
add     eax, 1ah
push    eax
lea     eax, [ebp+var_68]
push    eax
call    sub_404d3d
mov     eax, [esi+10h]
add     esp, 1ch
mov     ax, [eax+22h]
and     [ebp+src], 0
test    ax, ax
jbe     short loc_405938
movzx   edi, ax
push    dword ptr [esi]
call    _strlen
push    eax
lea     eax, [ebp+var_68]
push    dword ptr [esi]
push    eax
call    sub_404d3d
lea     eax, [ebp+src]
push    1
push    eax
lea     eax, [ebp+var_68]
push    eax
call    sub_404d3d
add     esp, 1ch
inc     [ebp+src]
dec     edi
jnz     short loc_40590d
lea     eax, [ebp+var_68]
push    ebx
push    eax
call    sub_404e1b
mov     edi, 80h
mov     ebx, eax
push    edi
call    _malloc
push    edi
push    0
push    eax
mov     [esi+14h], eax
call    _memset
push    ebx
push    dword ptr [esi+14h]
call    ds:off_414298
push    8
lea     eax, [ebp+buf1]
push    ebx
push    eax
call    _memcpy
lea     eax, [ebp+buf1]
push    eax
lea     eax, [ebp+buf1]
push    eax
push    dword ptr [esi+14h]
call    ds:off_41429c
mov     eax, [esi+10h]
push    8
add     eax, 24h
push    eax
lea     eax, [ebp+buf1]
push    eax
call    _memcmp
add     esp, 40h
test    eax, eax
pop     ebx
jnz     short loc_4059a1
push    1
pop     eax
jmp     short loc_4059bd
push    edi
push    0
push    dword ptr [esi+14h]
call    _memset
push    dword ptr [esi+14h]
call    sub_40959b
and     dword ptr [esi+14h], 0
add     esp, 10h
xor     eax, eax
pop     edi
pop     esi
leave
retn
push    ebp
mov     ebp, esp
sub     esp, 10h
lea     eax, [ebp+rect]
push    eax
push    [ebp+hwnd]
call    ds:getwindowrect
mov     eax, [ebp+rect.left]
xor     ecx, ecx
add     eax, [ebp+arg_4]
push    5
push    ecx
push    ecx
push    [ebp+rect.top]
mov     [ebp+rect.left], eax
push    eax
push    ecx
push    [ebp+hwnd]
call    ds:setwindowpos
leave
retn
push    esi
mov     esi, [esp+4+arg_4]
cmp     dword ptr [esi+18h], 0
jnz     short loc_405a25
push    dword_417174
push    [esp+8+hwnd]
call    sub_4059c1
pop     ecx
inc     dword ptr [esi+18h]
pop     ecx
push    0
push    28h
push    1bch
push    [esp+10h+hwnd]
call    ds:settimer
pop     esi
retn
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_4]
push    ebx
push    esi
push    edi
push    2
pop     ebx
sub     eax, ebx
jz      loc_405b9f
sub     eax, 0eh
jz      loc_405b9f
sub     eax, ebx
jz      loc_405b9f
sub     eax, 0efh
jz      loc_405b92
sub     eax, 0fh
jz      loc_405b0f
dec     eax
jz      short loc_405ab0
sub     eax, ebx
jnz     loc_405c00
push    0ffffffebh
push    [ebp+hwnd]
call    ds:getwindowlonga
mov     esi, eax
mov     eax, [esi+18h]
cmp     eax, 8
jz      short loc_405a99
push    dword_417174[eax*4]
push    [ebp+hwnd]
call    sub_4059c1
inc     dword ptr [esi+18h]
pop     ecx
pop     ecx
jmp     loc_405c00
push    1bch
push    [ebp+hwnd]
call    ds:killtimer
and     dword ptr [esi+18h], 0
jmp     loc_405c00
mov     edi, [ebp+hwnd]
push    0ffffffebh
push    edi
call    ds:getwindowlonga
mov     esi, eax
movzx   eax, [ebp+arg_8]
sub     eax, ebx
jz      loc_405bf4
sub     eax, 3fbh
jnz     loc_405c00
push    4d7h
push    edi
call    ds:getdlgitem
push    3fdh
push    edi
mov     ebx, eax
call    ds:isdlgbuttonchecked
push    1
pop     ecx
cmp     eax, ecx
jnz     short loc_405afb
mov     [esi+4], ecx
jmp     short loc_405aff
and     dword ptr [esi+4], 0
push    dword ptr [esi+4]
push    ebx
call    sub_406bbc
pop     ecx
pop     ecx
jmp     loc_405c00
mov     edi, [ebp+dwnewlong]
mov     ebx, [ebp+hwnd]
push    edi
push    0ffffffebh
push    ebx
call    ds:setwindowlonga
push    1
pop     eax
push    eax
push    3fdh
push    ebx
mov     [edi+4], eax
call    ds:checkdlgbutton
push    ebx
call    sub_4057ea
pop     ecx
push    ebx
call    ds:setforegroundwindow
push    67h
push    hinstance
call    ds:loadicona
mov     esi, ds:getdlgitem
push    0
push    eax
push    3ebh
push    ebx
mov     [edi+8], eax
call    esi
push    eax
call    sub_40189a
add     esp, 0ch
push    1
push    dword ptr [edi+8]
push    405h
push    ebx
call    esi
push    eax
call    sub_40189a
add     esp, 0ch
push    4d7h
push    ebx
call    esi
push    eax
call    ds:setfocus
jmp     short loc_405c00
push    [ebp+hwnd]
call    sub_4057ea
jmp     loc_405b09
mov     edi, [ebp+hwnd]
push    0ffffffebh
push    edi
call    ds:getwindowlonga
mov     ebx, eax
push    ebx
push    edi
call    sub_405813
mov     esi, ds:getdlgitem
pop     ecx
pop     ecx
push    4d7h
push    edi
call    esi
push    eax
call    sub_4069c3
mov     [esp+10h+niddlgitem], 3ebh
push    edi
call    esi
push    eax
call    sub_401974
mov     [esp+10h+niddlgitem], 405h
push    edi
call    esi
push    eax
call    sub_401974
pop     ecx
push    dword ptr [ebx+8]
call    ds:deleteobject
push    0ffffd12dh
push    edi
call    ds:enddialog
pop     edi
pop     esi
xor     eax, eax
pop     ebx
pop     ebp
retn    10h
push    esi
push    edi
push    [esp+8+hwnd]
call    ds:getparent
mov     esi, ds:getdlgitem
mov     edi, eax
push    4d7h
push    edi
call    esi
push    [esp+8+hwnd]
call    sub_406bac
test    eax, eax
pop     ecx
jz      short loc_405c37
push    5
jmp     short loc_405c39
push    0
push    3ebh
push    edi
call    esi
push    eax
call    ds:showwindow
pop     edi
pop     esi
retn
push    ebp
mov     ebp, esp
sub     esp, 100h
push    ebx
push    esi
push    edi
mov     ebx, [ebp+hwnd]
push    [ebp+dwnewlong]
push    [ebp+arg_8]
push    [ebp+arg_4]
push    ebx
call    sub_405a27
test    eax, eax
jnz     loc_405e97
mov     eax, [ebp+arg_4]
sub     eax, 110h
jz      loc_405e25
dec     eax
jnz     loc_405e95
push    0ffffffebh
push    ebx
call    ds:getwindowlonga
mov     esi, eax
movzx   eax, word ptr [ebp+arg_8]
dec     eax
jz      short loc_405cc0
sub     eax, 7d2h
jnz     loc_405e95
push    esi
push    ebx
call    sub_405835
pop     ecx
pop     ecx
push    dword ptr [esi+1ch]
push    8cch
push    ebx
call    ds:getdlgitem
jmp     loc_405e8e
mov     edi, ds:getdlgitem
push    104h
push    dword ptr [esi+1ch]
push    8cch
push    ebx
call    edi
push    eax
call    ds:getwindowtexta
push    dword ptr [esi+1ch]
call    ds:getfileattributesa
cmp     eax, 0ffffffffh
jz      loc_405e04
test    al, 10h
jz      loc_405e04
push    dword ptr [esi+1ch]
call    _strlen
test    eax, eax
pop     ecx
jz      short loc_405d2a
mov     eax, [esi+1ch]
push    eax
mov     [ebp+arg_4], eax
call    _strlen
pop     ecx
mov     ecx, eax
mov     eax, [ebp+arg_4]
cmp     byte ptr [ecx+eax-1], 5ch
jz      short loc_405d2a
push    offset asc_4171c0
push    eax
call    _strcat
pop     ecx
pop     ecx
push    esi
call    sub_4057d3
mov     [esp+110h+niddlgitem], 4d7h
push    ebx
call    edi
push    eax
call    sub_406b36
inc     eax
push    eax
mov     [ebp+arg_4], eax
call    _malloc
pop     ecx
mov     [esi], eax
test    eax, eax
pop     ecx
jz      loc_405ded
push    [ebp+arg_4]
push    eax
push    4d7h
push    ebx
call    edi
push    eax
call    sub_406ab7
push    esi
push    ebx
call    sub_405813
push    esi
call    sub_4058c4
add     esp, 18h
test    eax, eax
push    esi
jz      short loc_405d91
call    sub_4057d3
pop     ecx
push    0
push    ebx
call    ds:enddialog
jmp     loc_405e95
call    sub_4057d3
lea     eax, [ebp+buffer]
mov     [esp+110h+niddlgitem], 100h
push    eax
push    13ddh
push    hinstance
call    ds:loadstringa
lea     eax, [ebp+buffer]
push    eax
push    405h
push    ebx
call    edi
push    eax
call    ds:setwindowtexta
push    0
push    405h
push    ebx
call    edi
push    eax
call    sub_40194f
push    esi
push    ebx
call    sub_4059f3
add     esp, 10h
inc     dword ptr [esi+0ch]
jmp     loc_405e95
push    esi
push    ebx
call    sub_405813
push    esi
call    sub_4057d3
add     esp, 0ch
push    0ffffd121h
jmp     short loc_405d85
push    esi
push    ebx
call    sub_405813
pop     ecx
pop     ecx
push    10010h
push    offset caption
push    offset ainvalidoutputd
push    ebx
call    ds:messageboxa
jmp     short loc_405e95
push    0ffffffebh
push    ebx
call    ds:getwindowlonga
mov     edi, eax
mov     esi, ds:getdlgitem
push    edi
push    offset sub_405c09
push    dword ptr [edi+4]
push    4d7h
push    ebx
call    esi
push    eax
call    sub_40681a
add     esp, 10h
lea     eax, [ebp+buffer]
push    100h
push    eax
push    13d5h
push    hinstance
call    ds:loadstringa
lea     eax, [ebp+buffer]
push    eax
push    405h
push    ebx
call    esi
push    eax
call    ds:setwindowtexta
push    dword ptr [edi+1ch]
push    8cch
push    ebx
call    esi
push    eax
call    ds:setwindowtexta
xor     eax, eax
pop     edi
pop     esi
pop     ebx
leave
retn    10h
push    ebp
mov     ebp, esp
sub     esp, 0b4h
push    20h
lea     eax, [ebp+dwinitparam]
push    0
push    eax
call    _memset
mov     eax, [ebp+arg_4]
add     esp, 0ch
mov     [ebp+var_10], eax
mov     eax, [ebp+arg_c]
mov     [ebp+var_4], eax
lea     eax, [ebp+versioninformation]
push    eax
mov     [ebp+versioninformation.dwosversioninfosize], 94h
call    ds:getversionexa
cmp     [ebp+versioninformation.dwplatformid], 1
jnz     short loc_405ef0
cmp     [ebp+versioninformation.dwminorversion], 0
jnz     short loc_405ef0
push    68h
jmp     short loc_405ef2
push    67h
pop     eax
lea     ecx, [ebp+dwinitparam]
push    ecx
push    offset sub_405c4b
push    [ebp+hwndparent]
movzx   eax, ax
push    eax
push    hinstance
call    ds:dialogboxparama
mov     ecx, [ebp+arg_8]
mov     edx, [ebp+var_c]
mov     [ecx], edx
leave
retn
push    esi
mov     esi, [esp+4+lpfilename]
push    104h
push    esi
push    0
call    ds:getmodulefilenamea
push    5ch
push    esi
call    _strrchr
pop     ecx
test    eax, eax
pop     ecx
jz      short loc_405f40
and     byte ptr [eax+1], 0
pop     esi
retn
push    offset byte_41b350
push    esi
call    _strcpy
pop     ecx
pop     ecx
pop     esi
retn
push    ebp
mov     ebp, esp
sub     esp, 348h
mov     eax, [ebp+arg_c]
push    ebx
push    esi
mov     esi, [ebp+lpfilename]
push    edi
mov     [ebp+arg_c], eax
xor     ebx, ebx
lea     eax, [ebp+destination]
push    offset string1
push    eax
xor     edi, edi
mov     [ebp+lpfilename], ebx
mov     [ebp+var_4], 1
call    _strcpy
push    5ch
push    esi
call    __mbsrchr
add     esp, 10h
cmp     eax, ebx
jz      short loc_405f98
sub     eax, esi
inc     eax
mov     [ebp+lpfilename], eax
push    2eh
push    esi
call    __mbsrchr
pop     ecx
cmp     eax, ebx
pop     ecx
jz      short loc_405fba
inc     eax
mov     edi, eax
push    eax
lea     eax, [ebp+destination]
sub     edi, esi
push    eax
call    _strcpy
pop     ecx
pop     ecx
cmp     [ebp+arg_c], ebx
jz      loc_406080
push    4ch
lea     eax, [ebp+var_50]
push    ebx
push    eax
call    _memset
add     esp, 0ch
lea     eax, [ebp+buffer]
push    1f4h
push    eax
push    13b3h
push    hinstance
call    ds:loadstringa
lea     eax, [ebp+buffer]
push    40h
push    eax
call    __mbsrchr
pop     ecx
cmp     eax, ebx
pop     ecx
jz      short loc_406007
mov     [eax], bl
jmp     short loc_405fef
mov     eax, [ebp+hwnd]
mov     [ebp+var_50], 4ch
mov     [ebp+var_4c], eax
lea     eax, [ebp+buffer]
mov     [ebp+var_44], eax
mov     eax, [ebp+arg_4]
mov     [ebp+var_20], eax
mov     ax, word ptr [ebp+lpfilename]
mov     [ebp+var_18], ax
lea     eax, [ebp+destination]
mov     [ebp+var_14], eax
lea     eax, [ebp+var_50]
push    eax
mov     [ebp+var_48], ebx
mov     [ebp+var_40], ebx
mov     [ebp+var_3c], ebx
mov     [ebp+var_38], 1
mov     [ebp+var_34], esi
mov     [ebp+var_30], 104h
mov     [ebp+var_2c], ebx
mov     [ebp+var_28], ebx
mov     [ebp+var_24], ebx
mov     [ebp+var_1c], 0ch
mov     [ebp+var_16], di
mov     [ebp+var_10], ebx
mov     [ebp+var_c], ebx
mov     [ebp+var_8], ebx
call    ds:getsavefilenamea
cmp     eax, ebx
mov     [ebp+var_4], eax
jz      loc_40615d
cmp     [ebp+destination], bl
jz      short loc_4060d6
push    2eh
push    esi
call    __mbsrchr
pop     ecx
cmp     eax, ebx
pop     ecx
jz      short loc_4060aa
inc     eax
push    eax
lea     eax, [ebp+destination]
push    eax
call    __mbsicmp
pop     ecx
test    eax, eax
pop     ecx
jz      short loc_4060d6
push    esi
call    _strlen
dec     eax
pop     ecx
js      short loc_4060ba
cmp     byte ptr [eax+esi], 2eh
jz      short loc_4060c7
push    offset asc_4171fc
push    esi
call    _strcat
pop     ecx
pop     ecx
lea     eax, [ebp+destination]
push    eax
push    esi
call    _strcat
pop     ecx
pop     ecx
mov     edi, ds:createfilea
push    ebx
push    80h
push    3
push    ebx
push    ebx
push    80000000h
push    esi
call    edi
cmp     eax, 0ffffffffh
jz      short loc_40615d
push    eax
call    ds:closehandle
cmp     [ebp+arg_c], ebx
jz      short loc_406143
push    10011h
push    offset afileexistsover
push    esi
push    [ebp+hwnd]
call    ds:messageboxa
cmp     eax, 2
jz      short loc_406143
push    ebx
push    80h
push    2
push    ebx
push    ebx
push    0c0000000h
push    esi
call    edi
cmp     eax, 0ffffffffh
jnz     short loc_40614f
push    10010h
push    offset acouldnotwritet
push    esi
push    [ebp+hwnd]
call    ds:messageboxa
mov     [ebp+arg_c], 1
jmp     loc_405f66
push    eax
call    ds:closehandle
push    esi
call    ds:deletefilea
mov     eax, [ebp+var_4]
pop     edi
pop     esi
pop     ebx
leave
retn
push    ebp
mov     ebp, esp
push    [ebp+source]
push    [ebp+destination]
call    _strcpy
push    0
push    [ebp+destination]
push    [ebp+arg_4]
push    [ebp+hwnd]
call    sub_405f4f
add     esp, 18h
neg     eax
sbb     eax, eax
inc     eax
pop     ebp
retn
push    ebp
mov     ebp, esp
sub     esp, 24h
push    ebx
mov     ebx, [ebp+wparam]
push    esi
lea     eax, [ebp+msg]
push    edi
mov     edi, [ebp+msg]
push    eax
push    [ebp+lparam]
push    ebx
push    edi
push    [ebp+hwnd]
call    sub_4063a1
add     esp, 14h
test    eax, eax
jz      short loc_4061bc
mov     eax, [ebp+msg]
jmp     loc_40631d
push    0ffffffebh
push    [ebp+hwnd]
call    ds:getwindowlonga
cmp     edi, 102h
mov     esi, eax
jz      short loc_4061f8
push    [ebp+lparam]
cmp     dword ptr [esi+4], 0
push    ebx
push    edi
push    [ebp+hwnd]
push    dword ptr [esi+18h]
jz      short loc_4061ed
call    ds:callwindowprocw
jmp     loc_40631d
call    ds:callwindowproca
jmp     loc_40631d
mov     edi, [esi+41ch]
cmp     bx, 1bh
mov     [ebp+wparam], ebx
jz      loc_406312
cmp     bx, 0dh
jz      loc_406312
cmp     bx, 8
jnz     short loc_406261
dec     edi
js      loc_40631b
xor     ebx, ebx
mov     [esi+edi*2+1ch], bx
dec     dword ptr [esi+41ch]
push    ebx
push    ebx
push    [ebp+hwnd]
call    ds:invalidaterect
push    esi
call    nullsub_1
mov     eax, [esi+458h]
pop     ecx
cmp     eax, ebx
jz      loc_40631b
push    dword ptr [esi+45ch]
push    [ebp+hwnd]
call    eax
pop     ecx
pop     ecx
jmp     loc_40631b
cmp     edi, 0ffh
jz      loc_40631b
cmp     edi, [esi+454h]
jge     loc_40631b
cmp     cbmultibyte, 1
jle     short loc_406291
movzx   eax, bx
push    20h
push    eax
call    __isctype
pop     ecx
pop     ecx
jmp     short loc_4062a0
mov     ecx, off_4186a0
movzx   eax, bx
mov     al, [ecx+eax*2]
and     eax, 20h
xor     ebx, ebx
cmp     eax, ebx
jnz     short loc_40631b
mov     eax, [ebp+wparam]
cmp     ax, 7fh
jbe     short loc_4062f6
cmp     [esi+4], ebx
jnz     short loc_4062f6
cmp     [esi+8], ebx
mov     byte ptr [ebp+lparam+3], al
jnz     short loc_4062c7
call    sub_406325
mov     [esi+440h], eax
lea     eax, [ebp+var_24]
push    1
push    eax
push    dword ptr [esi+440h]
call    ds:translatecharsetinfo
lea     eax, [ebp+var_4]
push    eax
lea     eax, [ebp+wparam]
push    1
push    eax
lea     eax, [ebp+lparam+3]
push    1
push    eax
push    [ebp+var_24.ciacp]
push    1
call    sub_405133
add     esp, 1ch
mov     ax, [esi+edi*2+21ch]
xor     ax, word ptr [ebp+wparam]
mov     [esi+edi*2+1ch], ax
inc     dword ptr [esi+41ch]
jmp     loc_40622f
movzx   eax, bx
mov     [esi+444h], eax
xor     eax, eax
pop     edi
pop     esi
pop     ebx
leave
retn    10h
push    0
call    ds:getkeyboardlayout
movzx   ecx, ax
mov     eax, ecx
sub     eax, 408h
jz      short loc_40639b
sub     eax, 5
jz      short loc_406395
sub     eax, 0ch
jz      short loc_40638f
sub     eax, 5
jz      short loc_406389
dec     eax
jz      short loc_406383
sub     eax, 0bh
jz      short loc_40637d
sub     eax, 3e8h
jz      short loc_406377
mov     eax, ecx
and     eax, 0ffh
cmp     eax, 1
jnz     short loc_406369
mov     eax, 0b2h
retn
cmp     eax, 4
jnz     short loc_406374
mov     eax, 88h
retn
xor     eax, eax
retn
mov     eax, 82h
retn
mov     eax, 0a3h
retn
mov     eax, 0a2h
retn
mov     eax, 0deh
retn
mov     eax, 0cch
retn
mov     eax, 0b1h
retn
mov     eax, 0a1h
retn
push    ebp
mov     ebp, esp
sub     esp, 40h
mov     edx, [ebp+arg_10]
mov     ecx, [ebp+arg_4]
push    esi
push    edi
mov     eax, 100h
xor     edi, edi
cmp     ecx, eax
mov     [edx], edi
ja      loc_406502
jz      loc_4064c6
sub     ecx, 7
jz      loc_406489
dec     ecx
jz      loc_406473
sub     ecx, 5
jz      loc_40646b
dec     ecx
dec     ecx
jz      short loc_40641c
sub     ecx, 42h
jz      short loc_4063f9
sub     ecx, 36h
jnz     loc_406594
mov     dword ptr [edx], 82h
jmp     short loc_40646b
push    0ffffffebh
push    [ebp+hwnd]
call    ds:getwindowlonga
movzx   ecx, word ptr [ebp+arg_8]
mov     [eax+440h], ecx
mov     dword ptr [eax+8], 1
xor     esi, esi
jmp     loc_4064b4
push    0ffffffebh
push    [ebp+hwnd]
call    ds:getwindowlonga
mov     esi, eax
lea     eax, [ebp+paint]
push    eax
push    [ebp+hwnd]
call    ds:beginpaint
cmp     eax, edi
jz      short loc_40646b
push    esi
push    eax
call    sub_4065cd
pop     ecx
lea     eax, [ebp+paint]
pop     ecx
push    eax
push    [ebp+hwnd]
call    ds:endpaint
cmp     [esi+10h], edi
jz      short loc_40646b
mov     eax, [esi+42ch]
inc     eax
push    eax
mov     eax, [esi+428h]
inc     eax
push    eax
call    ds:setcaretpos
push    1
pop     eax
jmp     loc_406596
push    0ffffffebh
push    [ebp+hwnd]
call    ds:getwindowlonga
mov     [eax+10h], edi
call    ds:destroycaret
jmp     short loc_40646b
push    0ffffffebh
push    [ebp+hwnd]
call    ds:getwindowlonga
push    1
pop     esi
push    dword ptr [eax+420h]
mov     [eax+10h], esi
push    edi
push    edi
push    [ebp+hwnd]
call    ds:createcaret
push    [ebp+hwnd]
call    ds:showcaret
push    edi
push    edi
push    [ebp+hwnd]
call    ds:invalidaterect
mov     eax, esi
jmp     loc_406596
mov     eax, [ebp+arg_8]
cmp     eax, 8
jz      short loc_4064f2
cmp     eax, 9
jz      short loc_4064e4
cmp     eax, 20h
jbe     loc_406594
cmp     eax, 28h
jmp     loc_40657a
push    [ebp+hwnd]
call    sub_4067a2
pop     ecx
jmp     loc_40646b
push    0ffffffebh
push    [ebp+hwnd]
call    ds:getwindowlonga
jmp     loc_406588
cmp     ecx, 101h
jz      short loc_406556
cmp     ecx, 200h
jz      loc_40646b
cmp     ecx, 201h
jz      short loc_406548
cmp     ecx, 202h
jbe     short loc_406594
cmp     ecx, 204h
jbe     loc_40646b
cmp     ecx, 2ffh
jbe     short loc_406594
cmp     ecx, 303h
jbe     loc_40646b
jmp     short loc_406594
push    [ebp+hwnd]
call    ds:setfocus
jmp     loc_40646b
mov     esi, ds:getwindowlonga
push    0ffffffebh
push    [ebp+hwnd]
call    esi
push    eax
call    sub_40659a
cmp     [ebp+arg_8], 8
pop     ecx
jz      short loc_406581
cmp     [ebp+arg_8], 20h
jbe     short loc_406594
cmp     [ebp+arg_8], 28h
ja      short loc_406594
jmp     loc_40646b
push    0ffffffebh
push    [ebp+hwnd]
call    esi
cmp     [eax+41ch], edi
jg      loc_40646b
xor     eax, eax
pop     edi
pop     esi
leave
retn
push    14h
call    ds:getkeystate
push    1
pop     ecx
test    cl, al
mov     eax, [esp+arg_0]
jz      short loc_4065b2
mov     [eax+14h], ecx
jmp     short loc_4065b6
and     dword ptr [eax+14h], 0
mov     ecx, [eax+458h]
test    ecx, ecx
jz      short locret_4065cc
push    dword ptr [eax+45ch]
push    dword ptr [eax]
call    ecx
pop     ecx
pop     ecx
retn
push    ebp
mov     ebp, esp
sub     esp, 58h
push    ebx
push    esi
mov     esi, [ebp+arg_4]
xor     ebx, ebx
push    edi
cmp     [esi+4], ebx
jz      short loc_4065ea
push    11h
call    ds:getstockobject
jmp     short loc_40662b
push    3ch
lea     eax, [ebp+lf]
push    ebx
push    eax
call    _memset
add     esp, 0ch
push    48h
push    5ah
push    [ebp+hdc]
call    ds:getdevicecaps
push    eax
push    8
call    ds:muldiv
neg     eax
mov     [ebp+lf.lfheight], eax
mov     al, [esi+440h]
mov     [ebp+lf.lfcharset], al
lea     eax, [ebp+lf]
push    eax
mov     [ebp+lf.lfpitchandfamily], 20h
call    ds:createfontindirecta
push    eax
push    dword ptr [esi+44ch]
call    ds:selectobject
mov     [ebp+h], eax
mov     [ebp+var_c], ebx
lea     edi, [esi+430h]
push    6
push    edi
push    dword ptr [esi+44ch]
call    ds:fillrect
mov     eax, [ebp+var_c]
mov     [esi+428h], ebx
neg     eax
mov     [esi+42ch], eax
mov     [ebp+var_8], ebx
lea     eax, [esi+21ch]
mov     ecx, [ebp+var_8]
mov     [ebp+var_10], eax
cmp     ecx, [esi+41ch]
jge     loc_40675c
cmp     [esi+0ch], ebx
jz      short loc_406696
mov     cl, [eax]
mov     dword ptr [ebp+string], 20h
and     ecx, 3
inc     ecx
mov     [ebp+arg_4], ecx
jmp     short loc_4066aa
mov     cx, [eax-200h]
mov     [ebp+arg_4], 1
xor     cx, [eax]
mov     dword ptr [ebp+string], ecx
dec     [ebp+arg_4]
js      loc_40673e
lea     eax, [ebp+psizl]
push    eax
lea     eax, [ebp+string]
push    1
push    eax
push    dword ptr [esi+44ch]
call    ds:gettextextentpoint32w
mov     eax, [esi+428h]
mov     ecx, [ebp+psizl._cx]
add     ecx, eax
cmp     ecx, [esi+438h]
jl      short loc_40670c
mov     eax, [esi+424h]
mov     [esi+428h], ebx
add     [esi+42ch], eax
mov     ecx, [esi+42ch]
add     eax, ecx
cmp     eax, [esi+43ch]
jg      short loc_406748
push    ebx
lea     eax, [ebp+string]
push    1
push    eax
push    edi
push    4
push    ecx
push    ebx
jmp     short loc_40671d
push    ebx
lea     ecx, [ebp+string]
push    1
push    ecx
push    edi
push    4
push    dword ptr [esi+42ch]
push    eax
push    dword ptr [esi+44ch]
call    ds:exttextoutw
mov     eax, [ebp+psizl._cx]
add     [esi+428h], eax
dec     [ebp+arg_4]
jns     loc_4066b3
mov     eax, [ebp+var_10]
inc     [ebp+var_8]
inc     eax
inc     eax
jmp     loc_40666d
mov     eax, [esi+424h]
sub     [esi+42ch], eax
add     [ebp+var_c], eax
jmp     loc_406644
push    [ebp+h]
push    dword ptr [esi+44ch]
call    ds:selectobject
mov     eax, [esi+434h]
mov     edx, [esi+43ch]
mov     ecx, [edi]
push    0cc0020h
push    ebx
push    ebx
push    dword ptr [esi+44ch]
sub     edx, eax
push    edx
mov     edx, [esi+438h]
sub     edx, ecx
push    edx
push    eax
push    ecx
push    [ebp+hdc]
call    ds:bitblt
pop     edi
pop     esi
pop     ebx
leave
retn
push    ecx
push    ebx
push    ebp
and     [esp+0ch+ucmd], 0
push    esi
push    edi
push    2
pop     ebp
push    10h
call    ds:getkeystate
test    ah, 80h
jz      short loc_4067c7
push    3
mov     [esp+18h+ucmd], 1
pop     ebp
mov     ebx, [esp+14h+hwnd]
mov     edi, ds:getwindow
push    ebp
push    ebx
call    edi
mov     esi, eax
test    esi, esi
jnz     short loc_4067e8
push    [esp+14h+ucmd]
push    ebx
call    edi
mov     esi, eax
test    esi, esi
jz      short loc_406814
push    0fffffff0h
push    esi
call    ds:getwindowlonga
test    eax, 10000h
jz      short loc_406803
push    esi
call    ds:iswindowenabled
test    eax, eax
jnz     short loc_40680d
cmp     esi, [esp+14h+hwnd]
mov     ebx, esi
jz      short loc_406814
jmp     short loc_4067d1
push    esi
call    ds:setfocus
pop     edi
pop     esi
pop     ebp
pop     ebx
pop     ecx
retn
push    ebp
mov     ebp, esp
sub     esp, 0cch
push    ebx
push    esi
push    edi
mov     edi, 460h
push    edi
call    _malloc
mov     esi, eax
push    edi
push    0
push    esi
call    _memset
mov     edi, [ebp+hwnd]
add     esp, 10h
lea     eax, [ebp+versioninformation]
mov     [esi], edi
mov     dword ptr [esi+454h], 7fffffffh
push    eax
mov     [ebp+versioninformation.dwosversioninfosize], 94h
call    ds:getversionexa
xor     eax, eax
cmp     [ebp+versioninformation.dwplatformid], 2
lea     ebx, [esi+430h]
setz    al
push    ebx
push    edi
mov     [esi+4], eax
call    ds:getclientrect
push    edi
call    ds:getdc
lea     ecx, [ebp+tm]
mov     [ebp+hwnd], eax
push    ecx
push    eax
call    ds:gettextmetricsa
mov     eax, [ebp+tm.tmascent]
cmp     dword ptr [esi+4], 0
mov     [esi+420h], eax
mov     eax, [ebp+tm.tmheight]
mov     [esi+424h], eax
jnz     short loc_4068ba
call    sub_406325
mov     [esi+440h], eax
push    [ebp+hwnd]
call    ds:createcompatibledc
mov     [esi+44ch], eax
mov     eax, [esi+43ch]
sub     eax, [esi+434h]
push    eax
mov     eax, [esi+438h]
sub     eax, [ebx]
push    eax
push    [ebp+hwnd]
call    ds:createcompatiblebitmap
push    eax
mov     [esi+450h], eax
push    dword ptr [esi+44ch]
call    ds:selectobject
push    [ebp+hwnd]
push    edi
call    ds:releasedc
mov     ebx, ds:setwindowlonga
push    esi
push    0ffffffebh
push    edi
call    ebx
cmp     dword ptr [esi+4], 0
jz      short loc_406927
push    offset sub_40618d
push    0fffffffch
push    edi
call    ds:setwindowlongw
jmp     short loc_406941
push    40h
push    40h
push    4cch
push    edi
call    ds:sendmessagea
push    offset sub_40618d
push    0fffffffch
push    edi
call    ebx
mov     [esi+18h], eax
mov     eax, [ebp+arg_4]
and     dword ptr [esi+41ch], 0
mov     [esi+0ch], eax
mov     eax, [ebp+arg_8]
push    esi
mov     [esi+458h], eax
mov     eax, [ebp+arg_c]
mov     [esi+45ch], eax
call    sub_40659a
push    0
call    _time
push    eax
call    _srand
add     esp, 0ch
lea     ebx, [esi+21ch]
mov     [ebp+hwnd], 100h
call    _rand
mov     [ebx], ax
inc     ebx
inc     ebx
dec     [ebp+hwnd]
jnz     short loc_406986
call    ds:getfocus
cmp     eax, edi
jnz     short loc_4069be
push    dword ptr [esi+420h]
mov     dword ptr [esi+10h], 1
push    0
push    0
push    edi
call    ds:createcaret
push    edi
call    ds:showcaret
pop     edi
pop     esi
pop     ebx
leave
retn
push    ebx
mov     ebx, [esp+4+hwnd]
push    esi
push    0ffffffebh
push    ebx
call    ds:getwindowlonga
mov     esi, eax
test    esi, esi
jz      short loc_406a37
cmp     dword ptr [esi+10h], 0
jz      short loc_4069e4
call    ds:destroycaret
push    edi
push    dword ptr [esi+450h]
call    ds:deleteobject
push    dword ptr [esi+44ch]
call    ds:deletedc
push    dword ptr [esi+18h]
cmp     dword ptr [esi+4], 0
mov     edi, ds:setwindowlonga
push    0fffffffch
push    ebx
jz      short loc_406a17
call    ds:setwindowlongw
jmp     short loc_406a19
call    edi
push    0
push    0ffffffebh
push    ebx
call    edi
push    460h
push    0
push    esi
call    _memset
push    esi
call    sub_40959b
add     esp, 10h
pop     edi
pop     esi
pop     ebx
retn
push    ebp
mov     ebp, esp
push    ecx
push    ebx
push    esi
push    0ffffffebh
push    [ebp+hwnd]
call    ds:getwindowlonga
mov     esi, eax
xor     ebx, ebx
cmp     esi, ebx
jz      short loc_406ab3
push    edi
push    200h
lea     eax, [esi+1ch]
push    ebx
push    eax
mov     [esi+448h], ebx
mov     [esi+41ch], ebx
call    _memset
add     esp, 0ch
add     esi, 21ch
mov     edi, 100h
call    _rand
mov     [esi], ax
inc     esi
inc     esi
dec     edi
jnz     short loc_406a7d
lea     eax, [ebp+lparam]
mov     byte ptr [ebp+lparam], bl
push    eax
push    ebx
push    0ch
push    [ebp+hwnd]
call    ds:sendmessagea
push    1
push    ebx
push    [ebp+hwnd]
call    ds:invalidaterect
push    [ebp+hwnd]
call    ds:updatewindow
pop     edi
pop     esi
pop     ebx
leave
retn
push    ebp
mov     ebp, esp
push    ebx
push    esi
push    edi
push    0ffffffebh
push    [ebp+hwnd]
call    ds:getwindowlonga
mov     esi, eax
xor     ecx, ecx
cmp     [esi+41ch], ecx
jle     short loc_406aec
lea     eax, [esi+1ch]
mov     dx, [eax+200h]
xor     [eax], dx
inc     ecx
inc     eax
inc     eax
cmp     ecx, [esi+41ch]
jl      short loc_406ad7
mov     ebx, [ebp+arg_4]
lea     eax, [ebp+hwnd]
push    eax
lea     edi, [esi+1ch]
push    [ebp+arg_8]
push    ebx
push    dword ptr [esi+41ch]
push    edi
call    sub_404ec9
xor     ecx, ecx
add     esp, 14h
cmp     [esi+41ch], ecx
jle     short loc_406b2a
mov     eax, edi
mov     dx, [eax+200h]
xor     [eax], dx
inc     ecx
inc     eax
inc     eax
cmp     ecx, [esi+41ch]
jl      short loc_406b15
mov     eax, [ebp+hwnd]
pop     edi
pop     esi
and     byte ptr [eax+ebx], 0
pop     ebx
pop     ebp
retn
push    ebp
mov     ebp, esp
push    esi
push    edi
push    0ffffffebh
push    [ebp+hwnd]
call    ds:getwindowlonga
mov     esi, eax
xor     ecx, ecx
cmp     [esi+41ch], ecx
jle     short loc_406b6a
lea     eax, [esi+1ch]
mov     dx, [eax+200h]
xor     [eax], dx
inc     ecx
inc     eax
inc     eax
cmp     ecx, [esi+41ch]
jl      short loc_406b55
lea     eax, [ebp+hwnd]
lea     edi, [esi+1ch]
push    eax
push    0
push    0
push    dword ptr [esi+41ch]
push    edi
call    sub_404ec9
xor     ecx, ecx
add     esp, 14h
cmp     [esi+41ch], ecx
jle     short loc_406ba5
mov     eax, edi
mov     dx, [eax+200h]
xor     [eax], dx
inc     ecx
inc     eax
inc     eax
cmp     ecx, [esi+41ch]
jl      short loc_406b90
mov     eax, [ebp+hwnd]
pop     edi
pop     esi
pop     ebp
retn
push    0ffffffebh
push    [esp+4+hwnd]
call    ds:getwindowlonga
mov     eax, [eax+14h]
retn
push    0ffffffebh
push    [esp+4+hwnd]
call    ds:getwindowlonga
mov     ecx, [esp+arg_4]
cmp     ecx, [eax+0ch]
jz      short locret_406be2
push    0
push    0
push    [esp+8+hwnd]
mov     [eax+0ch], ecx
call    ds:invalidaterect
retn
mov     eax, [esp+arg_0]
xor     edx, edx
cmp     eax, edx
jz      short loc_406c2c
mov     ecx, [eax+1ch]
cmp     ecx, edx
jz      short loc_406c2c
push    esi
mov     [eax+14h], edx
mov     [eax+8], edx
mov     [eax+18h], edx
mov     esi, [ecx+0ch]
push    edx
neg     esi
sbb     esi, esi
push    eax
and     esi, 7
mov     [ecx], esi
mov     eax, [eax+1ch]
mov     ecx, [eax+14h]
push    ecx
call    sub_4071f0
add     esp, 0ch
xor     eax, eax
pop     esi
retn
mov     eax, 0fffffffeh
retn
push    esi
mov     esi, [esp+4+arg_0]
test    esi, esi
jz      short loc_406c81
mov     eax, [esi+1ch]
test    eax, eax
jz      short loc_406c81
mov     ecx, [esi+24h]
test    ecx, ecx
jz      short loc_406c81
mov     eax, [eax+14h]
test    eax, eax
jz      short loc_406c68
push    esi
push    eax
call    sub_407ed0
add     esp, 8
mov     eax, [esi+1ch]
mov     ecx, [esi+28h]
push    eax
push    ecx
call    dword ptr [esi+24h]
add     esp, 8
mov     dword ptr [esi+1ch], 0
xor     eax, eax
pop     esi
retn
mov     eax, 0fffffffeh
pop     esi
retn
mov     eax, [esp+arg_8]
push    esi
push    edi
xor     edi, edi
cmp     eax, edi
jz      loc_406d96
mov     al, [eax]
mov     cl, byte ptr a113
cmp     al, cl
jnz     loc_406d96
cmp     [esp+8+arg_c], 38h
jnz     loc_406d96
mov     esi, [esp+8+arg_0]
cmp     esi, edi
jnz     short loc_406ccb
pop     edi
mov     eax, 0fffffffeh
pop     esi
retn
mov     eax, [esi+20h]
mov     [esi+18h], edi
cmp     eax, edi
jnz     short loc_406cdf
mov     dword ptr [esi+20h], offset sub_408060
mov     [esi+28h], edi
cmp     [esi+24h], edi
jnz     short loc_406ceb
mov     dword ptr [esi+24h], offset nullsub_2
mov     ecx, [esi+28h]
push    18h
push    1
push    ecx
call    dword ptr [esi+20h]
add     esp, 0ch
cmp     eax, edi
mov     [esi+1ch], eax
jnz     short loc_406d08
pop     edi
mov     eax, 0fffffffch
pop     esi
retn
mov     ecx, [esp+8+arg_4]
mov     [eax+14h], edi
mov     edx, [esi+1ch]
cmp     ecx, edi
mov     [edx+0ch], edi
jge     short loc_406d25
mov     eax, [esi+1ch]
neg     ecx
mov     dword ptr [eax+0ch], 1
cmp     ecx, 8
jl      short loc_406d85
cmp     ecx, 0fh
jg      short loc_406d85
mov     edx, [esi+1ch]
mov     eax, 1
shl     eax, cl
mov     [edx+10h], ecx
mov     ecx, [esi+1ch]
mov     edx, [ecx+0ch]
neg     edx
sbb     edx, edx
push    eax
not     edx
and     edx, offset sub_407f10
push    edx
push    esi
call    sub_407270
mov     ecx, [esi+1ch]
add     esp, 0ch
mov     [ecx+14h], eax
mov     edx, [esi+1ch]
push    esi
cmp     [edx+14h], edi
jnz     short loc_406d78
call    sub_406c40
add     esp, 4
mov     eax, 0fffffffch
pop     edi
pop     esi
retn
call    sub_406bf0
add     esp, 4
xor     eax, eax
pop     edi
pop     esi
retn
push    esi
call    sub_406c40
add     esp, 4
mov     eax, 0fffffffeh
pop     edi
pop     esi
retn
pop     edi
mov     eax, 0fffffffah
pop     esi
retn
mov     eax, [esp+arg_8]
mov     ecx, [esp+arg_4]
mov     edx, [esp+arg_0]
push    eax
push    ecx
push    0fh
push    edx
call    sub_406c90
add     esp, 10h
retn
push    ebx
push    ebp
push    esi
mov     esi, [esp+0ch+arg_0]
test    esi, esi
push    edi
jz      def_406e10
mov     eax, [esi+1ch]
test    eax, eax
jz      def_406e10
cmp     dword ptr [esi], 0
jz      def_406e10
mov     edx, [esp+10h+arg_4]
xor     ebx, ebx
cmp     edx, 4
mov     edi, 0fffffffbh
setnz   bl
dec     ebx
mov     ebp, 5
and     ebx, 0fffffffbh
mov     [esp+10h+arg_4], ebx
mov     eax, [esi+1ch]
mov     ecx, [eax]
cmp     ecx, 0dh
ja      def_406e10
jmp     ds:jpt_406e10[ecx*4]
mov     ecx, [esi+4]
test    ecx, ecx
jz      loc_407087
dec     ecx
xor     edx, edx
mov     [esi+4], ecx
mov     ecx, [esi+8]
inc     ecx
mov     edi, ebx
mov     [esi+8], ecx
mov     ecx, [esi]
mov     dl, [ecx]
mov     [eax+4], edx
mov     eax, [esi+1ch]
mov     edx, [esi]
mov     ecx, [eax+4]
and     ecx, 0fh
inc     edx
cmp     cl, 8
mov     [esi], edx
jz      short loc_406e60
mov     dword ptr [eax], 0dh
mov     edx, [esi+1ch]
mov     dword ptr [esi+18h], offset aunknowncompres
mov     [edx+4], ebp
jmp     short loc_406e02
mov     ecx, [eax+4]
mov     edx, [eax+10h]
shr     ecx, 4
add     ecx, 8
cmp     ecx, edx
jbe     short loc_406e88
mov     dword ptr [eax], 0dh
mov     edx, [esi+1ch]
mov     dword ptr [esi+18h], offset ainvalidwindows
mov     [edx+4], ebp
jmp     loc_406e02
mov     dword ptr [eax], 1
mov     eax, [esi+4]
test    eax, eax
jz      loc_407087
dec     eax
xor     ecx, ecx
mov     [esi+4], eax
mov     eax, [esi+8]
inc     eax
mov     edi, ebx
mov     ebx, [esi+1ch]
mov     [esi+8], eax
mov     eax, [esi]
xor     edx, edx
mov     ebp, 1fh
mov     cl, [eax]
inc     eax
mov     [esi], eax
mov     eax, [ebx+4]
shl     eax, 8
add     eax, ecx
div     ebp
test    edx, edx
jz      short loc_406ee8
mov     dword ptr [ebx], 0dh
mov     eax, [esi+1ch]
mov     ebx, [esp+10h+arg_4]
mov     ebp, 5
mov     dword ptr [esi+18h], offset aincorrectheade
mov     [eax+4], ebp
jmp     loc_406e02
test    cl, 20h
jnz     loc_40706e
mov     dword ptr [ebx], 7
mov     ebx, [esp+10h+arg_4]
mov     ebp, 5
jmp     loc_406e02
mov     ecx, [eax+14h]
push    edi
push    esi
push    ecx
call    sub_407310
mov     edi, eax
add     esp, 0ch
cmp     edi, 0fffffffdh
jnz     short loc_406f32
mov     edx, [esi+1ch]
mov     dword ptr [edx], 0dh
mov     eax, [esi+1ch]
mov     dword ptr [eax+4], 0
jmp     loc_406e02
test    edi, edi
jnz     short loc_406f38
mov     edi, ebx
cmp     edi, 1
jnz     loc_407087
mov     eax, [esi+1ch]
mov     edi, ebx
mov     edx, [eax+14h]
lea     ecx, [eax+4]
push    ecx
push    esi
push    edx
call    sub_4071f0
mov     eax, [esi+1ch]
add     esp, 0ch
mov     ecx, [eax+0ch]
test    ecx, ecx
jz      short loc_406f6c
mov     dword ptr [eax], 0ch
jmp     loc_406e02
mov     dword ptr [eax], 8
mov     eax, [esi+4]
test    eax, eax
jz      loc_407087
dec     eax
mov     edx, [esi+1ch]
mov     [esi+4], eax
mov     eax, [esi+8]
inc     eax
xor     ecx, ecx
mov     [esi+8], eax
mov     eax, [esi]
mov     edi, ebx
mov     cl, [eax]
shl     ecx, 18h
mov     [edx+8], ecx
mov     eax, [esi]
inc     eax
mov     [esi], eax
mov     eax, [esi+1ch]
mov     dword ptr [eax], 9
mov     eax, [esi+4]
test    eax, eax
jz      loc_407087
mov     edx, [esi+8]
mov     ecx, [esi]
dec     eax
inc     edx
mov     [esi+8], edx
mov     [esi+4], eax
mov     eax, [esi+1ch]
xor     edx, edx
mov     dl, [ecx]
mov     edi, ebx
mov     ecx, [eax+8]
shl     edx, 10h
add     ecx, edx
mov     [eax+8], ecx
mov     eax, [esi]
inc     eax
mov     [esi], eax
mov     eax, [esi+1ch]
mov     dword ptr [eax], 0ah
mov     eax, [esi+4]
test    eax, eax
jz      loc_407087
mov     edx, [esi+8]
mov     ecx, [esi]
dec     eax
inc     edx
mov     [esi+8], edx
mov     [esi+4], eax
mov     eax, [esi+1ch]
xor     edx, edx
mov     dl, [ecx]
mov     edi, ebx
mov     ecx, [eax+8]
shl     edx, 8
add     ecx, edx
mov     [eax+8], ecx
mov     eax, [esi]
inc     eax
mov     [esi], eax
mov     eax, [esi+1ch]
mov     dword ptr [eax], 0bh
mov     eax, [esi+4]
test    eax, eax
jz      short loc_407087
mov     edx, [esi+8]
mov     ecx, [esi]
dec     eax
inc     edx
mov     [esi+4], eax
mov     eax, [esi+1ch]
mov     [esi+8], edx
xor     edx, edx
mov     dl, [ecx]
mov     ecx, [eax+8]
add     ecx, edx
mov     edi, ebx
mov     [eax+8], ecx
mov     eax, [esi]
inc     eax
mov     [esi], eax
mov     eax, [esi+1ch]
mov     ecx, [eax+4]
mov     edx, [eax+8]
cmp     ecx, edx
jz      loc_40719a
mov     dword ptr [eax], 0dh
mov     edx, [esi+1ch]
mov     dword ptr [esi+18h], offset aincorrectdatac
mov     [edx+4], ebp
jmp     loc_406e02
mov     eax, [esi+1ch]
mov     ebx, [esp+10h+arg_4]
mov     ebp, 5
mov     dword ptr [eax], 2
mov     eax, [esi+4]
test    eax, eax
jnz     short loc_40708e
mov     eax, edi
pop     edi
pop     esi
pop     ebp
pop     ebx
retn
mov     edx, [esi+8]
mov     ecx, [esi]
dec     eax
inc     edx
mov     [esi+8], edx
xor     edx, edx
mov     [esi+4], eax
mov     dl, [ecx]
mov     eax, [esi+1ch]
mov     edi, ebx
shl     edx, 18h
mov     [eax+8], edx
mov     eax, [esi]
mov     ecx, [esi+1ch]
inc     eax
mov     [esi], eax
mov     dword ptr [ecx], 3
mov     eax, [esi+4]
test    eax, eax
jnz     short loc_4070c6
mov     eax, edi
pop     edi
pop     esi
pop     ebp
pop     ebx
retn
mov     edx, [esi]
dec     eax
mov     [esi+4], eax
mov     eax, [esi+8]
inc     eax
xor     ecx, ecx
mov     [esi+8], eax
mov     eax, [esi+1ch]
mov     cl, [edx]
mov     edi, ebx
mov     edx, [eax+8]
shl     ecx, 10h
add     edx, ecx
mov     [eax+8], edx
mov     eax, [esi]
mov     edx, [esi+1ch]
inc     eax
mov     [esi], eax
mov     dword ptr [edx], 4
mov     eax, [esi+4]
test    eax, eax
jnz     short loc_407103
mov     eax, edi
pop     edi
pop     esi
pop     ebp
pop     ebx
retn
mov     ecx, [esi]
dec     eax
mov     [esi+4], eax
mov     eax, [esi+8]
inc     eax
xor     edx, edx
mov     [esi+8], eax
mov     eax, [esi+1ch]
mov     dl, [ecx]
mov     edi, ebx
mov     ecx, [eax+8]
shl     edx, 8
add     ecx, edx
mov     [eax+8], ecx
mov     eax, [esi]
inc     eax
mov     [esi], eax
mov     eax, [esi+1ch]
mov     [eax], ebp
mov     eax, [esi+4]
test    eax, eax
jnz     short loc_40713c
mov     eax, edi
pop     edi
pop     esi
pop     ebp
pop     ebx
retn
mov     edx, [esi+8]
mov     ecx, [esi]
dec     eax
inc     edx
mov     [esi+4], eax
mov     eax, [esi+1ch]
mov     [esi+8], edx
xor     edx, edx
mov     dl, [ecx]
mov     ecx, [eax+8]
add     ecx, edx
pop     edi
mov     [eax+8], ecx
mov     eax, [esi]
inc     eax
mov     [esi], eax
mov     eax, [esi+1ch]
mov     ecx, [eax+8]
mov     [esi+30h], ecx
pop     esi
mov     dword ptr [eax], 6
pop     ebp
mov     eax, 2
pop     ebx
retn
mov     edx, [esi+1ch]
mov     dword ptr [edx], 0dh
mov     eax, [esi+1ch]
mov     dword ptr [esi+18h], offset aneeddictionary
mov     dword ptr [eax+4], 0
pop     edi
pop     esi
pop     ebp
mov     eax, 0fffffffeh
pop     ebx
retn
mov     ecx, [esi+1ch]
mov     dword ptr [ecx], 0ch
pop     edi
pop     esi
pop     ebp
mov     eax, 1
pop     ebx
retn
pop     edi
pop     esi
pop     ebp
mov     eax, 0fffffffdh
pop     ebx
retn
mov     eax, [esp+arg_8]
push    esi
mov     esi, [esp+4+arg_0]
push    edi
test    eax, eax
jz      short loc_407203
mov     ecx, [esi+3ch]
mov     [eax], ecx
mov     eax, [esi]
mov     edi, [esp+8+arg_4]
cmp     eax, 4
jz      short loc_407213
cmp     eax, 5
jnz     short loc_407221
mov     edx, [esi+0ch]
mov     eax, [edi+28h]
push    edx
push    eax
call    dword ptr [edi+24h]
add     esp, 8
cmp     dword ptr [esi], 6
jnz     short loc_407233
mov     ecx, [esi+4]
push    edi
push    ecx
call    sub_408870
add     esp, 8
mov     eax, [esi+28h]
mov     dword ptr [esi], 0
mov     [esi+34h], eax
mov     [esi+30h], eax
mov     eax, [esi+38h]
mov     dword ptr [esi+1ch], 0
test    eax, eax
mov     dword ptr [esi+20h], 0
jz      short loc_407268
push    0
push    0
push    0
call    eax
mov     [esi+3ch], eax
add     esp, 0ch
mov     [edi+30h], eax
pop     edi
pop     esi
retn
push    ebx
push    esi
push    edi
mov     edi, [esp+0ch+arg_0]
push    40h
push    1
mov     eax, [edi+28h]
push    eax
call    dword ptr [edi+20h]
mov     esi, eax
add     esp, 0ch
test    esi, esi
jnz     short loc_40728f
pop     edi
pop     esi
pop     ebx
retn
mov     ecx, [edi+28h]
push    5a0h
push    8
push    ecx
call    dword ptr [edi+20h]
add     esp, 0ch
mov     [esi+24h], eax
test    eax, eax
jnz     short loc_4072b8
mov     edx, [edi+28h]
push    esi
push    edx
call    dword ptr [edi+24h]
add     esp, 8
xor     eax, eax
pop     edi
pop     esi
pop     ebx
retn
mov     ebx, [esp+0ch+arg_8]
mov     eax, [edi+28h]
push    ebx
push    1
push    eax
call    dword ptr [edi+20h]
add     esp, 0ch
mov     [esi+28h], eax
test    eax, eax
jnz     short loc_4072ec
mov     ecx, [esi+24h]
mov     edx, [edi+28h]
push    ecx
push    edx
call    dword ptr [edi+24h]
mov     eax, [edi+28h]
push    esi
push    eax
call    dword ptr [edi+24h]
add     esp, 10h
xor     eax, eax
pop     edi
pop     esi
pop     ebx
retn
mov     ecx, [esp+0ch+arg_4]
push    0
add     eax, ebx
push    edi
push    esi
mov     [esi+2ch], eax
mov     [esi+38h], ecx
mov     dword ptr [esi], 0
call    sub_4071f0
add     esp, 0ch
mov     eax, esi
pop     edi
pop     esi
pop     ebx
retn
sub     esp, 30h
push    ebx
mov     ebx, [esp+34h+arg_4]
push    ebp
push    esi
mov     esi, [esp+3ch+arg_0]
mov     eax, [ebx+4]
mov     ebp, [ebx]
mov     [esp+3ch+var_30], eax
mov     ecx, [esi+34h]
mov     eax, [esi+20h]
mov     [esp+3ch+arg_0], ecx
mov     ecx, [esi+30h]
mov     edx, [esp+3ch+arg_0]
push    edi
mov     edi, [esi+1ch]
cmp     edx, ecx
mov     [esp+40h+arg_4], eax
jnb     short loc_40734d
sub     ecx, edx
dec     ecx
mov     [esp+40h+var_2c], ecx
jmp     short def_4073be
mov     ecx, [esi+2ch]
mov     edx, [esp+40h+arg_0]
sub     ecx, edx
mov     [esp+40h+var_2c], ecx
jmp     short def_4073be
mov     eax, [esp+40h+arg_4]
mov     ecx, [esi]
cmp     ecx, 9
ja      def_40736b
jmp     ds:jpt_40736b[ecx*4]
cmp     edi, 3
jnb     short loc_4073aa
mov     ecx, [esp+40h+var_30]
test    ecx, ecx
jz      loc_407c1b
mov     edx, ecx
mov     ecx, edi
dec     edx
add     edi, 8
mov     [esp+40h+var_30], edx
xor     edx, edx
mov     dl, [ebp+0]
mov     [esp+40h+arg_8], 0
shl     edx, cl
or      eax, edx
inc     ebp
cmp     edi, 3
mov     [esp+40h+arg_4], eax
jb      short loc_407377
mov     ecx, eax
and     ecx, 7
mov     edx, ecx
shr     ecx, 1
and     edx, 1
cmp     ecx, 3
mov     [esi+18h], edx
ja      short def_4073be
jmp     ds:jpt_4073be[ecx*4]
sub     edi, 3
mov     dword ptr [esi], 1
mov     ecx, edi
and     ecx, 7
shr     eax, 3
shr     eax, cl
sub     edi, ecx
mov     [esp+40h+arg_4], eax
jmp     short def_4073be
lea     eax, [esp+40h+var_1c]
push    ebx
lea     ecx, [esp+44h+var_18]
push    eax
lea     edx, [esp+48h+var_14]
push    ecx
lea     eax, [esp+4ch+var_10]
push    edx
push    eax
call    sub_408fa0
mov     ecx, [esp+54h+var_1c]
mov     edx, [esp+54h+var_18]
mov     eax, [esp+54h+var_14]
push    ebx
push    ecx
mov     ecx, [esp+5ch+var_10]
push    edx
push    eax
push    ecx
call    sub_408080
add     esp, 28h
mov     [esi+4], eax
test    eax, eax
jz      loc_407d39
mov     eax, [esp+40h+arg_4]
mov     dword ptr [esi], 6
shr     eax, 3
mov     [esp+40h+arg_4], eax
sub     edi, 3
jmp     def_4073be
shr     eax, 3
mov     [esp+40h+arg_4], eax
sub     edi, 3
mov     dword ptr [esi], 3
jmp     def_4073be
cmp     edi, 20h
jnb     short loc_407488
mov     ecx, [esp+40h+var_30]
test    ecx, ecx
jz      loc_407ad6
mov     edx, ecx
mov     ecx, edi
dec     edx
add     edi, 8
mov     [esp+40h+var_30], edx
xor     edx, edx
mov     dl, [ebp+0]
mov     [esp+40h+arg_8], 0
shl     edx, cl
or      eax, edx
inc     ebp
cmp     edi, 20h
mov     [esp+40h+arg_4], eax
jb      short loc_407455
mov     ecx, eax
not     eax
and     ecx, 0ffffh
shr     eax, 10h
xor     eax, ecx
jnz     loc_407b15
xor     edi, edi
xor     eax, eax
test    ecx, ecx
mov     [esi+4], ecx
mov     [esp+40h+arg_4], eax
jz      short loc_4074b8
mov     ecx, 2
mov     [esi], ecx
jmp     def_4073be
mov     ecx, [esi+18h]
neg     ecx
sbb     ecx, ecx
and     ecx, 7
mov     [esi], ecx
jmp     def_4073be
mov     eax, [esp+40h+var_30]
test    eax, eax
jz      loc_407c5a
mov     eax, [esp+40h+var_2c]
test    eax, eax
jnz     loc_407582
mov     edx, [esi+2ch]
mov     eax, [esp+40h+arg_0]
cmp     eax, edx
jnz     short loc_40750d
mov     eax, [esi+30h]
mov     ecx, [esi+28h]
cmp     ecx, eax
jz      short loc_40750d
mov     [esp+40h+arg_0], ecx
jnb     short loc_407501
sub     eax, ecx
dec     eax
jmp     short loc_407505
sub     edx, ecx
mov     eax, edx
test    eax, eax
mov     [esp+40h+var_2c], eax
jnz     short loc_407582
mov     ecx, [esp+40h+arg_8]
mov     eax, [esp+40h+arg_0]
push    ecx
push    ebx
push    esi
mov     [esi+34h], eax
call    sub_408fd0
mov     ecx, [esi+30h]
mov     [esp+4ch+arg_8], eax
mov     eax, [esi+34h]
add     esp, 0ch
cmp     eax, ecx
mov     [esp+40h+arg_0], eax
jnb     short loc_407540
mov     edx, ecx
sub     edx, eax
dec     edx
mov     [esp+40h+var_2c], edx
jmp     short loc_40754f
mov     eax, [esi+2ch]
mov     edx, [esp+40h+arg_0]
sub     eax, edx
mov     [esp+40h+var_2c], eax
mov     edx, eax
mov     eax, [esi+2ch]
cmp     [esp+40h+arg_0], eax
mov     [esp+40h+var_20], eax
jnz     short loc_40757a
mov     eax, [esi+28h]
cmp     eax, ecx
jz      short loc_40757a
mov     [esp+40h+arg_0], eax
jnb     short loc_407570
sub     ecx, eax
dec     ecx
mov     edx, ecx
jmp     short loc_407576
mov     edx, [esp+40h+var_20]
sub     edx, eax
mov     [esp+40h+var_2c], edx
test    edx, edx
jz      loc_407b24
mov     eax, [esi+4]
mov     ecx, [esp+40h+var_30]
cmp     eax, ecx
mov     [esp+40h+arg_8], 0
mov     [esp+40h+size], eax
jbe     short loc_40759f
mov     eax, ecx
mov     [esp+40h+size], eax
mov     ecx, [esp+40h+var_2c]
cmp     eax, ecx
jbe     short loc_4075ab
mov     [esp+40h+size], ecx
mov     edx, [esp+40h+size]
mov     eax, [esp+40h+arg_0]
push    edx
push    ebp
push    eax
call    sub_408040
mov     eax, [esp+4ch+size]
mov     edx, [esp+4ch+var_30]
mov     ecx, [esp+4ch+arg_0]
sub     edx, eax
add     ecx, eax
mov     [esp+4ch+var_30], edx
mov     edx, [esp+4ch+var_2c]
mov     [esp+4ch+arg_0], ecx
mov     ecx, [esi+4]
add     esp, 0ch
add     ebp, eax
sub     edx, eax
sub     ecx, eax
mov     [esp+40h+var_2c], edx
mov     [esi+4], ecx
jnz     loc_40735c
mov     ecx, [esi+18h]
neg     ecx
sbb     ecx, ecx
and     ecx, 7
mov     [esi], ecx
jmp     loc_40735c
cmp     edi, 0eh
jnb     short loc_407639
mov     ecx, [esp+40h+var_30]
test    ecx, ecx
jz      loc_407c5a
mov     edx, ecx
mov     ecx, edi
dec     edx
add     edi, 8
mov     [esp+40h+var_30], edx
xor     edx, edx
mov     dl, [ebp+0]
mov     [esp+40h+arg_8], 0
shl     edx, cl
or      eax, edx
inc     ebp
cmp     edi, 0eh
mov     [esp+40h+arg_4], eax
jb      short loc_407606
and     eax, 3fffh
mov     ecx, eax
mov     [esi+4], eax
and     ecx, 1fh
cmp     ecx, 1dh
ja      loc_407b76
mov     edx, eax
and     edx, 3e0h
cmp     edx, 3a0h
ja      loc_407b76
shr     eax, 5
and     eax, 1fh
push    4
lea     eax, [eax+ecx+102h]
mov     ecx, [ebx+28h]
push    eax
push    ecx
call    dword ptr [ebx+20h]
add     esp, 0ch
mov     [esi+0ch], eax
test    eax, eax
jz      loc_407b3a
mov     ecx, [esp+40h+arg_4]
mov     dword ptr [esi+8], 0
shr     ecx, 0eh
mov     [esp+40h+arg_4], ecx
sub     edi, 0eh
mov     dword ptr [esi], 4
mov     eax, ecx
mov     edx, [esi+4]
mov     ecx, [esi+8]
shr     edx, 0ah
add     edx, 4
cmp     ecx, edx
jnb     short loc_407726
cmp     edi, 3
jnb     short loc_4076ef
mov     ecx, [esp+40h+var_30]
test    ecx, ecx
jz      loc_407c5a
mov     edx, ecx
xor     ecx, ecx
mov     cl, [ebp+0]
dec     edx
mov     [esp+40h+var_30], edx
mov     edx, ecx
mov     ecx, edi
add     edi, 8
shl     edx, cl
mov     [esp+40h+arg_8], 0
or      eax, edx
inc     ebp
cmp     edi, 3
mov     [esp+40h+arg_4], eax
jb      short loc_4076ba
mov     ecx, [esi+8]
and     eax, 7
sub     edi, 3
mov     edx, ds:dword_414fdc[ecx*4]
mov     ecx, [esi+0ch]
mov     [ecx+edx*4], eax
mov     eax, [esi+8]
mov     edx, [esi+4]
inc     eax
mov     [esi+8], eax
mov     ecx, eax
mov     eax, [esp+40h+arg_4]
shr     edx, 0ah
add     edx, 4
shr     eax, 3
cmp     ecx, edx
mov     [esp+40h+arg_4], eax
jb      short loc_4076b5
mov     ecx, [esi+8]
mov     eax, 13h
cmp     ecx, eax
jnb     short loc_407753
mov     ecx, [esi+8]
mov     edx, ds:dword_414fdc[ecx*4]
mov     ecx, [esi+0ch]
mov     dword ptr [ecx+edx*4], 0
mov     edx, [esi+8]
inc     edx
mov     ecx, edx
mov     [esi+8], edx
cmp     ecx, eax
jb      short loc_407732
mov     edx, [esi+24h]
push    ebx
lea     ecx, [esi+14h]
lea     eax, [esi+10h]
push    edx
mov     edx, [esi+0ch]
push    ecx
push    eax
push    edx
mov     dword ptr [eax], 7
call    sub_408890
add     esp, 14h
mov     [esp+40h+size], eax
test    eax, eax
jnz     loc_407bbf
mov     [esi+8], eax
mov     eax, [esp+40h+arg_4]
mov     dword ptr [esi], 5
mov     ecx, [esi+4]
mov     edx, ecx
and     ecx, 1fh
shr     edx, 5
and     edx, 1fh
lea     ecx, [edx+ecx+102h]
mov     edx, [esi+8]
cmp     edx, ecx
jnb     loc_40794c
jmp     short loc_4077b1
mov     eax, [esp+40h+arg_4]
mov     ecx, [esi+10h]
cmp     edi, ecx
jnb     short loc_4077ed
mov     ecx, [esp+40h+var_30]
test    ecx, ecx
jz      loc_407c1b
mov     edx, ecx
mov     ecx, edi
dec     edx
add     edi, 8
mov     [esp+40h+var_30], edx
xor     edx, edx
mov     dl, [ebp+0]
mov     [esp+40h+arg_8], 0
shl     edx, cl
mov     ecx, [esi+10h]
or      eax, edx
inc     ebp
cmp     edi, ecx
mov     [esp+40h+arg_4], eax
jb      short loc_4077b8
mov     ecx, ds:dword_414f98[ecx*4]
mov     edx, [esi+14h]
and     ecx, eax
lea     edx, [edx+ecx*8]
xor     ecx, ecx
mov     cl, [edx+1]
mov     edx, [edx+4]
cmp     edx, 10h
mov     [esp+40h+size], ecx
mov     [esp+40h+var_20], edx
jnb     short loc_40782b
shr     eax, cl
sub     edi, ecx
mov     ecx, [esi+0ch]
mov     [esp+40h+arg_4], eax
mov     eax, [esi+8]
mov     [ecx+eax*4], edx
mov     eax, [esi+8]
inc     eax
jmp     loc_407929
cmp     edx, 12h
jnz     short loc_40783a
mov     [esp+40h+var_2c], 7
jmp     short loc_407841
add     edx, 0fffffff2h
mov     [esp+40h+var_2c], edx
mov     edx, [esp+40h+var_20]
sub     edx, 12h
neg     edx
sbb     edx, edx
and     edx, 0fffffff8h
add     edx, 0bh
mov     [esp+40h+var_24], edx
mov     edx, [esp+40h+var_2c]
add     edx, ecx
cmp     edi, edx
mov     [esp+40h+var_c], edx
jnb     short loc_4078a0
mov     ecx, [esp+40h+var_30]
test    ecx, ecx
jz      loc_407c5a
mov     edx, ecx
xor     ecx, ecx
mov     cl, [ebp+0]
dec     edx
mov     [esp+40h+var_30], edx
mov     edx, ecx
mov     ecx, edi
add     edi, 8
shl     edx, cl
mov     ecx, [esp+40h+var_c]
mov     [esp+40h+arg_8], 0
or      eax, edx
inc     ebp
cmp     edi, ecx
mov     [esp+40h+arg_4], eax
jb      short loc_407864
mov     ecx, [esp+40h+size]
shr     eax, cl
mov     ecx, [esp+40h+var_2c]
mov     edx, ds:dword_414f98[ecx*4]
mov     ecx, [esp+40h+var_24]
and     edx, eax
add     ecx, edx
mov     [esp+40h+var_24], ecx
mov     ecx, [esp+40h+var_2c]
shr     eax, cl
mov     [esp+40h+arg_4], eax
mov     eax, [esp+40h+size]
add     ecx, eax
mov     eax, [esi+4]
mov     edx, eax
and     eax, 1fh
shr     edx, 5
and     edx, 1fh
sub     edi, ecx
mov     ecx, [esi+8]
lea     eax, [edx+eax+102h]
mov     edx, [esp+40h+var_24]
add     edx, ecx
mov     [esp+40h+var_2c], ecx
cmp     edx, eax
ja      loc_407c99
cmp     [esp+40h+var_20], 10h
jnz     short loc_407910
mov     eax, ecx
cmp     eax, 1
jb      loc_407c99
mov     ecx, [esi+0ch]
mov     ecx, [ecx+eax*4-4]
jmp     short loc_407916
mov     eax, [esp+40h+var_2c]
xor     ecx, ecx
mov     edx, [esi+0ch]
inc     eax
mov     [edx+eax*4-4], ecx
mov     edx, [esp+40h+var_24]
dec     edx
mov     [esp+40h+var_24], edx
jnz     short loc_407916
mov     [esi+8], eax
mov     eax, [esi+4]
mov     ecx, [esi+8]
mov     edx, eax
shr     edx, 5
and     edx, 1fh
and     eax, 1fh
lea     eax, [edx+eax+102h]
cmp     ecx, eax
jb      loc_4077ad
mov     ecx, [esi+24h]
mov     eax, [esi+4]
push    ebx
push    ecx
lea     edx, [esp+48h+var_8]
lea     ecx, [esp+48h+var_4]
push    edx
push    ecx
lea     edx, [esp+50h+var_20]
lea     ecx, [esp+50h+var_24]
push    edx
mov     edx, [esi+0ch]
push    ecx
mov     ecx, eax
shr     ecx, 5
and     ecx, 1fh
and     eax, 1fh
inc     ecx
push    edx
add     eax, 101h
push    ecx
push    eax
mov     dword ptr [esi+14h], 0
mov     [esp+64h+var_24], 9
mov     [esp+64h+var_20], 6
call    sub_408e10
mov     edx, [esi+0ch]
mov     [esp+64h+size], eax
mov     eax, [ebx+28h]
push    edx
push    eax
call    dword ptr [ebx+24h]
mov     eax, [esp+6ch+size]
add     esp, 2ch
test    eax, eax
jnz     loc_407ced
mov     ecx, [esp+40h+var_8]
mov     edx, [esp+40h+var_4]
mov     eax, [esp+40h+var_20]
push    ebx
push    ecx
mov     ecx, [esp+48h+var_24]
push    edx
push    eax
push    ecx
call    sub_408080
add     esp, 14h
test    eax, eax
jz      loc_407d39
mov     [esi+4], eax
mov     dword ptr [esi], 6
mov     edx, [esp+40h+arg_4]
mov     eax, [esp+40h+var_30]
mov     [esi+20h], edx
mov     [esi+1ch], edi
mov     edi, [ebx]
mov     edx, [ebx+8]
mov     ecx, ebp
mov     [ebx+4], eax
mov     eax, [esp+40h+arg_8]
sub     ecx, edi
add     edx, ecx
push    eax
mov     [ebx+8], edx
mov     edx, [esp+44h+arg_0]
push    ebx
mov     [ebx], ebp
push    esi
mov     [esi+34h], edx
call    sub_4080c0
add     esp, 0ch
cmp     eax, 1
jnz     loc_407dc7
mov     ecx, [esi+4]
push    ebx
push    ecx
mov     [esp+48h+arg_8], 0
call    sub_408870
mov     eax, [esi+20h]
mov     ecx, [esi+34h]
mov     edx, [ebx+4]
mov     ebp, [ebx]
mov     edi, [esi+1ch]
mov     [esp+48h+arg_4], eax
mov     eax, [esi+30h]
add     esp, 8
cmp     ecx, eax
mov     [esp+40h+var_30], edx
mov     [esp+40h+arg_0], ecx
jnb     short loc_407a64
mov     edx, ecx
sub     eax, edx
dec     eax
jmp     short loc_407a6d
mov     eax, [esi+2ch]
mov     ecx, [esp+40h+arg_0]
sub     eax, ecx
mov     [esp+40h+var_2c], eax
mov     eax, [esi+18h]
test    eax, eax
jnz     loc_407d75
mov     dword ptr [esi], 0
jmp     loc_40735c
mov     eax, [esp+40h+arg_4]
mov     dword ptr [esi], 9
shr     eax, 3
mov     dword ptr [ebx+18h], offset ainvalidblockty
add     edi, 0fffffffdh
mov     [esi+20h], eax
mov     eax, [esp+40h+var_30]
mov     [esi+1ch], edi
mov     edx, [ebx]
mov     ecx, ebp
mov     [ebx+4], eax
mov     eax, [ebx+8]
sub     ecx, edx
mov     edx, [esp+40h+arg_0]
add     eax, ecx
push    0fffffffdh
push    ebx
mov     [ebx+8], eax
mov     [ebx], ebp
push    esi
mov     [esi+34h], edx
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 30h
retn
mov     eax, [esp+40h+arg_4]
mov     [esi+1ch], edi
mov     [esi+20h], eax
mov     edx, [ebx]
mov     eax, [ebx+8]
mov     ecx, ebp
sub     ecx, edx
mov     edx, [esp+40h+arg_0]
add     eax, ecx
mov     dword ptr [ebx+4], 0
mov     [ebx+8], eax
mov     eax, [esp+40h+arg_8]
push    eax
push    ebx
mov     [ebx], ebp
push    esi
mov     [esi+34h], edx
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 30h
retn
mov     dword ptr [esi], 9
mov     dword ptr [ebx+18h], offset ainvalidstoredb
jmp     short loc_407b83
mov     eax, [esp+40h+arg_4]
mov     ecx, [esp+40h+var_30]
mov     [esi+20h], eax
mov     [esi+1ch], edi
mov     [ebx+4], ecx
jmp     loc_407c2c
mov     eax, [esp+40h+arg_4]
mov     ecx, [esp+40h+var_30]
mov     [esi+20h], eax
mov     [esi+1ch], edi
mov     eax, [ebx+8]
mov     [ebx+4], ecx
mov     ecx, [ebx]
mov     edx, ebp
sub     edx, ecx
push    0fffffffch
add     eax, edx
push    ebx
mov     [ebx+8], eax
mov     eax, [esp+48h+arg_0]
mov     [ebx], ebp
push    esi
mov     [esi+34h], eax
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 30h
retn
mov     dword ptr [esi], 9
mov     dword ptr [ebx+18h], offset atoomanylengtho
mov     ecx, [esp+40h+arg_4]
mov     edx, [esp+40h+var_30]
mov     [esi+20h], ecx
mov     [esi+1ch], edi
mov     ecx, [ebx+8]
mov     [ebx+4], edx
mov     edx, [ebx]
mov     eax, ebp
sub     eax, edx
push    0fffffffdh
add     ecx, eax
push    ebx
mov     [ebx+8], ecx
mov     ecx, [esp+48h+arg_0]
mov     [ebx], ebp
push    esi
mov     [esi+34h], ecx
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 30h
retn
mov     eax, [esi+0ch]
mov     ecx, [ebx+28h]
push    eax
push    ecx
call    dword ptr [ebx+24h]
mov     eax, [esp+48h+size]
add     esp, 8
cmp     eax, 0fffffffdh
jnz     short loc_407bdc
mov     dword ptr [esi], 9
mov     edx, [esp+40h+arg_4]
mov     eax, [esp+40h+var_30]
mov     [esi+20h], edx
mov     [esi+1ch], edi
mov     edx, [ebx]
mov     ecx, ebp
mov     [ebx+4], eax
mov     eax, [ebx+8]
sub     ecx, edx
mov     edx, [esp+40h+arg_0]
add     eax, ecx
mov     [ebx], ebp
mov     [ebx+8], eax
mov     eax, [esp+40h+size]
push    eax
push    ebx
push    esi
mov     [esi+34h], edx
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 30h
retn
mov     ecx, [esp+40h+arg_4]
mov     [esi+1ch], edi
mov     [esi+20h], ecx
mov     dword ptr [ebx+4], 0
mov     ecx, [ebx]
mov     eax, [ebx+8]
mov     edx, ebp
mov     [ebx], ebp
sub     edx, ecx
mov     ecx, [esp+40h+arg_8]
add     eax, edx
push    ecx
mov     [ebx+8], eax
mov     eax, [esp+44h+arg_0]
push    ebx
push    esi
mov     [esi+34h], eax
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 30h
retn
mov     edx, [esp+40h+arg_4]
mov     [esi+1ch], edi
mov     [esi+20h], edx
mov     edx, [ebx]
mov     ecx, [ebx+8]
mov     eax, ebp
sub     eax, edx
mov     edx, [esp+40h+arg_8]
add     ecx, eax
push    edx
mov     [ebx+8], ecx
mov     ecx, [esp+44h+arg_0]
push    ebx
mov     dword ptr [ebx+4], 0
mov     [ebx], ebp
push    esi
mov     [esi+34h], ecx
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 30h
retn
mov     eax, [esi+0ch]
mov     ecx, [ebx+28h]
push    eax
push    ecx
call    dword ptr [ebx+24h]
mov     edx, [esp+48h+arg_4]
mov     eax, [esp+48h+var_30]
mov     dword ptr [esi], 9
mov     dword ptr [ebx+18h], offset ainvalidbitleng
mov     [esi+20h], edx
mov     [esi+1ch], edi
mov     edx, [ebx]
mov     ecx, ebp
mov     [ebx+4], eax
mov     eax, [ebx+8]
sub     ecx, edx
mov     edx, [esp+48h+arg_0]
add     eax, ecx
push    0fffffffdh
push    ebx
mov     [ebx+8], eax
mov     [ebx], ebp
push    esi
mov     [esi+34h], edx
call    sub_408fd0
add     esp, 14h
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 30h
retn
cmp     [esp+40h+size], 0fffffffdh
jnz     short loc_407cfa
mov     dword ptr [esi], 9
mov     eax, [esp+40h+arg_4]
mov     ecx, [esp+40h+var_30]
mov     [esi+20h], eax
mov     [esi+1ch], edi
mov     eax, [ebx+8]
mov     [ebx+4], ecx
mov     ecx, [ebx]
mov     edx, ebp
sub     edx, ecx
mov     ecx, [esp+40h+size]
add     eax, edx
push    ecx
mov     [ebx+8], eax
mov     eax, [esp+44h+arg_0]
push    ebx
mov     [ebx], ebp
push    esi
mov     [esi+34h], eax
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 30h
retn
mov     edx, [esp+40h+arg_4]
mov     eax, [esp+40h+var_30]
mov     [esi+20h], edx
mov     [esi+1ch], edi
mov     edx, [ebx]
mov     ecx, ebp
mov     [ebx+4], eax
mov     eax, [ebx+8]
sub     ecx, edx
mov     edx, [esp+40h+arg_0]
add     eax, ecx
push    0fffffffch
push    ebx
mov     [ebx+8], eax
mov     [ebx], ebp
push    esi
mov     [esi+34h], edx
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 30h
retn
mov     dword ptr [esi], 7
mov     ecx, [esp+40h+arg_8]
mov     eax, [esp+40h+arg_0]
push    ecx
push    ebx
push    esi
mov     [esi+34h], eax
call    sub_408fd0
mov     ecx, [esi+34h]
mov     edx, [esi+30h]
add     esp, 0ch
cmp     edx, ecx
mov     [esp+40h+arg_0], ecx
jz      short loc_407dda
mov     edx, [esp+40h+arg_4]
mov     ecx, [esp+40h+var_30]
mov     [esi+20h], edx
mov     [esi+1ch], edi
mov     edi, [ebx]
mov     edx, ebp
mov     [ebx+4], ecx
mov     ecx, [ebx+8]
sub     edx, edi
mov     [ebx], ebp
add     ecx, edx
mov     [ebx+8], ecx
mov     ecx, [esp+40h+arg_0]
mov     [esi+34h], ecx
push    eax
push    ebx
push    esi
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 30h
retn
mov     dword ptr [esi], 8
mov     edx, [esp+40h+arg_4]
mov     eax, [esp+40h+var_30]
mov     [esi+20h], edx
mov     [esi+1ch], edi
mov     edx, [ebx]
mov     ecx, ebp
mov     [ebx+4], eax
mov     eax, [ebx+8]
sub     ecx, edx
mov     edx, [esp+40h+arg_0]
add     eax, ecx
push    1
push    ebx
mov     [ebx+8], eax
mov     [ebx], ebp
push    esi
mov     [esi+34h], edx
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 30h
retn
mov     eax, [esp+40h+arg_4]
mov     ecx, [esp+40h+var_30]
mov     [esi+20h], eax
mov     [esi+1ch], edi
mov     eax, [ebx+8]
mov     [ebx+4], ecx
mov     ecx, [ebx]
mov     edx, ebp
sub     edx, ecx
push    0fffffffdh
add     eax, edx
push    ebx
mov     [ebx+8], eax
mov     eax, [esp+48h+arg_0]
mov     [ebx], ebp
push    esi
mov     [esi+34h], eax
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 30h
retn
mov     ecx, [esp+40h+arg_4]
mov     edx, [esp+40h+var_30]
mov     [esi+20h], ecx
mov     [esi+1ch], edi
mov     ecx, [ebx+8]
mov     [ebx+4], edx
mov     edx, [ebx]
mov     eax, ebp
sub     eax, edx
push    0fffffffeh
add     ecx, eax
push    ebx
mov     [ebx+8], ecx
mov     ecx, [esp+48h+arg_0]
mov     [ebx], ebp
push    esi
mov     [esi+34h], ecx
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 30h
retn
push    esi
mov     esi, [esp+4+arg_4]
push    edi
mov     edi, [esp+8+arg_0]
push    0
push    esi
push    edi
call    sub_4071f0
mov     eax, [edi+28h]
mov     ecx, [esi+28h]
push    eax
push    ecx
call    dword ptr [esi+24h]
mov     edx, [edi+24h]
mov     eax, [esi+28h]
push    edx
push    eax
call    dword ptr [esi+24h]
mov     ecx, [esi+28h]
push    edi
push    ecx
call    dword ptr [esi+24h]
add     esp, 24h
xor     eax, eax
pop     edi
pop     esi
retn
push    esi
mov     esi, [esp+4+arg_4]
push    edi
mov     edi, [esp+8+arg_0]
mov     ecx, edi
and     ecx, 0ffffh
shr     edi, 10h
test    esi, esi
jnz     short loc_407f31
pop     edi
mov     eax, 1
pop     esi
retn
push    ebx
mov     ebx, [esp+0ch+arg_8]
test    ebx, ebx
jbe     loc_408033
push    ebp
cmp     ebx, 15b0h
mov     eax, ebx
jb      short loc_407f4e
mov     eax, 15b0h
sub     ebx, eax
cmp     eax, 10h
jl      loc_408000
mov     ebp, eax
shr     ebp, 4
mov     edx, ebp
neg     edx
shl     edx, 4
add     eax, edx
xor     edx, edx
mov     dl, [esi]
add     esi, 10h
add     ecx, edx
xor     edx, edx
mov     dl, [esi-0fh]
add     edi, ecx
add     ecx, edx
xor     edx, edx
mov     dl, [esi-0eh]
add     edi, ecx
add     ecx, edx
xor     edx, edx
mov     dl, [esi-0dh]
add     edi, ecx
add     ecx, edx
xor     edx, edx
mov     dl, [esi-0ch]
add     edi, ecx
add     ecx, edx
xor     edx, edx
mov     dl, [esi-0bh]
add     edi, ecx
add     ecx, edx
xor     edx, edx
mov     dl, [esi-0ah]
add     edi, ecx
add     ecx, edx
xor     edx, edx
mov     dl, [esi-9]
add     edi, ecx
add     ecx, edx
xor     edx, edx
mov     dl, [esi-8]
add     edi, ecx
add     ecx, edx
xor     edx, edx
mov     dl, [esi-7]
add     edi, ecx
add     ecx, edx
xor     edx, edx
mov     dl, [esi-6]
add     edi, ecx
add     ecx, edx
xor     edx, edx
mov     dl, [esi-5]
add     edi, ecx
add     ecx, edx
xor     edx, edx
mov     dl, [esi-4]
add     edi, ecx
add     ecx, edx
xor     edx, edx
mov     dl, [esi-3]
add     edi, ecx
add     ecx, edx
xor     edx, edx
mov     dl, [esi-2]
add     edi, ecx
add     ecx, edx
xor     edx, edx
mov     dl, [esi-1]
add     edi, ecx
add     ecx, edx
add     edi, ecx
dec     ebp
jnz     loc_407f67
test    eax, eax
jz      short loc_408010
xor     edx, edx
mov     dl, [esi]
add     ecx, edx
inc     esi
add     edi, ecx
dec     eax
jnz     short loc_408004
mov     eax, ecx
xor     edx, edx
mov     ecx, 0fff1h
div     ecx
mov     eax, edi
mov     edi, 0fff1h
mov     ecx, edx
xor     edx, edx
div     edi
test    ebx, ebx
mov     edi, edx
ja      loc_407f3f
pop     ebp
mov     eax, edi
pop     ebx
shl     eax, 10h
pop     edi
or      eax, ecx
pop     esi
retn
mov     eax, [esp+size]
mov     ecx, [esp+arg_0]
mov     edx, [esp+src]
push    eax
push    ecx
push    edx
call    sub_4016de
add     esp, 0ch
retn
xor     eax, eax
retn
mov     eax, [esp+arg_10]
push    1ch
push    1
mov     ecx, [eax+28h]
push    ecx
call    dword ptr [eax+20h]
add     esp, 0ch
test    eax, eax
jz      short locret_4080b8
mov     dl, [esp+arg_0]
mov     cl, [esp+arg_4]
mov     [eax+10h], dl
mov     edx, [esp+arg_8]
mov     [eax+11h], cl
mov     ecx, [esp+arg_c]
mov     dword ptr [eax], 0
mov     [eax+14h], edx
mov     [eax+18h], ecx
retn
sub     esp, 10h
push    ebx
push    ebp
push    esi
mov     esi, [esp+1ch+arg_0]
push    edi
mov     edi, [esp+20h+arg_4]
mov     edx, [esi+20h]
mov     eax, [esi+4]
mov     ecx, [edi+4]
mov     ebp, [edi]
mov     ebx, [esi+1ch]
mov     [esp+20h+arg_4], ecx
mov     ecx, [esi+30h]
mov     [esp+20h+arg_0], edx
mov     edx, [esi+34h]
mov     [esp+20h+var_10], eax
cmp     edx, ecx
jnb     short loc_4080f8
sub     ecx, edx
dec     ecx
jmp     short loc_4080fd
mov     ecx, [esi+2ch]
sub     ecx, edx
mov     [esp+20h+var_c], ecx
mov     ecx, [eax]
cmp     ecx, 9
ja      def_40810c
jmp     ds:jpt_40810c[ecx*4]
cmp     [esp+20h+var_c], 102h
jb      loc_4081bd
cmp     [esp+20h+arg_4], 0ah
jb      loc_4081bd
mov     eax, [esp+20h+arg_0]
mov     ecx, [esp+20h+arg_4]
mov     [esi+20h], eax
mov     [esi+1ch], ebx
mov     ebx, [edi]
mov     eax, ebp
mov     [edi+4], ecx
mov     ecx, [edi+8]
sub     eax, ebx
mov     [edi], ebp
add     ecx, eax
mov     eax, [esp+20h+var_10]
mov     [edi+8], ecx
mov     [esi+34h], edx
mov     ecx, [eax+18h]
mov     edx, [eax+14h]
push    edi
push    esi
push    ecx
push    edx
xor     ecx, ecx
xor     edx, edx
mov     cl, [eax+11h]
mov     dl, [eax+10h]
push    ecx
push    edx
call    sub_4090e0
mov     ecx, [edi+4]
mov     edx, [esi+20h]
mov     ebp, [edi]
mov     ebx, [esi+1ch]
mov     [esp+38h+arg_4], ecx
mov     ecx, [esi+30h]
mov     [esp+38h+arg_0], edx
mov     edx, [esi+34h]
add     esp, 18h
cmp     edx, ecx
mov     [esp+20h+arg_8], eax
jnb     short loc_408198
sub     ecx, edx
dec     ecx
jmp     short loc_40819d
mov     ecx, [esi+2ch]
sub     ecx, edx
test    eax, eax
mov     [esp+20h+var_c], ecx
jz      short loc_4081bd
mov     ecx, [esp+20h+var_10]
dec     eax
neg     eax
sbb     eax, eax
and     eax, 2
add     eax, 7
mov     [ecx], eax
mov     eax, ecx
jmp     loc_408101
mov     eax, [esp+20h+var_10]
xor     ecx, ecx
mov     cl, [eax+10h]
mov     dword ptr [eax], 1
mov     [eax+0ch], ecx
mov     ecx, [eax+14h]
mov     [eax+8], ecx
mov     eax, [eax+0ch]
cmp     ebx, eax
mov     [esp+20h+var_8], eax
jnb     short loc_408218
mov     eax, [esp+20h+arg_4]
test    eax, eax
jz      loc_408669
dec     eax
mov     ecx, ebx
mov     [esp+20h+arg_4], eax
xor     eax, eax
mov     al, [ebp+0]
add     ebx, 8
shl     eax, cl
mov     ecx, [esp+20h+arg_0]
mov     [esp+20h+arg_8], 0
or      ecx, eax
mov     eax, [esp+20h+var_8]
inc     ebp
cmp     ebx, eax
mov     [esp+20h+arg_0], ecx
jb      short loc_4081e0
mov     ecx, ds:dword_415028[eax*4]
mov     eax, [esp+20h+arg_0]
and     ecx, eax
mov     eax, [esp+20h+var_10]
mov     eax, [eax+8]
lea     eax, [eax+ecx*8]
xor     ecx, ecx
mov     [esp+20h+var_8], eax
mov     cl, [eax+1]
mov     eax, [esp+20h+arg_0]
shr     eax, cl
mov     [esp+20h+var_4], ecx
mov     [esp+20h+arg_0], eax
mov     eax, ecx
sub     ebx, eax
mov     eax, [esp+20h+var_8]
xor     ecx, ecx
mov     cl, [eax]
test    ecx, ecx
jnz     short loc_40826b
mov     ecx, [eax+4]
mov     eax, [esp+20h+var_10]
mov     [eax+8], ecx
mov     dword ptr [eax], 6
jmp     loc_408101
test    cl, 10h
jz      short loc_40828f
mov     eax, [esp+20h+var_10]
and     ecx, 0fh
mov     [eax+8], ecx
mov     ecx, [esp+20h+var_8]
mov     ecx, [ecx+4]
mov     dword ptr [eax], 2
mov     [eax+4], ecx
jmp     loc_408101
test    cl, 40h
jnz     short loc_4082b1
mov     eax, [esp+20h+var_10]
mov     [eax+0ch], ecx
mov     eax, [esp+20h+var_8]
mov     ecx, [eax+4]
lea     ecx, [eax+ecx*8]
mov     eax, [esp+20h+var_10]
mov     [eax+8], ecx
jmp     loc_408101
mov     eax, [esp+20h+var_10]
test    cl, 20h
jz      loc_40865a
mov     dword ptr [eax], 7
jmp     loc_408101
mov     eax, [eax+8]
cmp     ebx, eax
mov     [esp+20h+var_8], eax
jnb     short loc_40830c
mov     eax, [esp+20h+arg_4]
test    eax, eax
jz      loc_408669
dec     eax
mov     ecx, ebx
mov     [esp+20h+arg_4], eax
xor     eax, eax
mov     al, [ebp+0]
add     ebx, 8
shl     eax, cl
mov     ecx, [esp+20h+arg_0]
mov     [esp+20h+arg_8], 0
or      ecx, eax
mov     eax, [esp+20h+var_8]
inc     ebp
cmp     ebx, eax
mov     [esp+20h+arg_0], ecx
jb      short loc_4082d4
mov     ecx, ds:dword_415028[eax*4]
mov     eax, [esp+20h+arg_0]
and     ecx, eax
mov     eax, [esp+20h+var_10]
add     [eax+4], ecx
mov     ecx, [esp+20h+var_8]
mov     eax, [esp+20h+arg_0]
shr     eax, cl
mov     [esp+20h+arg_0], eax
mov     eax, ecx
sub     ebx, eax
mov     eax, [esp+20h+var_10]
xor     ecx, ecx
mov     cl, [eax+11h]
mov     dword ptr [eax], 3
mov     [eax+0ch], ecx
mov     ecx, [eax+18h]
mov     [eax+8], ecx
mov     eax, [eax+0ch]
cmp     ebx, eax
mov     [esp+20h+var_8], eax
jnb     short loc_40838d
mov     eax, [esp+20h+arg_4]
test    eax, eax
jz      loc_408669
dec     eax
mov     ecx, ebx
mov     [esp+20h+arg_4], eax
xor     eax, eax
mov     al, [ebp+0]
add     ebx, 8
shl     eax, cl
mov     ecx, [esp+20h+arg_0]
mov     [esp+20h+arg_8], 0
or      ecx, eax
mov     eax, [esp+20h+var_8]
inc     ebp
cmp     ebx, eax
mov     [esp+20h+arg_0], ecx
jb      short loc_408355
mov     ecx, ds:dword_415028[eax*4]
mov     eax, [esp+20h+arg_0]
and     ecx, eax
mov     eax, [esp+20h+var_10]
mov     eax, [eax+8]
lea     eax, [eax+ecx*8]
xor     ecx, ecx
mov     [esp+20h+var_8], eax
mov     cl, [eax+1]
mov     eax, [esp+20h+arg_0]
shr     eax, cl
mov     [esp+20h+var_4], ecx
sub     ebx, ecx
xor     ecx, ecx
mov     [esp+20h+arg_0], eax
mov     eax, [esp+20h+var_8]
mov     cl, [eax]
test    cl, 10h
jz      short loc_4083e9
mov     eax, [esp+20h+var_10]
and     ecx, 0fh
mov     [eax+8], ecx
mov     ecx, [esp+20h+var_8]
mov     ecx, [ecx+4]
mov     dword ptr [eax], 4
mov     [eax+0ch], ecx
jmp     loc_408101
test    cl, 40h
jnz     loc_4086a4
jmp     loc_408294
mov     eax, [eax+8]
cmp     ebx, eax
mov     [esp+20h+var_8], eax
jnb     short loc_40843a
mov     eax, [esp+20h+arg_4]
test    eax, eax
jz      loc_408669
dec     eax
mov     ecx, ebx
mov     [esp+20h+arg_4], eax
xor     eax, eax
mov     al, [ebp+0]
add     ebx, 8
shl     eax, cl
mov     ecx, [esp+20h+arg_0]
mov     [esp+20h+arg_8], 0
or      ecx, eax
mov     eax, [esp+20h+var_8]
inc     ebp
cmp     ebx, eax
mov     [esp+20h+arg_0], ecx
jb      short loc_408402
mov     ecx, ds:dword_415028[eax*4]
mov     eax, [esp+20h+arg_0]
and     ecx, eax
mov     eax, [esp+20h+var_10]
add     [eax+0ch], ecx
mov     ecx, [esp+20h+var_8]
mov     eax, [esp+20h+arg_0]
shr     eax, cl
mov     [esp+20h+arg_0], eax
mov     eax, ecx
sub     ebx, eax
mov     eax, [esp+20h+var_10]
mov     dword ptr [eax], 5
mov     eax, [esi+28h]
mov     ecx, edx
sub     ecx, eax
mov     eax, [esp+20h+var_10]
mov     eax, [eax+0ch]
cmp     ecx, eax
jnb     short loc_408493
mov     eax, [esi+2ch]
mov     ecx, [esi+28h]
sub     eax, ecx
mov     ecx, [esp+20h+var_10]
sub     eax, [ecx+0ch]
add     eax, edx
mov     [esp+20h+var_4], eax
jmp     short loc_40849b
mov     ecx, edx
sub     ecx, eax
mov     [esp+20h+var_4], ecx
mov     eax, [esp+20h+var_10]
mov     ecx, [eax+4]
test    ecx, ecx
jz      loc_40858c
mov     ecx, [esp+20h+var_c]
test    ecx, ecx
jnz     loc_40854b
mov     eax, [esi+2ch]
cmp     edx, eax
mov     [esp+20h+var_8], eax
jnz     short loc_4084e4
mov     eax, [esi+30h]
mov     ecx, [esi+28h]
cmp     eax, ecx
jz      short loc_4084e4
mov     edx, ecx
cmp     edx, eax
jnb     short loc_4084d6
sub     eax, edx
dec     eax
jmp     short loc_4084dc
mov     eax, [esp+20h+var_8]
sub     eax, edx
test    eax, eax
mov     [esp+20h+var_c], eax
jnz     short loc_408547
mov     [esi+34h], edx
mov     edx, [esp+20h+arg_8]
push    edx
push    edi
push    esi
call    sub_408fd0
mov     edx, [esi+34h]
mov     [esp+2ch+arg_8], eax
mov     eax, [esi+30h]
add     esp, 0ch
cmp     edx, eax
jnb     short loc_40850b
mov     ecx, eax
sub     ecx, edx
dec     ecx
jmp     short loc_408510
mov     ecx, [esi+2ch]
sub     ecx, edx
mov     [esp+20h+var_c], ecx
mov     ecx, [esi+2ch]
cmp     edx, ecx
mov     [esp+20h+var_8], ecx
jnz     short loc_40853b
mov     ecx, [esi+28h]
cmp     eax, ecx
jz      short loc_40853b
mov     edx, ecx
cmp     edx, eax
jnb     short loc_408531
sub     eax, edx
dec     eax
jmp     short loc_408537
mov     eax, [esp+20h+var_8]
sub     eax, edx
mov     [esp+20h+var_c], eax
mov     eax, [esp+20h+var_c]
test    eax, eax
jz      loc_4086ed
mov     eax, [esp+20h+var_10]
mov     ecx, [esp+20h+var_4]
inc     edx
mov     [esp+20h+arg_8], 0
mov     cl, [ecx]
mov     [edx-1], cl
mov     ecx, [esp+20h+var_4]
inc     ecx
mov     [esp+20h+var_4], ecx
mov     ecx, [esp+20h+var_c]
dec     ecx
mov     [esp+20h+var_c], ecx
mov     ecx, [esp+20h+var_4]
cmp     ecx, [esi+2ch]
jnz     short loc_40857f
mov     ecx, [esi+28h]
mov     [esp+20h+var_4], ecx
mov     ecx, [eax+4]
dec     ecx
mov     [eax+4], ecx
jnz     loc_4084aa
mov     dword ptr [eax], 0
jmp     loc_408101
mov     ecx, [esp+20h+var_c]
test    ecx, ecx
jnz     loc_408638
mov     eax, [esi+2ch]
cmp     edx, eax
mov     [esp+20h+var_8], eax
jnz     short loc_4085d1
mov     eax, [esi+30h]
mov     ecx, [esi+28h]
cmp     eax, ecx
jz      short loc_4085d1
mov     edx, ecx
cmp     edx, eax
jnb     short loc_4085c3
sub     eax, edx
dec     eax
jmp     short loc_4085c9
mov     eax, [esp+20h+var_8]
sub     eax, edx
test    eax, eax
mov     [esp+20h+var_c], eax
jnz     short loc_408634
mov     [esi+34h], edx
mov     edx, [esp+20h+arg_8]
push    edx
push    edi
push    esi
call    sub_408fd0
mov     edx, [esi+34h]
mov     [esp+2ch+arg_8], eax
mov     eax, [esi+30h]
add     esp, 0ch
cmp     edx, eax
jnb     short loc_4085f8
mov     ecx, eax
sub     ecx, edx
dec     ecx
jmp     short loc_4085fd
mov     ecx, [esi+2ch]
sub     ecx, edx
mov     [esp+20h+var_c], ecx
mov     ecx, [esi+2ch]
cmp     edx, ecx
mov     [esp+20h+var_8], ecx
jnz     short loc_408628
mov     ecx, [esi+28h]
cmp     eax, ecx
jz      short loc_408628
mov     edx, ecx
cmp     edx, eax
jnb     short loc_40861e
sub     eax, edx
dec     eax
jmp     short loc_408624
mov     eax, [esp+20h+var_8]
sub     eax, edx
mov     [esp+20h+var_c], eax
mov     eax, [esp+20h+var_c]
test    eax, eax
jz      loc_4086ed
mov     eax, [esp+20h+var_10]
mov     cl, [eax+8]
mov     [esp+20h+arg_8], 0
mov     [edx], cl
mov     ecx, [esp+20h+var_c]
inc     edx
dec     ecx
mov     [esp+20h+var_c], ecx
mov     dword ptr [eax], 0
jmp     loc_408101
mov     dword ptr [eax], 9
mov     dword ptr [edi+18h], offset ainvalidliteral
jmp     short loc_4086b5
mov     eax, [esp+20h+arg_0]
mov     [esi+1ch], ebx
mov     [esi+20h], eax
mov     ebx, [edi]
mov     eax, [edi+8]
mov     ecx, ebp
sub     ecx, ebx
mov     dword ptr [edi+4], 0
add     eax, ecx
mov     [edi], ebp
mov     [edi+8], eax
mov     [esi+34h], edx
mov     edx, [esp+20h+arg_8]
push    edx
push    edi
push    esi
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 10h
retn
mov     eax, [esp+20h+var_10]
mov     dword ptr [eax], 9
mov     dword ptr [edi+18h], offset ainvaliddistanc
mov     ecx, [esp+20h+arg_0]
mov     eax, [esp+20h+arg_4]
mov     [esi+20h], ecx
mov     [esi+1ch], ebx
mov     ebx, [edi]
mov     ecx, ebp
mov     [edi+4], eax
mov     eax, [edi+8]
sub     ecx, ebx
push    0fffffffdh
add     eax, ecx
push    edi
mov     [edi+8], eax
mov     [edi], ebp
push    esi
mov     [esi+34h], edx
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 10h
retn
mov     eax, [esp+20h+arg_0]
mov     ecx, [esp+20h+arg_4]
mov     [esi+20h], eax
mov     [esi+1ch], ebx
mov     ebx, [edi]
mov     eax, ebp
mov     [edi+4], ecx
mov     ecx, [edi+8]
sub     eax, ebx
mov     [edi], ebp
add     ecx, eax
mov     [edi+8], ecx
mov     ecx, [esp+20h+arg_8]
push    ecx
push    edi
push    esi
mov     [esi+34h], edx
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 10h
retn
cmp     ebx, 7
jbe     short loc_40873a
mov     ecx, [esp+20h+arg_4]
sub     ebx, 8
inc     ecx
dec     ebp
mov     [esp+20h+arg_4], ecx
mov     [esi+34h], edx
mov     edx, [esp+20h+arg_8]
push    edx
push    edi
push    esi
call    sub_408fd0
mov     edx, [esi+34h]
mov     ecx, [esi+30h]
add     esp, 0ch
cmp     ecx, edx
jz      short loc_40878d
mov     ecx, [esp+20h+arg_0]
mov     [esi+1ch], ebx
mov     [esi+20h], ecx
mov     ecx, [esp+20h+arg_4]
mov     ebx, [edi]
mov     [edi+4], ecx
mov     ecx, ebp
push    eax
sub     ecx, ebx
mov     ebx, [edi+8]
add     ebx, ecx
push    edi
mov     [edi+8], ebx
mov     [edi], ebp
push    esi
mov     [esi+34h], edx
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 10h
retn
mov     eax, [esp+20h+var_10]
mov     dword ptr [eax], 8
mov     ecx, [esp+20h+arg_0]
mov     eax, [esp+20h+arg_4]
mov     [esi+20h], ecx
mov     [esi+1ch], ebx
mov     ebx, [edi]
mov     ecx, ebp
mov     [edi+4], eax
mov     eax, [edi+8]
sub     ecx, ebx
push    1
add     eax, ecx
push    edi
mov     [edi+8], eax
mov     [edi], ebp
push    esi
mov     [esi+34h], edx
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 10h
retn
mov     eax, [esp+20h+arg_0]
mov     ecx, [esp+20h+arg_4]
mov     [esi+20h], eax
mov     [esi+1ch], ebx
mov     ebx, [edi]
mov     eax, ebp
mov     [edi+4], ecx
mov     ecx, [edi+8]
sub     eax, ebx
push    0fffffffdh
add     ecx, eax
push    edi
mov     [edi+8], ecx
mov     [edi], ebp
push    esi
mov     [esi+34h], edx
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 10h
retn
mov     ecx, [esp+20h+arg_0]
mov     eax, [esp+20h+arg_4]
mov     [esi+20h], ecx
mov     [esi+1ch], ebx
mov     ebx, [edi]
mov     ecx, ebp
mov     [edi+4], eax
mov     eax, [edi+8]
sub     ecx, ebx
push    0fffffffeh
add     eax, ecx
push    edi
mov     [edi+8], eax
mov     [edi], ebp
push    esi
mov     [esi+34h], edx
call    sub_408fd0
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 10h
retn
mov     eax, [esp+arg_0]
push    eax
mov     eax, [esp+4+arg_4]
mov     ecx, [eax+28h]
push    ecx
call    dword ptr [eax+24h]
add     esp, 8
retn
push    ecx
push    ebx
push    edi
mov     edi, [esp+0ch+arg_10]
push    4
push    13h
mov     [esp+14h+var_4], 0
mov     eax, [edi+28h]
push    eax
call    dword ptr [edi+20h]
mov     ebx, eax
add     esp, 0ch
test    ebx, ebx
jnz     short loc_4088bc
pop     edi
mov     eax, 0fffffffch
pop     ebx
pop     ecx
retn
mov     edx, [esp+0ch+arg_c]
mov     eax, [esp+0ch+arg_8]
push    ebp
mov     ebp, [esp+10h+arg_4]
push    esi
lea     ecx, [esp+14h+var_4]
push    ebx
push    ecx
mov     ecx, [esp+1ch+arg_0]
push    edx
push    ebp
push    eax
push    0
push    0
push    13h
push    13h
push    ecx
call    sub_408940
mov     esi, eax
add     esp, 28h
cmp     esi, 0fffffffdh
jnz     short loc_408909
mov     edx, [edi+28h]
push    ebx
push    edx
mov     dword ptr [edi+18h], offset aoversubscribed
call    dword ptr [edi+24h]
add     esp, 8
mov     eax, esi
pop     esi
pop     ebp
pop     edi
pop     ebx
pop     ecx
retn
cmp     esi, 0fffffffbh
jz      short loc_408914
cmp     dword ptr [ebp+0], 0
jnz     short loc_408920
mov     dword ptr [edi+18h], offset aincompletedyna
mov     esi, 0fffffffdh
mov     edx, [edi+28h]
push    ebx
push    edx
call    dword ptr [edi+24h]
add     esp, 8
mov     eax, esi
pop     esi
pop     ebp
pop     edi
pop     ebx
pop     ecx
retn
sub     esp, 100h
mov     ecx, [esp+100h+arg_0]
push    ebx
push    ebp
push    esi
mov     esi, [esp+10ch+arg_4]
push    edi
xor     edi, edi
mov     edx, esi
mov     [esp+110h+var_bc], edi
mov     [esp+110h+var_b8], edi
mov     [esp+110h+var_b4], edi
mov     [esp+110h+var_b0], edi
mov     [esp+110h+var_ac], edi
mov     [esp+110h+var_a8], edi
mov     [esp+110h+var_a4], edi
mov     [esp+110h+var_a0], edi
mov     [esp+110h+var_9c], edi
mov     [esp+110h+var_98], edi
mov     [esp+110h+var_94], edi
mov     [esp+110h+var_90], edi
mov     [esp+110h+var_8c], edi
mov     [esp+110h+var_88], edi
mov     [esp+110h+var_84], edi
mov     [esp+110h+var_80], edi
mov     eax, [ecx]
add     ecx, 4
mov     ebp, [esp+eax*4+110h+var_bc]
lea     eax, [esp+eax*4+110h+var_bc]
inc     ebp
dec     edx
mov     [eax], ebp
jnz     short loc_4089ab
cmp     [esp+110h+var_bc], esi
jnz     short loc_4089e3
mov     ecx, [esp+110h+arg_14]
mov     edx, [esp+110h+arg_18]
mov     [ecx], edi
mov     [edx], edi
pop     edi
pop     esi
pop     ebp
xor     eax, eax
pop     ebx
add     esp, 100h
retn
mov     ebx, [esp+110h+arg_18]
mov     ecx, 1
lea     eax, [esp+110h+var_b8]
mov     ebp, [ebx]
mov     [esp+110h+var_100], ebp
cmp     [eax], edi
jnz     short loc_408a06
inc     ecx
add     eax, 4
cmp     ecx, 0fh
jbe     short loc_4089f9
mov     eax, ecx
cmp     ebp, ecx
mov     [esp+110h+var_fc], eax
jnb     short loc_408a16
mov     [esp+110h+var_100], ecx
mov     ebp, ecx
mov     edx, 0fh
lea     esi, [esp+110h+var_80]
cmp     [esi], edi
jnz     short loc_408a2e
dec     edx
sub     esi, 4
cmp     edx, edi
jnz     short loc_408a22
cmp     ebp, edx
mov     [esp+110h+var_e4], edx
jbe     short loc_408a3c
mov     [esp+110h+var_100], edx
mov     ebp, edx
mov     esi, 1
mov     [ebx], ebp
shl     esi, cl
cmp     ecx, edx
jnb     short loc_408a5b
lea     ebx, [esp+ecx*4+110h+var_bc]
sub     esi, [ebx]
js      short loc_408a76
inc     ecx
add     ebx, 4
shl     esi, 1
cmp     ecx, edx
jb      short loc_408a4d
lea     ecx, ds:0[edx*4]
mov     [esp+110h+var_f0], ecx
mov     ebx, [esp+ecx+110h+var_bc]
lea     ecx, [esp+ecx+110h+var_bc]
sub     esi, ebx
mov     [esp+110h+var_cc], esi
jns     short loc_408a86
pop     edi
pop     esi
pop     ebp
mov     eax, 0fffffffdh
pop     ebx
add     esp, 100h
retn
add     ebx, esi
mov     [esp+110h+var_78], edi
mov     [ecx], ebx
xor     ecx, ecx
dec     edx
jz      short loc_408aa9
xor     ebx, ebx
add     ecx, [esp+ebx+110h+var_b8]
add     ebx, 4
dec     edx
mov     [esp+ebx+110h+var_78], ecx
jnz     short loc_408a98
mov     edx, [esp+110h+arg_0]
xor     ebx, ebx
mov     ecx, [edx]
add     edx, 4
cmp     ecx, edi
mov     [esp+110h+var_f4], edx
jz      short loc_408ae2
mov     edx, [esp+ecx*4+110h+var_7c]
mov     esi, [esp+110h+arg_24]
lea     ecx, [esp+ecx*4+110h+var_7c]
mov     [esi+edx*4], ebx
mov     esi, [esp+110h+var_cc]
inc     edx
mov     [ecx], edx
mov     edx, [esp+110h+var_f4]
mov     ecx, [esp+110h+arg_4]
inc     ebx
cmp     ebx, ecx
jb      short loc_408ab2
mov     ecx, [esp+110h+var_f0]
mov     ebx, ebp
neg     ebx
mov     edx, [esp+ecx+110h+var_7c]
mov     ecx, [esp+110h+arg_24]
mov     [esp+110h+var_f4], ecx
mov     ecx, [esp+110h+var_e4]
cmp     eax, ecx
mov     [esp+110h+arg_4], edx
mov     [esp+110h+var_d8], edi
mov     [esp+110h+var_7c], edi
mov     [esp+110h+var_f8], 0ffffffffh
mov     [esp+110h+var_3c], edi
mov     [esp+110h+var_d0], edi
mov     [esp+110h+var_d4], edi
jg      loc_408dd6
mov     esi, [esp+110h+var_dc]
lea     edx, [eax-1]
lea     ecx, [esp+eax*4+110h+var_bc]
mov     [esp+110h+var_f0], edx
mov     [esp+110h+var_e8], ecx
mov     edx, [esp+110h+var_e8]
mov     edx, [edx]
mov     ecx, edx
dec     edx
test    ecx, ecx
mov     [esp+110h+var_ec], edx
jz      loc_408dab
jmp     short loc_408b6b
mov     edx, [esp+110h+var_ec]
lea     ecx, [ebx+ebp]
cmp     eax, ecx
jle     loc_408c88
inc     edx
mov     [esp+110h+var_c0], edx
jmp     short loc_408b85
mov     ebp, [esp+110h+var_100]
mov     eax, [esp+110h+var_fc]
mov     edx, [esp+110h+var_f8]
add     ebx, ebp
inc     edx
add     ecx, ebp
mov     [esp+110h+var_f8], edx
mov     edx, [esp+110h+var_e4]
sub     edx, ebx
mov     [esp+110h+var_c8], ecx
cmp     edx, ebp
jbe     short loc_408ba2
mov     edx, ebp
mov     edi, [esp+110h+var_c0]
mov     ecx, eax
sub     ecx, ebx
mov     eax, 1
shl     eax, cl
cmp     eax, edi
jbe     short loc_408be0
mov     ebp, [esp+110h+var_ec]
or      edi, 0ffffffffh
sub     edi, ebp
mov     ebp, [esp+110h+var_e8]
add     eax, edi
cmp     ecx, edx
jnb     short loc_408be0
inc     ecx
cmp     ecx, edx
jnb     short loc_408be0
mov     edi, [ebp+4]
add     ebp, 4
shl     eax, 1
cmp     eax, edi
jbe     short loc_408be0
sub     eax, edi
inc     ecx
cmp     ecx, edx
jb      short loc_408bcd
mov     ebp, [esp+110h+arg_20]
mov     edx, 1
shl     edx, cl
mov     eax, [ebp+0]
mov     [esp+110h+var_d4], edx
add     edx, eax
cmp     edx, 5a0h
ja      loc_408df9
mov     edi, [esp+110h+arg_1c]
mov     [ebp+0], edx
mov     edx, [esp+110h+var_f8]
lea     eax, [edi+eax*8]
mov     edi, [esp+110h+var_f8]
test    edx, edx
lea     edi, [esp+edi*4+110h+var_3c]
mov     [esp+110h+var_d0], eax
mov     [esp+110h+var_c4], edi
mov     [edi], eax
jz      short loc_408c6b
mov     edi, [esp+110h+var_d8]
mov     eax, [esp+110h+var_100]
mov     esi, [esp+110h+var_d0]
mov     byte ptr [esp+110h+var_e0], cl
mov     ecx, ebx
mov     [esp+edx*4+110h+var_7c], edi
mov     edx, [esp+110h+var_c4]
mov     byte ptr [esp+110h+var_e0+1], al
sub     ecx, eax
mov     eax, edi
shr     eax, cl
mov     ecx, [edx-4]
mov     edx, [esp+110h+var_e0]
sub     esi, ecx
sar     esi, 3
sub     esi, eax
mov     [ecx+eax*8], edx
mov     [ecx+eax*8+4], esi
jmp     short loc_408c78
mov     ecx, [esp+110h+arg_14]
mov     edi, [esp+110h+var_d8]
mov     [ecx], eax
mov     ecx, [esp+110h+var_c8]
mov     eax, [esp+110h+var_fc]
cmp     eax, ecx
jg      loc_408b7d
mov     ecx, [esp+110h+arg_24]
mov     dl, al
mov     ebp, [esp+110h+var_f4]
sub     dl, bl
mov     byte ptr [esp+110h+var_e0+1], dl
mov     edx, [esp+110h+arg_4]
lea     ecx, [ecx+edx*4]
cmp     ebp, ecx
jb      short loc_408cb0
mov     byte ptr [esp+110h+var_e0], 0c0h
jmp     short loc_408cf9
mov     esi, [ebp+0]
mov     ecx, [esp+110h+arg_8]
cmp     esi, ecx
jnb     short loc_408cd2
cmp     esi, 100h
sbb     dl, dl
and     dl, 0a0h
add     dl, 60h
mov     byte ptr [esp+110h+var_e0], dl
jmp     short loc_408cf2
sub     esi, ecx
mov     ecx, [esp+110h+arg_10]
shl     esi, 2
mov     dl, [esi+ecx]
mov     ecx, [esp+110h+arg_c]
add     dl, 50h
mov     esi, [esi+ecx]
mov     byte ptr [esp+110h+var_e0], dl
add     ebp, 4
mov     [esp+110h+var_f4], ebp
mov     ecx, eax
mov     edx, 1
sub     ecx, ebx
mov     eax, edi
shl     edx, cl
mov     ecx, ebx
shr     eax, cl
cmp     eax, [esp+110h+var_d4]
jnb     short loc_408d31
mov     ecx, [esp+110h+var_d0]
lea     ecx, [ecx+eax*8]
mov     ebp, [esp+110h+var_e0]
add     eax, edx
mov     [ecx], ebp
lea     ebp, ds:0[edx*8]
mov     [ecx+4], esi
add     ecx, ebp
cmp     eax, [esp+110h+var_d4]
jb      short loc_408d17
mov     ecx, [esp+110h+var_f0]
mov     eax, 1
shl     eax, cl
test    edi, eax
jz      short loc_408d48
xor     edi, eax
shr     eax, 1
test    edi, eax
jnz     short loc_408d40
mov     edx, [esp+110h+var_f8]
mov     ebp, 1
mov     ecx, ebx
xor     edi, eax
shl     ebp, cl
mov     ecx, [esp+edx*4+110h+var_7c]
lea     eax, [esp+edx*4+110h+var_7c]
mov     [esp+110h+var_d8], edi
dec     ebp
and     ebp, edi
cmp     ebp, ecx
jz      short loc_408d90
mov     ebp, [esp+110h+var_100]
dec     edx
sub     ebx, ebp
mov     ebp, 1
mov     ecx, ebx
sub     eax, 4
shl     ebp, cl
mov     ecx, [eax]
dec     ebp
and     ebp, edi
cmp     ebp, ecx
jnz     short loc_408d70
mov     [esp+110h+var_f8], edx
mov     eax, [esp+110h+var_ec]
mov     ebp, [esp+110h+var_100]
mov     edx, eax
dec     eax
mov     [esp+110h+var_ec], eax
mov     eax, [esp+110h+var_fc]
test    edx, edx
jnz     loc_408b67
mov     ecx, [esp+110h+var_e8]
mov     edx, [esp+110h+var_f0]
add     ecx, 4
inc     eax
mov     [esp+110h+var_e8], ecx
mov     ecx, [esp+110h+var_e4]
inc     edx
cmp     eax, ecx
mov     [esp+110h+var_fc], eax
mov     [esp+110h+var_f0], edx
jle     loc_408b50
mov     esi, [esp+110h+var_cc]
xor     edi, edi
cmp     esi, edi
jz      loc_4089d6
cmp     [esp+110h+var_e4], 1
jz      loc_4089d6
pop     edi
pop     esi
pop     ebp
mov     eax, 0fffffffbh
pop     ebx
add     esp, 100h
retn
pop     edi
pop     esi
pop     ebp
mov     eax, 0fffffffch
pop     ebx
add     esp, 100h
retn
push    ecx
push    ebx
mov     ebx, [esp+8+arg_20]
push    ebp
push    esi
mov     eax, [ebx+28h]
push    edi
push    4
push    120h
push    eax
mov     [esp+20h+var_4], 0
call    dword ptr [ebx+20h]
mov     edi, eax
add     esp, 0ch
test    edi, edi
jnz     short loc_408e43
pop     edi
pop     esi
pop     ebp
mov     eax, 0fffffffch
pop     ebx
pop     ecx
retn
mov     edx, [esp+14h+arg_1c]
mov     eax, [esp+14h+arg_c]
mov     ebp, [esp+14h+arg_0]
lea     ecx, [esp+14h+var_4]
push    edi
push    ecx
mov     ecx, [esp+1ch+arg_14]
push    edx
mov     edx, [esp+20h+arg_8]
push    eax
push    ecx
push    offset dword_415118
push    offset dword_41509c
push    101h
push    ebp
push    edx
call    sub_408940
mov     esi, eax
add     esp, 28h
test    esi, esi
jnz     loc_408f56
mov     eax, [esp+14h+arg_c]
cmp     dword ptr [eax], 0
jz      loc_408f7a
mov     edx, [esp+14h+arg_1c]
mov     eax, [esp+14h+arg_10]
lea     ecx, [esp+14h+var_4]
push    edi
push    ecx
mov     ecx, [esp+1ch+arg_18]
push    edx
mov     edx, [esp+20h+arg_4]
push    eax
mov     eax, [esp+24h+arg_8]
push    ecx
push    offset dword_41520c
push    offset dword_415194
push    esi
lea     ecx, [eax+ebp*4]
push    edx
push    ecx
call    sub_408940
mov     esi, eax
add     esp, 28h
test    esi, esi
jnz     short loc_408eef
mov     edx, [esp+14h+arg_10]
cmp     dword ptr [edx], 0
jnz     short loc_408edc
cmp     ebp, 101h
ja      short loc_408f37
mov     eax, [ebx+28h]
push    edi
push    eax
call    dword ptr [ebx+24h]
add     esp, 8
xor     eax, eax
pop     edi
pop     esi
pop     ebp
pop     ebx
pop     ecx
retn
cmp     esi, 0fffffffdh
jnz     short loc_408f0e
mov     ecx, [ebx+28h]
push    edi
push    ecx
mov     dword ptr [ebx+18h], offset aoversubscribed_0
call    dword ptr [ebx+24h]
add     esp, 8
mov     eax, esi
pop     edi
pop     esi
pop     ebp
pop     ebx
pop     ecx
retn
cmp     esi, 0fffffffbh
jnz     short loc_408f32
mov     ecx, [ebx+28h]
push    edi
push    ecx
mov     dword ptr [ebx+18h], offset aincompletedist
mov     esi, 0fffffffdh
call    dword ptr [ebx+24h]
add     esp, 8
mov     eax, esi
pop     edi
pop     esi
pop     ebp
pop     ebx
pop     ecx
retn
cmp     esi, 0fffffffch
jz      short loc_408f43
mov     dword ptr [ebx+18h], offset aemptydistancet
mov     esi, 0fffffffdh
mov     ecx, [ebx+28h]
push    edi
push    ecx
call    dword ptr [ebx+24h]
add     esp, 8
mov     eax, esi
pop     edi
pop     esi
pop     ebp
pop     ebx
pop     ecx
retn
cmp     esi, 0fffffffdh
jnz     short loc_408f75
mov     edx, [ebx+28h]
push    edi
push    edx
mov     dword ptr [ebx+18h], offset aoversubscribed_1
call    dword ptr [ebx+24h]
add     esp, 8
mov     eax, esi
pop     edi
pop     esi
pop     ebp
pop     ebx
pop     ecx
retn
cmp     esi, 0fffffffch
jz      short loc_408f86
mov     dword ptr [ebx+18h], offset aincompletelite
mov     esi, 0fffffffdh
mov     edx, [ebx+28h]
push    edi
push    edx
call    dword ptr [ebx+24h]
add     esp, 8
mov     eax, esi
pop     edi
pop     esi
pop     ebp
pop     ebx
pop     ecx
retn
mov     eax, [esp+arg_0]
mov     ecx, dword_417450
mov     edx, [esp+arg_4]
mov     [eax], ecx
mov     eax, dword_417454
mov     ecx, [esp+arg_8]
mov     [edx], eax
mov     edx, [esp+arg_c]
xor     eax, eax
mov     dword ptr [ecx], offset dword_417458
mov     dword ptr [edx], offset dword_418458
retn
push    ebx
push    ebp
push    esi
mov     esi, [esp+0ch+arg_0]
push    edi
mov     edi, [esp+10h+arg_4]
mov     ebp, [esi+30h]
mov     ebx, [esi+34h]
mov     eax, [edi+0ch]
cmp     ebp, ebx
mov     [esp+10h+arg_4], eax
jbe     short loc_408ff0
mov     ebx, [esi+2ch]
mov     eax, [edi+10h]
sub     ebx, ebp
cmp     ebx, eax
jbe     short loc_408ffb
mov     ebx, eax
test    ebx, ebx
jz      short loc_40900e
cmp     [esp+10h+arg_8], 0fffffffbh
jnz     short loc_40900e
mov     [esp+10h+arg_8], 0
mov     edx, [edi+14h]
sub     eax, ebx
add     edx, ebx
mov     [edi+10h], eax
mov     [edi+14h], edx
mov     eax, [esi+38h]
test    eax, eax
jz      short loc_409033
mov     ecx, [esi+3ch]
push    ebx
push    ebp
push    ecx
call    eax
mov     [esi+3ch], eax
add     esp, 0ch
mov     [edi+30h], eax
mov     edx, [esp+10h+arg_4]
push    ebx
push    ebp
push    edx
call    sub_408040
mov     eax, [esp+1ch+arg_4]
add     ebp, ebx
add     eax, ebx
add     esp, 0ch
mov     [esp+10h+arg_4], eax
mov     eax, [esi+2ch]
cmp     ebp, eax
jnz     short loc_4090c3
mov     ecx, [esi+34h]
mov     ebp, [esi+28h]
cmp     ecx, eax
jnz     short loc_409062
mov     [esi+34h], ebp
mov     ebx, [esi+34h]
mov     eax, [edi+10h]
sub     ebx, ebp
cmp     ebx, eax
jbe     short loc_409070
mov     ebx, eax
test    ebx, ebx
jz      short loc_409083
cmp     [esp+10h+arg_8], 0fffffffbh
jnz     short loc_409083
mov     [esp+10h+arg_8], 0
mov     edx, [edi+14h]
sub     eax, ebx
add     edx, ebx
mov     [edi+10h], eax
mov     [edi+14h], edx
mov     eax, [esi+38h]
test    eax, eax
jz      short loc_4090a8
mov     ecx, [esi+3ch]
push    ebx
push    ebp
push    ecx
call    eax
mov     [esi+3ch], eax
add     esp, 0ch
mov     [edi+30h], eax
mov     edx, [esp+10h+arg_4]
push    ebx
push    ebp
push    edx
call    sub_408040
mov     ecx, [esp+1ch+arg_4]
add     esp, 0ch
add     ecx, ebx
add     ebp, ebx
mov     [esp+10h+arg_4], ecx
mov     eax, [esp+10h+arg_4]
mov     [edi+0ch], eax
mov     eax, [esp+10h+arg_8]
mov     [esi+30h], ebp
pop     edi
pop     esi
pop     ebp
pop     ebx
retn
sub     esp, 14h
mov     ecx, [esp+14h+arg_10]
push    ebx
push    ebp
push    esi
mov     ebx, [ecx+34h]
mov     esi, [ecx+30h]
mov     edx, [ecx+20h]
push    edi
mov     edi, [esp+24h+arg_14]
cmp     ebx, esi
mov     [esp+24h+var_10], ebx
mov     eax, [edi+4]
mov     ebp, [edi]
mov     [esp+24h+var_14], eax
mov     eax, [ecx+1ch]
jnb     short loc_409115
sub     esi, ebx
dec     esi
mov     [esp+24h+var_c], esi
jmp     short loc_40911e
mov     ecx, [ecx+2ch]
sub     ecx, ebx
mov     [esp+24h+var_c], ecx
mov     ecx, [esp+24h+arg_0]
mov     ecx, ds:dword_4152c8[ecx*4]
mov     [esp+24h+var_8], ecx
mov     ecx, [esp+24h+arg_4]
mov     ecx, ds:dword_4152c8[ecx*4]
mov     [esp+24h+var_4], ecx
cmp     eax, 14h
jnb     short loc_409160
mov     ecx, [esp+24h+var_14]
dec     ecx
mov     [esp+24h+var_14], ecx
xor     ecx, ecx
mov     cl, [ebp+0]
mov     esi, ecx
mov     ecx, eax
shl     esi, cl
add     eax, 8
or      edx, esi
inc     ebp
cmp     eax, 14h
jb      short loc_409141
mov     ecx, [esp+24h+var_8]
mov     esi, [esp+24h+arg_8]
and     ecx, edx
xor     ebx, ebx
mov     bl, [esi+ecx*8]
lea     esi, [esi+ecx*8]
test    ebx, ebx
jz      loc_409318
xor     ecx, ecx
mov     cl, [esi+1]
shr     edx, cl
sub     eax, ecx
mov     [esp+24h+arg_4], ecx
test    bl, 10h
jnz     short loc_4091c5
test    bl, 40h
jnz     loc_4093bf
mov     ecx, ds:dword_4152c8[ebx*4]
mov     ebx, [esi+4]
and     ecx, edx
add     ecx, ebx
xor     ebx, ebx
mov     bl, [esi+ecx*8]
lea     esi, [esi+ecx*8]
test    ebx, ebx
jz      loc_409318
xor     ecx, ecx
mov     cl, [esi+1]
shr     edx, cl
sub     eax, ecx
mov     [esp+24h+arg_4], ecx
test    bl, 10h
jz      short loc_40918c
and     ebx, 0fh
sub     eax, ebx
mov     ecx, ds:dword_4152c8[ebx*4]
and     ecx, edx
add     ecx, [esi+4]
mov     [esp+24h+arg_0], ecx
mov     ecx, ebx
shr     edx, cl
cmp     eax, 0fh
jnb     short loc_409202
mov     ecx, [esp+24h+var_14]
dec     ecx
mov     [esp+24h+var_14], ecx
xor     ecx, ecx
mov     cl, [ebp+0]
mov     esi, ecx
mov     ecx, eax
shl     esi, cl
add     eax, 8
or      edx, esi
inc     ebp
cmp     eax, 0fh
jb      short loc_4091e3
mov     ecx, [esp+24h+var_4]
mov     esi, [esp+24h+arg_c]
and     ecx, edx
xor     ebx, ebx
mov     bl, [esi+ecx*8]
lea     esi, [esi+ecx*8]
xor     ecx, ecx
mov     cl, [esi+1]
shr     edx, cl
sub     eax, ecx
mov     [esp+24h+arg_4], ecx
test    bl, 10h
jnz     short loc_409257
test    bl, 40h
jnz     loc_409352
mov     ecx, ds:dword_4152c8[ebx*4]
mov     ebx, [esi+4]
and     ecx, edx
add     ecx, ebx
xor     ebx, ebx
mov     bl, [esi+ecx*8]
lea     esi, [esi+ecx*8]
xor     ecx, ecx
mov     cl, [esi+1]
shr     edx, cl
sub     eax, ecx
mov     [esp+24h+arg_4], ecx
test    bl, 10h
jz      short loc_409226
and     ebx, 0fh
cmp     eax, ebx
jnb     short loc_40927c
mov     edi, [esp+24h+var_14]
xor     ecx, ecx
mov     cl, [ebp+0]
dec     edi
mov     [esp+24h+var_14], edi
mov     edi, ecx
mov     ecx, eax
add     eax, 8
shl     edi, cl
or      edx, edi
inc     ebp
cmp     eax, ebx
jb      short loc_40925e
mov     edi, ds:dword_4152c8[ebx*4]
mov     ecx, [esi+4]
mov     esi, [esp+24h+var_c]
and     edi, edx
add     edi, ecx
mov     ecx, ebx
shr     edx, cl
mov     ecx, [esp+24h+arg_0]
sub     eax, ebx
sub     esi, ecx
mov     ecx, [esp+24h+arg_10]
mov     [esp+24h+var_c], esi
mov     esi, [ecx+28h]
mov     ecx, [esp+24h+var_10]
mov     ebx, ecx
sub     ebx, esi
cmp     ebx, edi
jb      short loc_4092d0
mov     esi, ecx
sub     esi, edi
mov     edi, [esp+24h+arg_0]
inc     ecx
mov     bl, [esi]
inc     esi
mov     [ecx-1], bl
inc     ecx
mov     bl, [esi]
inc     esi
mov     [ecx-1], bl
sub     edi, 2
mov     [esp+24h+arg_0], edi
jmp     short loc_4092fd
sub     esi, ecx
mov     ebx, [esp+24h+arg_0]
add     esi, edi
mov     edi, esi
mov     esi, [esp+24h+arg_10]
mov     esi, [esi+2ch]
sub     esi, edi
cmp     ebx, edi
jbe     short loc_4092fd
sub     ebx, edi
mov     [esp+24h+arg_0], ebx
mov     bl, [esi]
mov     [ecx], bl
inc     ecx
inc     esi
dec     edi
jnz     short loc_4092ed
mov     esi, [esp+24h+arg_10]
mov     esi, [esi+28h]
mov     bl, [esi]
mov     edi, [esp+24h+arg_0]
mov     [ecx], bl
inc     ecx
inc     esi
dec     edi
mov     [esp+24h+arg_0], edi
jnz     short loc_4092fd
mov     edi, [esp+24h+arg_14]
mov     [esp+24h+var_10], ecx
jmp     short loc_409338
xor     ecx, ecx
mov     cl, [esi+1]
shr     edx, cl
sub     eax, ecx
mov     cl, [esi+4]
mov     esi, [esp+24h+var_10]
mov     [esi], cl
mov     ecx, [esp+24h+var_c]
inc     esi
dec     ecx
mov     [esp+24h+var_10], esi
mov     [esp+24h+var_c], ecx
mov     ecx, [esp+24h+var_c]
mov     ebx, [esp+24h+var_14]
cmp     ecx, 102h
jb      short loc_409374
cmp     ebx, 0ah
jb      short loc_409374
jmp     loc_40913c
mov     ecx, [edi+4]
mov     ebx, [esp+24h+var_14]
mov     esi, eax
sub     ecx, ebx
shr     esi, 3
cmp     esi, ecx
mov     dword ptr [edi+18h], offset ainvaliddistanc
jnb     loc_409431
jmp     loc_40942f
mov     ecx, [edi+4]
mov     esi, eax
sub     ecx, ebx
shr     esi, 3
cmp     esi, ecx
jnb     short loc_409384
mov     ecx, esi
mov     esi, [esp+24h+arg_10]
sub     ebp, ecx
mov     [esi+20h], edx
lea     edx, ds:0[ecx*8]
sub     eax, edx
add     ecx, ebx
mov     [esi+1ch], eax
mov     edx, [edi]
mov     eax, ebp
mov     [edi+4], ecx
mov     ecx, [edi+8]
sub     eax, edx
add     ecx, eax
mov     [edi], ebp
mov     [edi+8], ecx
mov     ecx, [esp+24h+var_10]
mov     [esi+34h], ecx
pop     edi
pop     esi
pop     ebp
xor     eax, eax
pop     ebx
add     esp, 14h
retn
test    bl, 20h
jz      short loc_409416
mov     ecx, [edi+4]
mov     ebx, [esp+24h+var_14]
mov     esi, eax
sub     ecx, ebx
shr     esi, 3
cmp     esi, ecx
jnb     short loc_4093d8
mov     ecx, esi
mov     esi, [esp+24h+arg_10]
sub     ebp, ecx
mov     [esi+20h], edx
lea     edx, ds:0[ecx*8]
sub     eax, edx
add     ecx, ebx
mov     [esi+1ch], eax
mov     edx, [edi]
mov     eax, ebp
mov     [edi+4], ecx
mov     ecx, [edi+8]
sub     eax, edx
add     ecx, eax
mov     [edi], ebp
mov     [edi+8], ecx
mov     ecx, [esp+24h+var_10]
mov     [esi+34h], ecx
pop     edi
pop     esi
pop     ebp
mov     eax, 1
pop     ebx
add     esp, 14h
retn
mov     ecx, [edi+4]
mov     ebx, [esp+24h+var_14]
mov     esi, eax
sub     ecx, ebx
shr     esi, 3
cmp     esi, ecx
mov     dword ptr [edi+18h], offset ainvalidliteral
jnb     short loc_409431
mov     ecx, esi
mov     esi, [esp+24h+arg_10]
sub     ebp, ecx
mov     [esi+20h], edx
lea     edx, ds:0[ecx*8]
sub     eax, edx
add     ecx, ebx
mov     [esi+1ch], eax
mov     edx, [edi]
mov     eax, ebp
mov     [edi+4], ecx
mov     ecx, [edi+8]
sub     eax, edx
add     ecx, eax
mov     [edi], ebp
mov     [edi+8], ecx
mov     ecx, [esp+24h+var_10]
mov     [esi+34h], ecx
pop     edi
pop     esi
pop     ebp
mov     eax, 0fffffffdh
pop     ebx
add     esp, 14h
retn
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset stru_415310
push    offset __except_handler3
mov     eax, large fs:0
push    eax
mov     large fs:0, esp
sub     esp, 18h
push    ebx
push    esi
push    edi
mov     esi, [ebp+lpmem]
test    esi, esi
jz      loc_409675
mov     eax, dword_41ca64
cmp     eax, 3
jnz     short loc_40960e
push    9
call    __lock
pop     ecx
and     [ebp+ms_exc.registration.trylevel], 0
push    esi
call    ___sbh_find_block
pop     ecx
mov     [ebp+var_1c], eax
test    eax, eax
jz      short loc_4095f6
push    esi
push    eax
call    sub_40b0e4
pop     ecx
pop     ecx
or      [ebp+ms_exc.registration.trylevel], 0ffffffffh
call    loc_409605
cmp     [ebp+var_1c], 0
jmp     short loc_409656
push    9
call    __unlock
pop     ecx
retn
cmp     eax, 2
jnz     short loc_409666
push    9
call    __lock
pop     ecx
mov     [ebp+ms_exc.registration.trylevel], 1
lea     eax, [ebp+var_20]
push    eax
lea     eax, [ebp+var_28]
push    eax
push    esi
call    sub_40be14
add     esp, 0ch
mov     [ebp+var_24], eax
test    eax, eax
jz      short loc_409649
push    eax
push    [ebp+var_20]
push    [ebp+var_28]
call    sub_40be6b
add     esp, 0ch
or      [ebp+ms_exc.registration.trylevel], 0ffffffffh
call    loc_40965d
cmp     [ebp+var_24], 0
jnz     short loc_409675
push    [ebp+lpmem]
jmp     short loc_409667
push    9
call    __unlock
pop     ecx
retn
push    esi
push    0
push    hheap
call    ds:heapfree
mov     ecx, [ebp+ms_exc.registration.next]
mov     large fs:0, ecx
pop     edi
pop     esi
pop     ebx
leave
retn
push    1
call    _flsall
pop     ecx
retn
push    ebp
mov     ebp, esp
push    esi
push    [ebp+stream]
call    __lock_file
push    [ebp+stream]
push    [ebp+elementcount]
push    [ebp+elementsize]
push    [ebp+buffer]
call    _fread
push    [ebp+stream]
mov     esi, eax
call    __unlock_file
add     esp, 18h
mov     eax, esi
pop     esi
pop     ebp
retn
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset stru_415328
push    offset __except_handler3
mov     eax, large fs:0
push    eax
mov     large fs:0, esp
sub     esp, 28h
push    ebx
push    esi
push    edi
mov     ebx, [ebp+lpmem]
xor     edi, edi
cmp     ebx, edi
jnz     short loc_409cfa
push    [ebp+dwbytes]
call    _malloc
pop     ecx
jmp     loc_409fe0
mov     esi, [ebp+dwbytes]
cmp     esi, edi
jnz     short loc_409d0d
push    ebx
call    sub_40959b
pop     ecx
jmp     loc_409fde
mov     eax, dword_41ca64
cmp     eax, 3
jnz     loc_409e54
mov     [ebp+var_24], edi
cmp     esi, 0ffffffe0h
ja      loc_409e18
push    9
call    __lock
pop     ecx
mov     [ebp+ms_exc.registration.trylevel], edi
push    ebx
call    ___sbh_find_block
pop     ecx
mov     [ebp+var_28], eax
cmp     eax, edi
jz      loc_409de8
cmp     esi, dword_41ca5c
ja      short loc_409d98
push    esi
push    ebx
push    eax
call    ___sbh_resize_block
add     esp, 0ch
test    eax, eax
jz      short loc_409d60
mov     [ebp+var_24], ebx
jmp     short loc_409d98
push    esi
call    ___sbh_alloc_block
pop     ecx
mov     [ebp+var_24], eax
cmp     eax, edi
jz      short loc_409d98
mov     eax, [ebx-4]
dec     eax
mov     [ebp+var_20], eax
cmp     eax, esi
jb      short loc_409d7b
mov     eax, esi
push    eax
push    ebx
push    [ebp+var_24]
call    _memcpy
push    ebx
call    ___sbh_find_block
mov     [ebp+var_28], eax
push    ebx
push    eax
call    sub_40b0e4
add     esp, 18h
cmp     [ebp+var_24], edi
jnz     short loc_409de8
cmp     esi, edi
jnz     short loc_409da7
push    1
pop     esi
mov     [ebp+dwbytes], esi
add     esi, 0fh
and     esi, 0fffffff0h
mov     [ebp+dwbytes], esi
push    esi
push    edi
push    hheap
call    ds:heapalloc
mov     [ebp+var_24], eax
cmp     eax, edi
jz      short loc_409de8
mov     eax, [ebx-4]
dec     eax
mov     [ebp+var_20], eax
cmp     eax, esi
jb      short loc_409dd2
mov     eax, esi
push    eax
push    ebx
push    [ebp+var_24]
call    _memcpy
push    ebx
push    [ebp+var_28]
call    sub_40b0e4
add     esp, 14h
or      [ebp+ms_exc.registration.trylevel], 0ffffffffh
call    loc_409e4b
cmp     [ebp+var_28], edi
jnz     short loc_409e18
cmp     esi, edi
jnz     short loc_409dfd
push    1
pop     esi
add     esi, 0fh
and     esi, 0fffffff0h
mov     [ebp+dwbytes], esi
push    esi
push    ebx
push    edi
push    hheap
call    ds:heaprealloc
mov     [ebp+var_24], eax
mov     eax, [ebp+var_24]
cmp     eax, edi
jnz     loc_409fe0
cmp     dword_41b3e8, edi
jz      loc_409fe0
push    esi
call    __callnewh
pop     ecx
test    eax, eax
jnz     loc_409d1b
jmp     loc_409fde
mov     esi, [ebp+dwbytes]
mov     ebx, [ebp+lpmem]
xor     edi, edi
push    9
call    __unlock
pop     ecx
retn
cmp     eax, 2
jnz     loc_409fa4
cmp     esi, 0ffffffe0h
ja      short loc_409e74
cmp     esi, edi
jbe     short loc_409e6e
add     esi, 0fh
and     esi, 0fffffff0h
jmp     short loc_409e71
push    10h
pop     esi
mov     [ebp+dwbytes], esi
mov     [ebp+var_24], edi
cmp     esi, 0ffffffe0h
ja      loc_409f73
push    9
call    __lock
pop     ecx
mov     [ebp+ms_exc.registration.trylevel], 1
lea     eax, [ebp+var_2c]
push    eax
lea     eax, [ebp+var_38]
push    eax
push    ebx
call    sub_40be14
add     esp, 0ch
mov     edi, eax
mov     [ebp+var_30], edi
test    edi, edi
jz      loc_409f57
cmp     esi, dword_41a8ec
jnb     short loc_409f11
mov     ebx, esi
shr     ebx, 4
push    ebx
push    edi
push    [ebp+var_2c]
push    [ebp+var_38]
call    sub_40c1dc
add     esp, 10h
test    eax, eax
jz      short loc_409ed6
mov     eax, [ebp+lpmem]
mov     [ebp+var_24], eax
jmp     short loc_409f0e
push    ebx
call    sub_40beb0
pop     ecx
mov     [ebp+var_24], eax
test    eax, eax
jz      short loc_409f0e
movzx   eax, byte ptr [edi]
shl     eax, 4
mov     [ebp+var_34], eax
cmp     eax, esi
jb      short loc_409ef3
mov     eax, esi
push    eax
push    [ebp+lpmem]
push    [ebp+var_24]
call    _memcpy
push    edi
push    [ebp+var_2c]
push    [ebp+var_38]
call    sub_40be6b
add     esp, 18h
mov     ebx, [ebp+lpmem]
cmp     [ebp+var_24], 0
jnz     short loc_409f6a
push    esi
push    0
push    hheap
call    ds:heapalloc
mov     [ebp+var_24], eax
test    eax, eax
jz      short loc_409f6a
movzx   eax, byte ptr [edi]
shl     eax, 4
mov     [ebp+var_34], eax
cmp     eax, esi
jb      short loc_409f3c
mov     eax, esi
push    eax
push    ebx
push    [ebp+var_24]
call    _memcpy
push    edi
push    [ebp+var_2c]
push    [ebp+var_38]
call    sub_40be6b
add     esp, 18h
jmp     short loc_409f6a
push    esi
push    ebx
push    0
push    hheap
call    ds:heaprealloc
mov     [ebp+var_24], eax
or      [ebp+ms_exc.registration.trylevel], 0ffffffffh
call    loc_409f99
mov     eax, [ebp+var_24]
cmp     eax, edi
jnz     short loc_409fe0
cmp     dword_41b3e8, edi
jz      short loc_409fe0
push    esi
call    __callnewh
pop     ecx
test    eax, eax
jnz     loc_409e74
jmp     short loc_409fde
mov     esi, [ebp+dwbytes]
mov     ebx, [ebp+lpmem]
push    9
call    __unlock
pop     ecx
xor     edi, edi
retn
xor     eax, eax
cmp     esi, 0ffffffe0h
ja      short loc_409fc7
cmp     esi, edi
jnz     short loc_409fb2
push    1
pop     esi
add     esi, 0fh
and     esi, 0fffffff0h
push    esi
push    ebx
push    edi
push    hheap
call    ds:heaprealloc
cmp     eax, edi
jnz     short loc_409fe0
cmp     dword_41b3e8, edi
jz      short loc_409fe0
push    esi
call    __callnewh
pop     ecx
test    eax, eax
jnz     short loc_409fa4
xor     eax, eax
mov     ecx, [ebp+ms_exc.registration.next]
mov     large fs:0, ecx
pop     edi
pop     esi
pop     ebx
leave
retn
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset stru_415340
push    offset __except_handler3
mov     eax, large fs:0
push    eax
mov     large fs:0, esp
sub     esp, 18h
push    ebx
push    esi
push    edi
mov     esi, [ebp+arg_0]
imul    esi, [ebp+arg_4]
mov     [ebp+arg_4], esi
mov     [ebp+var_1c], esi
cmp     esi, 0ffffffe0h
ja      short loc_40a038
xor     ebx, ebx
cmp     esi, ebx
jnz     short loc_40a02d
push    1
pop     esi
add     esi, 0fh
and     esi, 0fffffff0h
mov     [ebp+arg_4], esi
jmp     short loc_40a03a
xor     ebx, ebx
mov     [ebp+var_20], ebx
cmp     esi, 0ffffffe0h
ja      loc_40a0ee
mov     eax, dword_41ca64
cmp     eax, 3
jnz     short loc_40a091
mov     edi, [ebp+var_1c]
cmp     edi, dword_41ca5c
ja      short loc_40a0d7
push    9
call    __lock
pop     ecx
mov     [ebp+ms_exc.registration.trylevel], ebx
push    edi
call    ___sbh_alloc_block
pop     ecx
mov     [ebp+var_20], eax
or      [ebp+ms_exc.registration.trylevel], 0ffffffffh
call    loc_40a088
cmp     [ebp+var_20], ebx
jz      short loc_40a0dc
push    [ebp+var_1c]
jmp     short loc_40a0cb
xor     ebx, ebx
mov     esi, [ebp+arg_4]
push    9
call    __unlock
pop     ecx
retn
cmp     eax, 2
jnz     short loc_40a0d7
cmp     esi, dword_41a8ec
ja      short loc_40a0d7
push    9
call    __lock
pop     ecx
mov     [ebp+ms_exc.registration.trylevel], 1
mov     eax, esi
shr     eax, 4
push    eax
call    sub_40beb0
pop     ecx
mov     [ebp+var_20], eax
or      [ebp+ms_exc.registration.trylevel], 0ffffffffh
call    loc_40a111
cmp     [ebp+var_20], ebx
jz      short loc_40a0dc
push    esi
push    ebx
push    [ebp+var_20]
call    _memset
add     esp, 0ch
cmp     [ebp+var_20], ebx
jnz     short loc_40a11a
push    esi
push    8
push    hheap
call    ds:heapalloc
mov     [ebp+var_20], eax
cmp     [ebp+var_20], ebx
jnz     short loc_40a11a
cmp     dword_41b3e8, ebx
jz      short loc_40a11a
push    esi
call    __callnewh
pop     ecx
test    eax, eax
jnz     loc_40a03a
jmp     short loc_40a11d
xor     ebx, ebx
mov     esi, [ebp+arg_4]
push    9
call    __unlock
pop     ecx
retn
mov     eax, [ebp+var_20]
mov     ecx, [ebp+ms_exc.registration.next]
mov     large fs:0, ecx
pop     edi
pop     esi
pop     ebx
leave
retn
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset stru_415358
push    offset __except_handler3
mov     eax, large fs:0
push    eax
mov     large fs:0, esp
sub     esp, 0ch
push    ebx
push    esi
push    edi
mov     eax, dword_41ca64
cmp     eax, 3
jnz     short loc_40a513
mov     esi, [ebp+arg_0]
cmp     esi, dword_41ca5c
ja      loc_40a572
push    9
call    __lock
pop     ecx
and     [ebp+ms_exc.registration.trylevel], 0
push    esi
call    ___sbh_alloc_block
pop     ecx
mov     [ebp+var_1c], eax
or      [ebp+ms_exc.registration.trylevel], 0ffffffffh
call    loc_40a50a
mov     eax, [ebp+var_1c]
test    eax, eax
jz      short loc_40a572
jmp     loc_40a590
push    9
call    __unlock
pop     ecx
retn
cmp     eax, 2
jnz     short loc_40a572
mov     eax, [ebp+arg_0]
test    eax, eax
jz      short loc_40a527
lea     esi, [eax+0fh]
and     esi, 0fffffff0h
jmp     short loc_40a52a
push    10h
pop     esi
mov     [ebp+arg_0], esi
cmp     esi, dword_41a8ec
ja      short loc_40a563
push    9
call    __lock
pop     ecx
mov     [ebp+ms_exc.registration.trylevel], 1
mov     eax, esi
shr     eax, 4
push    eax
call    sub_40beb0
pop     ecx
mov     [ebp+var_1c], eax
or      [ebp+ms_exc.registration.trylevel], 0ffffffffh
call    loc_40a569
mov     eax, [ebp+var_1c]
test    eax, eax
jnz     short loc_40a590
push    esi
jmp     short loc_40a582
mov     esi, [ebp+arg_0]
push    9
call    __unlock
pop     ecx
retn
mov     eax, [ebp+arg_0]
test    eax, eax
jnz     short loc_40a57c
push    1
pop     eax
add     eax, 0fh
and     al, 0f0h
push    eax
push    0
push    hheap
call    ds:heapalloc
mov     ecx, [ebp+ms_exc.registration.next]
mov     large fs:0, ecx
pop     edi
pop     esi
pop     ebx
leave
retn
retn
push    esi
mov     esi, [esp+4+arg_0]
push    0
and     dword ptr [esi], 0
call    ds:getmodulehandlea
cmp     word ptr [eax], 5a4dh
jnz     short loc_40aeca
mov     ecx, [eax+3ch]
test    ecx, ecx
jz      short loc_40aeca
add     eax, ecx
mov     cl, [eax+1ah]
mov     [esi], cl
mov     al, [eax+1bh]
mov     [esi+1], al
pop     esi
retn
push    ebp
mov     ebp, esp
mov     eax, 122ch
call    __alloca_probe
lea     eax, [ebp+versioninformation]
push    ebx
push    eax
mov     [ebp+versioninformation.dwosversioninfosize], 94h
call    ds:getversionexa
test    eax, eax
jz      short loc_40af0f
cmp     [ebp+versioninformation.dwplatformid], 2
jnz     short loc_40af0f
cmp     [ebp+versioninformation.dwmajorversion], 5
jb      short loc_40af0f
push    1
pop     eax
jmp     loc_40b011
lea     eax, [ebp+buffer]
push    1090h
push    eax
push    offset name
call    ds:getenvironmentvariablea
test    eax, eax
jz      loc_40affe
xor     ebx, ebx
lea     ecx, [ebp+buffer]
cmp     [ebp+buffer], bl
jz      short loc_40af51
mov     al, [ecx]
cmp     al, 61h
jl      short loc_40af4c
cmp     al, 7ah
jg      short loc_40af4c
sub     al, 20h
mov     [ecx], al
inc     ecx
cmp     [ecx], bl
jnz     short loc_40af3e
lea     eax, [ebp+buffer]
push    16h
push    eax
push    offset str1
call    _strncmp
add     esp, 0ch
test    eax, eax
jnz     short loc_40af73
lea     eax, [ebp+buffer]
jmp     short loc_40afbc
lea     eax, [ebp+filename]
push    104h
push    eax
push    ebx
call    ds:getmodulefilenamea
cmp     [ebp+filename], bl
lea     ecx, [ebp+filename]
jz      short loc_40afa7
mov     al, [ecx]
cmp     al, 61h
jl      short loc_40afa2
cmp     al, 7ah
jg      short loc_40afa2
sub     al, 20h
mov     [ecx], al
inc     ecx
cmp     [ecx], bl
jnz     short loc_40af94
lea     eax, [ebp+filename]
push    eax
lea     eax, [ebp+buffer]
push    eax
call    _strstr
pop     ecx
pop     ecx
cmp     eax, ebx
jz      short loc_40affe
push    2ch
push    eax
call    _strchr
pop     ecx
cmp     eax, ebx
pop     ecx
jz      short loc_40affe
inc     eax
mov     ecx, eax
cmp     [eax], bl
jz      short loc_40afe3
cmp     byte ptr [ecx], 3bh
jnz     short loc_40afde
mov     [ecx], bl
jmp     short loc_40afdf
inc     ecx
cmp     [ecx], bl
jnz     short loc_40afd5
push    0ah
push    ebx
push    eax
call    _strtol
add     esp, 0ch
cmp     eax, 2
jz      short loc_40b011
cmp     eax, 3
jz      short loc_40b011
cmp     eax, 1
jz      short loc_40b011
lea     eax, [ebp+var_4]
push    eax
call    sub_40ae9f
cmp     [ebp+var_4], 6
pop     ecx
sbb     eax, eax
add     eax, 3
pop     ebx
leave
retn
xor     eax, eax
push    0
cmp     [esp+4+arg_0], eax
push    1000h
setz    al
push    eax
call    ds:heapcreate
test    eax, eax
mov     hheap, eax
jz      short loc_40b06a
call    sub_40aecc
cmp     eax, 3
mov     dword_41ca64, eax
jnz     short loc_40b050
push    3f8h
call    ___sbh_heap_init
pop     ecx
jmp     short loc_40b05a
cmp     eax, 2
jnz     short loc_40b06d
call    sub_40bbb8
test    eax, eax
jnz     short loc_40b06d
push    hheap
call    ds:heapdestroy
xor     eax, eax
retn
push    1
pop     eax
retn
push    ebp
mov     ebp, esp
sub     esp, 10h
mov     ecx, [ebp+arg_0]
push    ebx
push    esi
mov     esi, [ebp+arg_4]
mov     eax, [ecx+10h]
push    edi
mov     edi, esi
add     esi, 0fffffffch
sub     edi, [ecx+0ch]
shr     edi, 0fh
mov     ecx, edi
imul    ecx, 204h
lea     ecx, [ecx+eax+144h]
mov     [ebp+var_10], ecx
mov     ecx, [esi]
dec     ecx
test    cl, 1
mov     [ebp+var_4], ecx
jnz     loc_40b408
mov     edx, [ecx+esi]
lea     ebx, [ecx+esi]
mov     [ebp+var_c], edx
mov     edx, [esi-4]
mov     [ebp+var_8], edx
mov     edx, [ebp+var_c]
test    dl, 1
mov     [ebp+arg_4], ebx
jnz     short loc_40b1ba
sar     edx, 4
dec     edx
cmp     edx, 3fh
jbe     short loc_40b148
push    3fh
pop     edx
mov     ecx, [ebx+4]
cmp     ecx, [ebx+8]
jnz     short loc_40b19c
cmp     edx, 20h
jnb     short loc_40b173
mov     ebx, 80000000h
mov     ecx, edx
shr     ebx, cl
lea     ecx, [edx+eax+4]
not     ebx
and     [eax+edi*4+44h], ebx
dec     byte ptr [ecx]
jnz     short loc_40b194
mov     ecx, [ebp+arg_0]
and     [ecx], ebx
jmp     short loc_40b194
lea     ecx, [edx-20h]
mov     ebx, 80000000h
shr     ebx, cl
lea     ecx, [edx+eax+4]
not     ebx
and     [eax+edi*4+0c4h], ebx
dec     byte ptr [ecx]
jnz     short loc_40b194
mov     ecx, [ebp+arg_0]
and     [ecx+4], ebx
mov     ecx, [ebp+var_4]
mov     ebx, [ebp+arg_4]
jmp     short loc_40b19f
mov     ecx, [ebp+var_4]
mov     edx, [ebx+8]
mov     ebx, [ebx+4]
add     ecx, [ebp+var_c]
mov     [edx+4], ebx
mov     edx, [ebp+arg_4]
mov     [ebp+var_4], ecx
mov     ebx, [edx+4]
mov     edx, [edx+8]
mov     [ebx+8], edx
mov     edx, ecx
sar     edx, 4
dec     edx
cmp     edx, 3fh
jbe     short loc_40b1c8
push    3fh
pop     edx
mov     ebx, [ebp+var_8]
and     ebx, 1
mov     [ebp+var_c], ebx
jnz     loc_40b26b
sub     esi, [ebp+var_8]
mov     ebx, [ebp+var_8]
sar     ebx, 4
push    3fh
mov     [ebp+arg_4], esi
dec     ebx
pop     esi
cmp     ebx, esi
jbe     short loc_40b1ed
mov     ebx, esi
add     ecx, [ebp+var_8]
mov     edx, ecx
mov     [ebp+var_4], ecx
sar     edx, 4
dec     edx
cmp     edx, esi
jbe     short loc_40b1ff
mov     edx, esi
cmp     ebx, edx
jz      short loc_40b266
mov     ecx, [ebp+arg_4]
mov     esi, [ecx+4]
cmp     esi, [ecx+8]
jnz     short loc_40b24e
cmp     ebx, 20h
jnb     short loc_40b22f
mov     esi, 80000000h
mov     ecx, ebx
shr     esi, cl
not     esi
and     [eax+edi*4+44h], esi
dec     byte ptr [ebx+eax+4]
jnz     short loc_40b24e
mov     ecx, [ebp+arg_0]
and     [ecx], esi
jmp     short loc_40b24e
lea     ecx, [ebx-20h]
mov     esi, 80000000h
shr     esi, cl
not     esi
and     [eax+edi*4+0c4h], esi
dec     byte ptr [ebx+eax+4]
jnz     short loc_40b24e
mov     ecx, [ebp+arg_0]
and     [ecx+4], esi
mov     ecx, [ebp+arg_4]
mov     esi, [ecx+8]
mov     ecx, [ecx+4]
mov     [esi+4], ecx
mov     ecx, [ebp+arg_4]
mov     esi, [ecx+4]
mov     ecx, [ecx+8]
mov     [esi+8], ecx
mov     esi, [ebp+arg_4]
jmp     short loc_40b26e
mov     ebx, [ebp+arg_0]
cmp     [ebp+var_c], 0
jnz     short loc_40b27c
cmp     ebx, edx
jz      loc_40b2fd
mov     ecx, [ebp+var_10]
mov     ebx, [ecx+edx*8+4]
lea     ecx, [ecx+edx*8]
mov     [esi+4], ebx
mov     [esi+8], ecx
mov     [ecx+4], esi
mov     ecx, [esi+4]
mov     [ecx+8], esi
mov     ecx, [esi+4]
cmp     ecx, [esi+8]
jnz     short loc_40b2fd
mov     cl, [edx+eax+4]
cmp     edx, 20h
mov     byte ptr [ebp+arg_4+3], cl
inc     cl
mov     [edx+eax+4], cl
jnb     short loc_40b2d4
cmp     byte ptr [ebp+arg_4+3], 0
jnz     short loc_40b2c3
mov     ebx, 80000000h
mov     ecx, edx
shr     ebx, cl
mov     ecx, [ebp+arg_0]
or      [ecx], ebx
mov     ebx, 80000000h
mov     ecx, edx
shr     ebx, cl
lea     eax, [eax+edi*4+44h]
or      [eax], ebx
jmp     short loc_40b2fd
cmp     byte ptr [ebp+arg_4+3], 0
jnz     short loc_40b2ea
lea     ecx, [edx-20h]
mov     ebx, 80000000h
shr     ebx, cl
mov     ecx, [ebp+arg_0]
or      [ecx+4], ebx
lea     ecx, [edx-20h]
mov     edx, 80000000h
shr     edx, cl
lea     eax, [eax+edi*4+0c4h]
or      [eax], edx
mov     eax, [ebp+var_4]
mov     [esi], eax
mov     [eax+esi-4], eax
mov     eax, [ebp+var_10]
dec     dword ptr [eax]
jnz     loc_40b408
mov     eax, dword_41ca50
test    eax, eax
jz      loc_40b3fa
mov     ecx, dword_41ca48
mov     esi, ds:virtualfree
shl     ecx, 0fh
add     ecx, [eax+0ch]
mov     ebx, 8000h
push    4000h
push    ebx
push    ecx
call    esi
mov     ecx, dword_41ca48
mov     eax, dword_41ca50
mov     edx, 80000000h
shr     edx, cl
or      [eax+8], edx
mov     eax, dword_41ca50
mov     ecx, dword_41ca48
mov     eax, [eax+10h]
and     dword ptr [eax+ecx*4+0c4h], 0
mov     eax, dword_41ca50
mov     eax, [eax+10h]
dec     byte ptr [eax+43h]
mov     eax, dword_41ca50
mov     ecx, [eax+10h]
cmp     byte ptr [ecx+43h], 0
jnz     short loc_40b38b
and     dword ptr [eax+4], 0fffffffeh
mov     eax, dword_41ca50
cmp     dword ptr [eax+8], 0ffffffffh
jnz     short loc_40b3fa
push    ebx
push    0
push    dword ptr [eax+0ch]
call    esi
mov     eax, dword_41ca50
push    dword ptr [eax+10h]
push    0
push    hheap
call    ds:heapfree
mov     eax, dword_41ca54
mov     edx, lpmem
lea     eax, [eax+eax*4]
shl     eax, 2
mov     ecx, eax
mov     eax, dword_41ca50
sub     ecx, eax
lea     ecx, [ecx+edx-14h]
push    ecx
lea     ecx, [eax+14h]
push    ecx
push    eax
call    _memcpy_0
mov     eax, [ebp+arg_0]
add     esp, 0ch
dec     dword_41ca54
cmp     eax, dword_41ca50
jbe     short loc_40b3f0
sub     [ebp+arg_0], 14h
mov     eax, lpmem
mov     dword_41ca4c, eax
mov     eax, [ebp+arg_0]
mov     dword_41ca48, edi
mov     dword_41ca50, eax
pop     edi
pop     esi
pop     ebx
leave
retn
cmp     dword_4188d8, 0ffffffffh
push    ebx
push    ebp
push    esi
push    edi
jnz     short loc_40bbcc
mov     esi, offset off_4188c8
jmp     short loc_40bbe9
push    2020h
push    0
push    hheap
call    ds:heapalloc
mov     esi, eax
test    esi, esi
jz      loc_40bcf5
mov     ebp, ds:virtualalloc
push    4
push    2000h
push    400000h
push    0
call    ebp
mov     edi, eax
test    edi, edi
jz      loc_40bcde
push    4
mov     ebx, 10000h
push    1000h
push    ebx
push    edi
call    ebp
test    eax, eax
jz      loc_40bcd0
mov     eax, offset off_4188c8
cmp     esi, eax
jnz     short loc_40bc48
cmp     off_4188c8, 0
jnz     short loc_40bc38
mov     off_4188c8, eax
cmp     off_4188cc, 0
jnz     short loc_40bc5d
mov     off_4188cc, eax
jmp     short loc_40bc5d
mov     [esi], eax
mov     eax, off_4188cc
mov     [esi+4], eax
mov     off_4188cc, esi
mov     eax, [esi+4]
mov     [eax], esi
lea     eax, [edi+400000h]
lea     ecx, [esi+98h]
mov     [esi+14h], eax
lea     eax, [esi+18h]
mov     [esi+0ch], ecx
mov     [esi+10h], edi
mov     [esi+8], eax
xor     ebp, ebp
mov     ecx, 0f1h
xor     edx, edx
cmp     ebp, 10h
setnl   dl
dec     edx
and     edx, ecx
dec     edx
inc     ebp
mov     [eax], edx
mov     [eax+4], ecx
add     eax, 8
cmp     ebp, 400h
jl      short loc_40bc7f
push    ebx
push    0
push    edi
call    _memset
add     esp, 0ch
mov     eax, [esi+10h]
add     eax, ebx
cmp     edi, eax
jnb     short loc_40bccc
or      byte ptr [edi+0f8h], 0ffh
lea     eax, [edi+8]
mov     [edi], eax
mov     dword ptr [edi+4], 0f0h
add     edi, 1000h
jmp     short loc_40bca8
mov     eax, esi
jmp     short loc_40bcf7
push    8000h
push    0
push    edi
call    ds:virtualfree
cmp     esi, offset off_4188c8
jz      short loc_40bcf5
push    esi
push    0
push    hheap
call    ds:heapfree
xor     eax, eax
pop     edi
pop     esi
pop     ebp
pop     ebx
retn
push    esi
mov     esi, [esp+4+lpmem]
push    8000h
push    0
push    dword ptr [esi+10h]
call    ds:virtualfree
cmp     off_41a8e8, esi
jnz     short loc_40bd21
mov     eax, [esi+4]
mov     off_41a8e8, eax
cmp     esi, offset off_4188c8
jz      short loc_40bd49
mov     eax, [esi+4]
mov     ecx, [esi]
push    esi
push    0
mov     [eax], ecx
mov     eax, [esi]
mov     ecx, [esi+4]
mov     [eax+4], ecx
push    hheap
call    ds:heapfree
pop     esi
retn
or      dword_4188d8, 0ffffffffh
pop     esi
retn
push    ebp
mov     ebp, esp
push    ecx
push    ebx
push    esi
mov     esi, off_4188cc
push    edi
cmp     dword ptr [esi+10h], 0ffffffffh
jz      loc_40bdfd
and     [ebp+var_4], 0
lea     edi, [esi+2010h]
mov     ebx, 3ff000h
cmp     dword ptr [edi], 0f0h
jnz     short loc_40bdb9
mov     eax, ebx
push    4000h
add     eax, [esi+10h]
push    1000h
push    eax
call    ds:virtualfree
test    eax, eax
jz      short loc_40bdb9
or      dword ptr [edi], 0ffffffffh
dec     dword_41b37c
mov     eax, [esi+0ch]
test    eax, eax
jz      short loc_40bdae
cmp     eax, edi
jbe     short loc_40bdb1
mov     [esi+0ch], edi
inc     [ebp+var_4]
dec     [ebp+arg_0]
jz      short loc_40bdc6
sub     ebx, 1000h
sub     edi, 8
test    ebx, ebx
jge     short loc_40bd78
cmp     [ebp+var_4], 0
mov     ecx, esi
mov     esi, [esi+4]
jz      short loc_40bdfd
cmp     dword ptr [ecx+18h], 0ffffffffh
jnz     short loc_40bdfd
push    1
lea     eax, [ecx+20h]
pop     edx
cmp     dword ptr [eax], 0ffffffffh
jnz     short loc_40bdee
inc     edx
add     eax, 8
cmp     edx, 400h
jl      short loc_40bddd
cmp     edx, 400h
jnz     short loc_40bdfd
push    ecx
call    sub_40bcfc
pop     ecx
cmp     esi, off_4188cc
jz      short loc_40be0f
cmp     [ebp+arg_0], 0
jg      loc_40bd5f
pop     edi
pop     esi
pop     ebx
leave
retn
mov     eax, [esp+arg_0]
mov     edx, offset off_4188c8
push    esi
mov     ecx, edx
cmp     eax, [ecx+10h]
jbe     short loc_40be2a
cmp     eax, [ecx+14h]
jb      short loc_40be32
mov     ecx, [ecx]
cmp     ecx, edx
jz      short loc_40be67
jmp     short loc_40be20
test    al, 0fh
jnz     short loc_40be67
mov     esi, eax
mov     edx, 100h
and     esi, 0fffh
cmp     esi, edx
jb      short loc_40be67
mov     esi, [esp+4+arg_4]
mov     [esi], ecx
mov     esi, [esp+4+arg_8]
mov     ecx, eax
and     cx, 0f000h
sub     eax, ecx
mov     [esi], ecx
sub     eax, edx
pop     esi
sar     eax, 4
lea     eax, [eax+ecx+8]
retn
xor     eax, eax
pop     esi
retn
mov     eax, [esp+arg_0]
mov     ecx, [esp+arg_4]
sub     ecx, [eax+10h]
sar     ecx, 0ch
lea     eax, [eax+ecx*8+18h]
mov     ecx, [esp+arg_8]
movzx   edx, byte ptr [ecx]
add     [eax], edx
and     byte ptr [ecx], 0
cmp     dword ptr [eax], 0f0h
mov     dword ptr [eax+4], 0f1h
jnz     short locret_40beaf
inc     dword_41b37c
cmp     dword_41b37c, 20h
jnz     short locret_40beaf
push    10h
call    sub_40bd52
pop     ecx
retn
push    ebp
mov     ebp, esp
push    ecx
push    ecx
push    ebx
push    esi
mov     esi, off_41a8e8
push    edi
mov     edx, [esi+10h]
cmp     edx, 0ffffffffh
jz      loc_40bf69
mov     edi, [esi+8]
lea     ecx, [esi+2018h]
mov     eax, edi
sub     eax, esi
sub     eax, 18h
sar     eax, 3
shl     eax, 0ch
add     eax, edx
cmp     edi, ecx
mov     [ebp+var_4], eax
jnb     short loc_40bf23
mov     ecx, [edi]
mov     ebx, [ebp+arg_0]
cmp     ecx, ebx
jl      short loc_40bf0c
cmp     [edi+4], ebx
jbe     short loc_40bf0c
push    ebx
push    ecx
push    eax
call    sub_40c0b8
add     esp, 0ch
test    eax, eax
jnz     short loc_40bf7b
mov     eax, [ebp+var_4]
mov     [edi+4], ebx
add     edi, 8
lea     ecx, [esi+2018h]
add     eax, 1000h
cmp     edi, ecx
mov     [ebp+var_4], eax
jb      short loc_40bee9
jmp     short loc_40bf26
mov     ebx, [ebp+arg_0]
mov     eax, [esi+8]
mov     ecx, [esi+10h]
lea     edi, [esi+18h]
mov     [ebp+val], eax
cmp     edi, eax
mov     [ebp+var_4], ecx
jnb     short loc_40bf6c
mov     eax, [edi]
cmp     eax, ebx
jl      short loc_40bf58
cmp     [edi+4], ebx
jbe     short loc_40bf58
push    ebx
push    eax
push    [ebp+var_4]
call    sub_40c0b8
add     esp, 0ch
test    eax, eax
jnz     short loc_40bf7b
mov     [edi+4], ebx
add     [ebp+var_4], 1000h
add     edi, 8
cmp     edi, [ebp+val]
jb      short loc_40bf39
jmp     short loc_40bf6c
mov     ebx, [ebp+arg_0]
mov     esi, [esi]
cmp     esi, off_41a8e8
jz      short loc_40bf8b
jmp     loc_40bebe
mov     off_41a8e8, esi
sub     [edi], ebx
mov     [esi+8], edi
jmp     loc_40c0b3
mov     eax, offset off_4188c8
mov     edi, eax
cmp     dword ptr [edi+10h], 0ffffffffh
jz      short loc_40bf9e
cmp     dword ptr [edi+0ch], 0
jnz     short loc_40bfaa
mov     edi, [edi]
cmp     edi, eax
jz      loc_40c07f
jmp     short loc_40bf92
mov     ebx, [edi+0ch]
and     [ebp+var_4], 0
mov     esi, ebx
mov     eax, ebx
sub     esi, edi
sub     esi, 18h
sar     esi, 3
shl     esi, 0ch
add     esi, [edi+10h]
cmp     dword ptr [ebx], 0ffffffffh
jnz     short loc_40bfd9
cmp     [ebp+var_4], 10h
jge     short loc_40bfd9
add     eax, 8
inc     [ebp+var_4]
cmp     dword ptr [eax], 0ffffffffh
jz      short loc_40bfc8
mov     eax, [ebp+var_4]
push    4
shl     eax, 0ch
push    1000h
push    eax
push    esi
mov     [ebp+val], eax
call    ds:virtualalloc
cmp     eax, esi
jnz     loc_40c0b1
push    0
push    [ebp+val]
push    esi
call    _memset
mov     edx, [ebp+var_4]
add     esp, 0ch
test    edx, edx
mov     ecx, ebx
jle     short loc_40c040
lea     eax, [esi+4]
mov     [ebp+var_4], edx
or      byte ptr [eax+0f4h], 0ffh
lea     edx, [eax+4]
mov     [eax-4], edx
mov     edx, 0f0h
mov     [eax], edx
mov     [ecx], edx
mov     dword ptr [ecx+4], 0f1h
add     eax, 1000h
add     ecx, 8
dec     [ebp+var_4]
jnz     short loc_40c016
mov     off_41a8e8, edi
lea     eax, [edi+2018h]
cmp     ecx, eax
jnb     short loc_40c05c
cmp     dword ptr [ecx], 0ffffffffh
jz      short loc_40c05a
add     ecx, 8
jmp     short loc_40c04c
cmp     ecx, eax
sbb     eax, eax
and     eax, ecx
mov     [edi+0ch], eax
mov     eax, [ebp+arg_0]
mov     [esi+8], al
mov     [edi+8], ebx
sub     [ebx], eax
sub     [esi+4], eax
lea     ecx, [esi+eax+8]
lea     eax, [esi+100h]
mov     [esi], ecx
jmp     short loc_40c0b3
call    sub_40bbb8
test    eax, eax
jz      short loc_40c0b1
mov     ecx, [eax+10h]
mov     [ecx+8], bl
lea     edx, [ecx+ebx+8]
mov     off_41a8e8, eax
mov     [ecx], edx
mov     edx, 0f0h
sub     edx, ebx
mov     [ecx+4], edx
movzx   edx, bl
sub     [eax+18h], edx
lea     eax, [ecx+100h]
jmp     short loc_40c0b3
xor     eax, eax
pop     edi
pop     esi
pop     ebx
leave
retn
push    ebp
mov     ebp, esp
push    ecx
mov     ecx, [ebp+arg_0]
mov     edx, [ebp+arg_8]
push    ebx
push    esi
mov     esi, [ecx+4]
push    edi
mov     edi, [ecx]
lea     ebx, [ecx+0f8h]
cmp     esi, edx
mov     [ebp+var_4], edi
mov     eax, edi
mov     [ebp+arg_0], ebx
jb      short loc_40c0fd
lea     eax, [edi+edx]
mov     [edi], dl
cmp     eax, ebx
jnb     short loc_40c0ec
add     [ecx], edx
sub     [ecx+4], edx
jmp     short loc_40c0f5
and     dword ptr [ecx+4], 0
lea     eax, [ecx+8]
mov     [ecx], eax
lea     eax, [edi+8]
jmp     loc_40c1cb
add     esi, edi
cmp     byte ptr [esi], 0
jz      short loc_40c106
mov     eax, esi
lea     esi, [eax+edx]
cmp     esi, ebx
jnb     short loc_40c150
mov     bl, [eax]
test    bl, bl
jnz     short loc_40c143
push    1
lea     ebx, [eax+1]
pop     esi
cmp     byte ptr [ebx], 0
jnz     short loc_40c122
inc     ebx
inc     esi
jmp     short loc_40c119
cmp     esi, edx
jnb     short loc_40c174
cmp     eax, [ebp+var_4]
jnz     short loc_40c130
mov     [ecx+4], esi
jmp     short loc_40c13c
sub     [ebp+arg_4], esi
cmp     [ebp+arg_4], edx
jb      loc_40c1d5
mov     edi, [ebp+var_4]
mov     eax, ebx
jmp     short loc_40c148
movzx   esi, bl
add     eax, esi
lea     esi, [eax+edx]
cmp     esi, [ebp+arg_0]
jb      short loc_40c10d
lea     esi, [ecx+8]
cmp     esi, edi
jnb     short loc_40c1d5
lea     eax, [esi+edx]
cmp     eax, [ebp+arg_0]
jnb     short loc_40c1d5
mov     al, [esi]
test    al, al
jnz     short loc_40c1a5
push    1
lea     ebx, [esi+1]
pop     eax
cmp     byte ptr [ebx], 0
jnz     short loc_40c195
inc     ebx
inc     eax
jmp     short loc_40c16b
lea     ebx, [eax+edx]
cmp     ebx, [ebp+arg_0]
jnb     short loc_40c185
sub     esi, edx
mov     [ecx], ebx
mov     [ecx+4], esi
jmp     short loc_40c18e
and     dword ptr [ecx+4], 0
lea     esi, [ecx+8]
mov     [ecx], esi
mov     [eax], dl
add     eax, 8
jmp     short loc_40c1cb
cmp     eax, edx
jnb     short loc_40c1ac
sub     [ebp+arg_4], eax
cmp     [ebp+arg_4], edx
jb      short loc_40c1d5
mov     esi, ebx
jmp     short loc_40c153
movzx   eax, al
add     esi, eax
jmp     short loc_40c153
lea     ebx, [esi+edx]
cmp     ebx, [ebp+arg_0]
jnb     short loc_40c1bd
sub     eax, edx
mov     [ecx], ebx
mov     [ecx+4], eax
jmp     short loc_40c1c6
and     dword ptr [ecx+4], 0
lea     eax, [ecx+8]
mov     [ecx], eax
mov     [esi], dl
lea     eax, [esi+8]
imul    ecx, 0fh
shl     eax, 4
sub     eax, ecx
jmp     short loc_40c1d7
xor     eax, eax
pop     edi
pop     esi
pop     ebx
leave
retn
push    ebp
mov     ebp, esp
push    ecx
mov     edx, [ebp+arg_8]
push    ebx
mov     ebx, [ebp+arg_4]
push    esi
movzx   ecx, byte ptr [edx]
push    edi
mov     edi, [ebp+arg_0]
and     [ebp+var_4], 0
mov     eax, ebx
sub     eax, [edi+10h]
sar     eax, 0ch
cmp     ecx, [ebp+arg_c]
lea     edi, [edi+eax*8+18h]
jbe     short loc_40c216
mov     eax, [ebp+arg_c]
sub     ecx, eax
mov     [edx], al
add     [edi], ecx
mov     dword ptr [edi+4], 0f1h
jmp     short loc_40c276
jnb     short loc_40c27d
mov     eax, [ebp+arg_c]
lea     esi, [edx+eax]
lea     eax, [ebx+0f8h]
cmp     eax, esi
jb      short loc_40c27d
lea     eax, [ecx+edx]
cmp     eax, esi
jnb     short loc_40c239
cmp     byte ptr [eax], 0
jnz     short loc_40c237
inc     eax
jmp     short loc_40c22b
cmp     eax, esi
jnz     short loc_40c27d
mov     al, byte ptr [ebp+arg_c]
mov     [edx], al
mov     eax, [ebx]
cmp     edx, eax
ja      short loc_40c271
cmp     esi, eax
jbe     short loc_40c271
lea     eax, [ebx+0f8h]
cmp     esi, eax
jnb     short loc_40c268
xor     eax, eax
mov     [ebx], esi
cmp     [esi], al
jnz     short loc_40c263
inc     eax
cmp     byte ptr [esi+eax], 0
jz      short loc_40c25c
mov     [ebx+4], eax
jmp     short loc_40c271
and     dword ptr [ebx+4], 0
lea     eax, [ebx+8]
mov     [ebx], eax
sub     ecx, [ebp+arg_c]
add     [edi], ecx
mov     [ebp+var_4], 1
mov     eax, [ebp+var_4]
pop     edi
pop     esi
pop     ebx
leave
retn
push    esi
inc     ebx
xor     dh, [eax]
pop     eax
inc     ebx
xor     [eax], dh
pop     edi
retn