mov     eax, 80004005h
retn    20h
sub     esp, 404h
mov     eax, ___security_cookie
xor     eax, esp
mov     [esp+404h+var_4], eax
mov     ecx, [esp+404h+format]
lea     eax, [esp+404h+arglist]
push    eax
push    ecx
lea     edx, [esp+40ch+buffer]
push    edx
call    ds:vsprintf
add     esp, 0ch
lea     eax, [esp+404h+buffer]
push    eax
call    ds:outputdebugstringa
mov     ecx, [esp+404h+var_4]
xor     ecx, esp
call    @__security_check_cookie@4
add     esp, 404h
retn
push    ebx
mov     ebx, [esp+4+arg_0]
push    esi
push    edi
push    offset aout
push    eax
push    ecx
push    0
mov     ecx, ebx
call    sub_10002740
mov     dword ptr [ebx], offset ??_7cfilterstreamvideo@@6b@
mov     dword ptr [ebx+48h], offset ??_7cfilterstreamvideo@@6b@_0
mov     dword ptr [ebx+54h], offset ??_7cfilterstreamvideo@@6b@_1
mov     dword ptr [ebx+58h], offset ??_7cfilterstreamvideo@@6b@_2
mov     dword ptr [ebx+0f0h], 0
call    sub_10001920
mov     esi, lpbaseaddress
mov     ecx, 102h
mov     edi, offset dword_1000d6d8
rep movsd
pop     edi
pop     esi
mov     eax, ebx
pop     ebx
retn    4
push    esi
mov     esi, ecx
mov     dword ptr [esi], offset ??_7cfilterstreamvideo@@6b@
mov     dword ptr [esi+48h], offset ??_7cfilterstreamvideo@@6b@_0
mov     dword ptr [esi+54h], offset ??_7cfilterstreamvideo@@6b@_1
mov     dword ptr [esi+58h], offset ??_7cfilterstreamvideo@@6b@_2
call    sub_100019d0
mov     ecx, esi
call    sub_10002850
test    [esp+4+arg_0], 1
jz      short loc_1000110a
push    esi
call    ??3@yaxpax@z
add     esp, 4
mov     eax, esi
pop     esi
retn    4
push    0ffffffffh
push    offset seh_10001110
mov     eax, large fs:0
push    eax
sub     esp, 0ch
push    ebx
push    ebp
push    esi
push    edi
mov     eax, ___security_cookie
xor     eax, esp
push    eax
lea     eax, [esp+2ch+var_c]
mov     large fs:0, eax
mov     edx, ecx
mov     esi, lpbaseaddress
mov     ecx, 102h
mov     edi, offset dword_1000d6d8
rep movsd
mov     eax, dword_1000d994
xor     ebp, ebp
cmp     eax, ebp
jnz     short loc_1000115b
mov     eax, dword_1000d90c
mov     dword_1000d2e0, eax
mov     eax, dword_1000d998
cmp     eax, ebp
jnz     short loc_10001177
mov     ecx, dword_1000d910
mov     dword_1000d2e4, ecx
jmp     short loc_1000117c
mov     dword_1000d2e4, eax
fld     flt_1000d934
mov     ebx, [edx+0e8h]
fdivr   ds:dbl_1000a850
movss   xmm0, flt_1000d934
add     ebx, 58h
push    ebx
movss   dword_1000d2e8, xmm0
fnstcw  [esp+30h+var_16]
movzx   eax, [esp+30h+var_16]
or      eax, 0c00h
mov     dword ptr [esp+30h+var_14], eax
fldcw   word ptr [esp+30h+var_14]
fistp   [esp+30h+var_14]
mov     eax, dword ptr [esp+30h+var_14]
mov     dword_1000dae0, eax
mov     dword ptr [esp+30h+var_14], ebx
fldcw   [esp+30h+var_16]
call    ds:entercriticalsection
mov     edi, [esp+2ch+arg_0]
mov     [esp+2ch+var_4], ebp
cmp     edi, ebp
jnz     short loc_100011f0
push    ebx
call    ds:leavecriticalsection
mov     eax, 80004003h
jmp     loc_100012e5
push    58h
mov     ecx, edi
call    sub_10003410
mov     esi, eax
cmp     esi, ebp
jnz     short loc_10001210
push    ebx
call    ds:leavecriticalsection
mov     eax, 8007000eh
jmp     loc_100012e5
push    30h
push    ebp
push    esi
call    memset
fld     dword_1000d2e8
fdivr   ds:dbl_1000a848
mov     ecx, dword_1000d2e4
add     esp, 0ch
mov     [esi+24h], ebp
imul    ecx, dword_1000d2e0
shl     ecx, 5
mov     [esi+20h], ecx
call    __ftol2
push    esi
mov     [esi+28h], eax
mov     [esi+2ch], edx
call    ds:setrectempty
lea     edx, [esi+10h]
push    edx
call    ds:setrectempty
mov     ecx, dword_1000d2e0
mov     eax, dword_1000d2e4
mov     [esi+38h], eax
imul    eax, ecx
shl     eax, 5
shr     eax, 3
mov     edx, 1
mov     [esi+3ch], dx
mov     [esi+44h], eax
mov     eax, 0ah
mov     [esi+34h], ecx
mov     edx, 20h
push    offset avids
mov     ecx, edi
mov     dword ptr [esi+30h], 28h
mov     [esi+3eh], dx
mov     [esi+40h], ebp
mov     [esi+48h], eax
mov     [esi+4ch], eax
mov     [esi+50h], ebp
mov     [esi+54h], ebp
call    sub_10003310
push    offset dword_1000a3fc
mov     ecx, edi
call    sub_100033e0
push    1
mov     ecx, edi
call    ?setscheduler@?$listarray@vschedulegroupbase@details@concurrency@@@details@concurrency@@qaexpavschedulerbase@23@@z
push    offset dword_1000a43c
mov     ecx, edi
call    sub_10003340
mov     eax, [esi+44h]
push    eax
mov     ecx, edi
call    sub_10003370
push    ebx
call    ds:leavecriticalsection
xor     eax, eax
mov     ecx, [esp+2ch+var_c]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 18h
retn    4
push    0ffffffffh
push    offset seh_10001300
mov     eax, large fs:0
push    eax
sub     esp, 14h
push    ebx
push    esi
push    edi
mov     eax, ___security_cookie
xor     eax, esp
push    eax
lea     eax, [esp+30h+var_c]
mov     large fs:0, eax
mov     esi, [ecx+0a0h]
add     esi, 58h
push    esi
mov     [esp+34h+var_20], esi
call    ds:entercriticalsection
mov     eax, [esp+30h+arg_0]
mov     [esp+30h+var_4], 0
test    eax, eax
jnz     short loc_1000136b
push    esi
call    ds:leavecriticalsection
mov     eax, 80004003h
mov     ecx, [esp+30h+var_c]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
add     esp, 20h
retn    8
mov     edi, [esp+30h+arg_4]
test    edi, edi
jz      short loc_1000134a
cmp     dword ptr [edi], 0
jnz     short loc_1000137e
mov     dword ptr [edi], 1
mov     ecx, dword_1000d2e4
imul    ecx, dword_1000d2e0
shl     ecx, 5
shr     ecx, 3
mov     [edi+4], ecx
mov     edx, [eax]
mov     edx, [edx+0ch]
lea     ecx, [esp+30h+var_1c]
push    ecx
push    edi
push    eax
call    edx
mov     ebx, eax
push    esi
test    ebx, ebx
jge     short loc_100013c6
call    ds:leavecriticalsection
mov     eax, ebx
mov     ecx, [esp+30h+var_c]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
add     esp, 20h
retn    8
mov     eax, [esp+34h+var_18]
cmp     eax, [edi+4]
jge     short loc_100013ef
call    ds:leavecriticalsection
mov     eax, 80004005h
mov     ecx, [esp+30h+var_c]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
add     esp, 20h
retn    8
call    ds:leavecriticalsection
xor     eax, eax
mov     ecx, [esp+30h+var_c]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
pop     ebx
add     esp, 20h
retn    8
sub     esp, 0ch
push    ebx
mov     ebx, [esp+10h+arg_0]
test    ebx, ebx
jnz     short loc_10001428
mov     eax, 80004003h
pop     ebx
add     esp, 0ch
retn    4
cmp     arglist, 0
push    esi
push    edi
jnz     short loc_10001491
mov     eax, hmutex
push    0ffffffffh
push    eax
call    ds:waitforsingleobject
mov     esi, lpbaseaddress
mov     ecx, 102h
mov     edi, offset dword_1000d6d8
rep movsd
call    ds:gettickcount
mov     edi, lpbaseaddress
mov     arglist, eax
mov     ecx, 102h
mov     esi, offset dword_1000d6d8
rep movsd
mov     ecx, hmutex
push    ecx
call    ds:releasemutex
mov     edx, arglist
push    edx
push    offset format
call    sub_10001010
add     esp, 8
mov     eax, [ebx]
mov     edx, [eax+0ch]
lea     ecx, [esp+18h+arg_0]
push    ecx
push    ebx
call    edx
mov     eax, [ebx]
mov     ecx, [eax+10h]
push    ebx
call    ecx
cmp     dword_1000db08, 0
mov     [esp+18h+size], eax
jnz     short loc_100014c3
mov     edx, [esp+18h+arg_0]
push    eax
push    0
push    edx
call    memset
add     esp, 0ch
mov     eax, size
lea     ecx, [eax+eax]
push    ebp
push    ecx
call    ds:malloc
add     esp, 4
mov     ebp, eax
jmp     short loc_100014e0
mov     esi, lpbaseaddress
mov     ecx, 102h
mov     edi, offset dword_1000d6d8
mov     eax, 2
rep movsd
cmp     dword_1000d92c, eax
jz      short loc_10001507
cmp     dword_1000d930, eax
jnz     short loc_10001510
cmp     dword_1000d928, 0
jz      short loc_10001527
push    ebp
call    sub_10001b20
add     esp, 4
test    eax, eax
jnz     short loc_10001543
push    1eh
call    ds:sleep
jmp     short loc_100014e0
push    offset asrcfilterstop
call    sub_10001010
add     esp, 4
pop     ebp
pop     edi
pop     esi
mov     eax, 1
pop     ebx
add     esp, 0ch
retn    4
mov     edx, dword_1000d90c
mov     eax, dword_1000d994
mov     ecx, dword_1000d998
mov     esi, dword_1000d910
cmp     edx, eax
jnz     short loc_10001562
cmp     esi, ecx
jz      short loc_1000158b
test    ecx, ecx
jz      short loc_1000158b
test    eax, eax
jz      short loc_1000158b
mov     eax, dword_1000d2e4
mov     ecx, dword_1000d2e0
push    eax
push    ecx
push    eax
push    ecx
push    esi
push    edx
mov     edx, [esp+34h+arg_0]
push    edx
push    ebp
call    scalergb32
add     esp, 20h
jmp     short loc_1000159e
mov     eax, [esp+1ch+size]
mov     ecx, [esp+1ch+arg_0]
push    eax
push    ebp
push    ecx
call    memcpy
add     esp, 0ch
test    ebp, ebp
jz      short loc_100015ac
push    ebp
call    ds:free
add     esp, 4
cmp     dword_1000d93c, 1
jnz     short loc_100015ca
mov     edi, 32h
xor     esi, esi
mov     dword_1000db00, edi
mov     dword_1000db04, esi
jmp     short loc_100015d6
mov     esi, dword_1000db04
mov     edi, dword_1000db00
fld     dword_1000d2e8
fdivr   ds:dbl_1000a840
call    __ftol2
sub     edi, eax
lea     eax, [esp+1ch+var_8]
push    eax
sbb     esi, edx
mov     edx, [ebx]
mov     ecx, [edx+18h]
push    offset dword_1000db00
push    ebx
mov     [esp+28h+var_8], edi
mov     [esp+28h+var_4], esi
call    ecx
mov     edx, [esp+1ch+var_8]
mov     eax, [esp+1ch+var_4]
mov     dword_1000db00, edx
mov     dword_1000db04, eax
mov     ecx, [ebx]
mov     edx, [ecx+20h]
push    1
push    ebx
call    edx
pop     ebp
pop     edi
pop     esi
xor     eax, eax
pop     ebx
add     esp, 0ch
retn    4
push    0ffffffffh
push    offset seh_10001630
mov     eax, large fs:0
push    eax
push    esi
mov     eax, ___security_cookie
xor     eax, esp
push    eax
lea     eax, [esp+14h+var_c]
mov     large fs:0, eax
mov     esi, [esp+14h+arg_0]
movq    xmm0, ds:qword_1000a770
sub     esp, 10h
mov     eax, esp
movq    qword ptr [eax], xmm0
movq    xmm0, ds:qword_1000a778
movq    qword ptr [eax+8], xmm0
mov     eax, [esp+24h+arg_4]
push    eax
push    0
mov     ecx, esi
call    sub_10002140
mov     [esp+14h+var_4], 0
push    0f8h
mov     dword ptr [esi], offset ??_7cfiltersource@@6b@
mov     dword ptr [esi+0ch], offset ??_7cfiltersource@@6b@_0
mov     dword ptr [esi+10h], offset ??_7cfiltersource@@6b@_1
call    ??2@yapaxi@z
add     esp, 4
mov     [esp+14h+arg_4], eax
mov     byte ptr [esp+14h+var_4], 1
test    eax, eax
jz      short loc_100016c3
push    eax
mov     eax, esi
mov     ecx, edi
call    sub_10001070
jmp     short loc_100016c5
xor     eax, eax
mov     [esi+70h], eax
test    edi, edi
jz      short loc_100016dc
neg     eax
sbb     eax, eax
and     eax, 7ff8fff2h
add     eax, 8007000eh
mov     [edi], eax
mov     eax, esi
mov     ecx, [esp+14h+var_c]
mov     large fs:0, ecx
pop     ecx
pop     esi
add     esp, 0ch
retn    8
push    esi
mov     esi, ecx
call    sub_10001720
test    [esp+4+arg_0], 1
jz      short loc_10001718
push    esi
call    ??3@yaxpax@z
add     esp, 4
mov     eax, esi
pop     esi
retn    4
push    0ffffffffh
push    offset seh_10001720
mov     eax, large fs:0
push    eax
push    ecx
push    esi
mov     eax, ___security_cookie
xor     eax, esp
push    eax
lea     eax, [esp+18h+var_c]
mov     large fs:0, eax
mov     esi, ecx
mov     [esp+18h+var_10], esi
mov     dword ptr [esi], offset ??_7cfiltersource@@6b@
mov     dword ptr [esi+0ch], offset ??_7cfiltersource@@6b@_0
mov     dword ptr [esi+10h], offset ??_7cfiltersource@@6b@_1
mov     [esp+18h+var_4], 0
mov     ecx, [esi+70h]
test    ecx, ecx
jz      short loc_1000177b
mov     eax, [ecx]
mov     edx, [eax+4]
push    1
call    edx
mov     dword ptr [esi+70h], 0
mov     ecx, esi
mov     [esp+18h+var_4], 0ffffffffh
call    sub_100021f0
mov     ecx, dword ptr [esp+18h+var_c]
mov     large fs:0, ecx
pop     ecx
pop     esi
add     esp, 10h
retn
push    0ffffffffh
push    offset seh_100017a0
mov     eax, large fs:0
push    eax
push    ecx
push    edi
mov     eax, ___security_cookie
xor     eax, esp
push    eax
lea     eax, [esp+18h+var_c]
mov     large fs:0, eax
push    78h
call    ??2@yapaxi@z
add     esp, 4
mov     [esp+18h+var_10], eax
mov     edi, [esp+18h+arg_4]
mov     [esp+18h+var_4], 0
test    eax, eax
jz      short loc_100017ed
mov     ecx, [esp+18h+arg_0]
push    ecx
push    eax
call    sub_10001630
jmp     short loc_100017ef
xor     eax, eax
test    edi, edi
jz      short loc_10001807
mov     edx, eax
neg     edx
sbb     edx, edx
and     edx, 7ff8fff2h
add     edx, 8007000eh
mov     [edi], edx
mov     ecx, [esp+18h+var_c]
mov     large fs:0, ecx
pop     ecx
pop     edi
add     esp, 10h
retn    8
sub     ecx, 48h
jmp     sub_100010d0
sub     [esp+arg_0], 4
jmp     loc_10001860
sub     [esp+arg_0], 4
jmp     loc_100018b0
sub     [esp+arg_0], 4
jmp     loc_10001890
mov     eax, [esp+arg_0]
mov     eax, [eax-8]
mov     ecx, [eax]
mov     [esp+arg_0], eax
mov     edx, [ecx+4]
jmp     edx
mov     eax, 80004001h
retn    0ch
mov     eax, [esp+arg_0]
mov     eax, [eax-8]
mov     ecx, [eax]
mov     [esp+arg_0], eax
mov     edx, [ecx+8]
jmp     edx
mov     eax, [esp+arg_0]
mov     eax, [eax-8]
mov     ecx, [eax]
mov     [esp+arg_0], eax
mov     eax, [ecx]
jmp     eax
xor     eax, eax
retn
mov     eax, [ecx]
push    eax
call    ds:leavecriticalsection
retn
push    1
call    sub_10006f10
retn
push    0
call    sub_10006f10
retn
push    offset name
push    1
push    1f0001h
call    ds:openmutexa
push    offset amoviegrabbersh
push    0
push    0f001fh
mov     hmutex, eax
call    ds:openfilemappinga
mov     hobject, eax
test    eax, eax
jz      short loc_10001983
push    0
push    0
push    0
push    0f001fh
push    eax
call    ds:mapviewoffile
mov     lpbaseaddress, eax
test    eax, eax
jnz     short loc_10001986
mov     eax, hobject
push    eax
call    ds:closehandle
mov     hobject, 0
xor     eax, eax
retn
mov     dword_1000daec, 1
call    ds:gettickcount
mov     dword_1000dafc, eax
call    sub_100020b0
mov     dword_1000d6d0, eax
mov     eax, src
test    eax, eax
jz      short loc_100019b8
push    eax
call    ds:free
add     esp, 4
mov     src, 0
mov     eax, 1
retn
mov     eax, lpbaseaddress
test    eax, eax
jz      short loc_100019e0
push    eax
call    ds:unmapviewoffile
mov     eax, hobject
push    esi
mov     esi, ds:closehandle
test    eax, eax
jz      short loc_100019f3
push    eax
call    esi
mov     eax, hmutex
mov     lpbaseaddress, 0
mov     hobject, 0
test    eax, eax
jz      short loc_10001a13
push    eax
call    esi
mov     eax, src
pop     esi
test    eax, eax
jz      short loc_10001a27
push    eax
call    ds:free
add     esp, 4
mov     dword_1000daf8, 0
call    ds:gettickcount
mov     dword_1000dafc, eax
retn
cmp     dword_1000daec, 0
jnz     short loc_10001a4c
xor     eax, eax
retn
mov     eax, hmutex
push    ebx
push    esi
push    edi
push    0ffffffffh
push    eax
call    ds:waitforsingleobject
mov     ebx, lpbaseaddress
mov     ecx, 102h
mov     esi, ebx
mov     edi, offset dword_1000d6d8
rep movsd
mov     ecx, dword_1000d928
cmp     ecx, dword_1000d91c
jnz     short loc_10001aa0
mov     edx, hmutex
mov     ecx, 102h
mov     esi, offset dword_1000d6d8
mov     edi, ebx
push    edx
rep movsd
call    ds:releasemutex
pop     edi
pop     esi
xor     eax, eax
pop     ebx
retn
mov     eax, size
mov     edx, dword_1000d920
mov     ecx, [esp+0ch+src]
imul    edx, eax
push    eax
push    ecx
lea     eax, [edx+ebx+408h]
push    eax
call    memcpy
mov     eax, dword_1000d920
inc     dword_1000d928
inc     dword_1000d938
inc     eax
add     esp, 0ch
mov     dword_1000d920, eax
cmp     eax, dword_1000d91c
jnz     short loc_10001aed
mov     dword_1000d920, 0
mov     ecx, 102h
mov     esi, offset dword_1000d6d8
mov     edi, ebx
rep movsd
mov     ecx, hmutex
push    ecx
call    ds:releasemutex
pop     edi
pop     esi
mov     eax, 1
pop     ebx
retn
sub     esp, 8
cmp     dword_1000daec, 0
jnz     short loc_10001b32
xor     eax, eax
add     esp, 8
retn
mov     eax, size
push    ebx
push    ebp
push    esi
mov     esi, ds:malloc
push    eax
call    esi
mov     ecx, size
push    ecx
mov     [esp+1ch+block], eax
call    esi
push    3ch
mov     ebx, eax
call    esi
push    3ch
mov     ebp, eax
push    0
push    ebp
call    memset
add     esp, 18h
cmp     src, 0
jnz     short loc_10001b7f
mov     edx, size
push    edx
call    esi
add     esp, 4
mov     src, eax
mov     eax, hmutex
push    edi
push    0ffffffffh
push    eax
call    ds:waitforsingleobject
mov     eax, lpbaseaddress
mov     ecx, 102h
mov     esi, eax
mov     edi, offset dword_1000d6d8
rep movsd
xor     edi, edi
cmp     dword_1000d928, edi
jnz     loc_10001c92
cmp     dword_1000daf8, edi
jz      loc_10001c58
call    ds:gettickcount
sub     eax, arglist
mov     [esp+18h+var_4], eax
fild    [esp+18h+var_4]
test    eax, eax
jge     short loc_10001bd9
fadd    ds:flt_1000a838
fmul    flt_1000d934
mov     ecx, dword_1000d938
fdiv    ds:dbl_1000a830
fild    dword_1000d938
test    ecx, ecx
jge     short loc_10001bfb
fadd    ds:flt_1000a838
fsubp   st(1), st
call    __ftol2_sse
test    eax, eax
jle     short loc_10001c53
mov     edx, size
mov     eax, src
mov     ecx, [esp+18h+src]
push    edx
push    eax
mov     edi, 1
add     dword_1000d938, edi
add     dword_1000d93c, edi
push    ecx
call    memcpy
call    sub_10002080
mov     edx, [esp+24h+block]
mov     esi, ds:free
push    edx
call    esi
push    ebx
call    esi
push    ebp
call    esi
add     esp, 18h
mov     eax, edi
pop     edi
pop     esi
pop     ebp
pop     ebx
add     esp, 8
retn
mov     eax, lpbaseaddress
mov     edi, eax
mov     eax, hmutex
mov     ecx, 102h
mov     esi, offset dword_1000d6d8
push    eax
rep movsd
call    ds:releasemutex
mov     ecx, [esp+18h+block]
mov     esi, ds:free
push    ecx
call    esi
push    ebx
call    esi
push    ebp
call    esi
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
xor     eax, eax
pop     ebx
add     esp, 8
retn
mov     ecx, dword_1000d960
mov     esi, 1
mov     dword_1000daf8, esi
cmp     ecx, edi
jnz     loc_10001d31
mov     ecx, size
mov     edx, dword_1000d924
imul    edx, ecx
push    ecx
lea     eax, [edx+eax+408h]
push    eax
push    ebx
call    memcpy
mov     eax, dword_1000d924
sub     dword_1000d928, esi
add     dword_1000d93c, esi
add     eax, esi
add     esp, 0ch
mov     dword_1000d924, eax
cmp     eax, dword_1000d91c
jnz     short loc_10001cf2
mov     dword_1000d924, edi
mov     edi, lpbaseaddress
mov     ecx, 102h
mov     esi, offset dword_1000d6d8
rep movsd
mov     ecx, hmutex
push    ecx
call    ds:releasemutex
mov     edx, dword_1000d910
mov     eax, dword_1000d90c
push    ebx
push    edx
push    eax
call    autocinemamode
add     esp, 0ch
mov     esi, 1
jmp     loc_10001e3d
cmp     ecx, esi
jnz     loc_10001df1
cmp     dword_1000d964, edi
jnz     short loc_10001d4d
cmp     dword_1000d968, edi
jz      loc_10001df1
mov     ecx, size
mov     edx, dword_1000d924
imul    edx, ecx
push    ecx
mov     ecx, [esp+1ch+block]
lea     eax, [edx+eax+408h]
push    eax
push    ecx
call    memcpy
mov     eax, dword_1000d924
sub     dword_1000d928, esi
add     dword_1000d93c, esi
add     eax, esi
add     esp, 0ch
mov     dword_1000d924, eax
cmp     eax, dword_1000d91c
jnz     short loc_10001d98
mov     dword_1000d924, edi
call    sub_10002080
mov     eax, dword_1000d964
cmp     eax, edi
jz      short loc_10001dc2
mov     edx, dword_1000d910
mov     ecx, [esp+18h+block]
push    eax
mov     eax, dword_1000d90c
push    edx
push    eax
push    ebx
push    ecx
call    brightnesschange
add     esp, 14h
mov     ecx, dword_1000d968
cmp     ecx, edi
jz      short loc_10001e3d
mov     edx, dword_1000d910
push    ecx
mov     ecx, dword_1000d90c
push    edx
mov     eax, ebx
mov     ebx, [esp+20h+block]
push    ecx
push    ebx
push    eax
mov     [esp+2ch+block], eax
call    contrastchange
add     esp, 14h
jmp     short loc_10001e3d
mov     ecx, size
mov     edx, dword_1000d924
imul    edx, ecx
push    ecx
lea     eax, [edx+eax+408h]
push    eax
push    ebx
call    memcpy
mov     eax, dword_1000d924
sub     dword_1000d928, esi
add     dword_1000d93c, esi
add     eax, esi
add     esp, 0ch
mov     dword_1000d924, eax
cmp     eax, dword_1000d91c
jnz     short loc_10001e38
mov     dword_1000d924, edi
call    sub_10002080
mov     eax, dword_1000d96c
mov     ecx, [esp+18h+block]
mov     [esp+18h+block], ecx
mov     edi, ebx
test    eax, 10000000h
jz      short loc_10001e88
cmp     size, 38400h
jnb     short loc_10001e66
mov     dword ptr [ebp+0], 2
movss   xmm0, ds:dword_1000a828
mov     dword ptr [ebp+28h], 3
mov     dword ptr [ebp+2ch], 1eh
mov     dword ptr [ebp+30h], 2
jmp     loc_10001f23
test    al, 1
jz      short loc_10001e95
or      dword ptr [ebp+0], 2
mov     eax, dword_1000d96c
test    al, 2
jz      short loc_10001ea2
or      dword ptr [ebp+0], 4
mov     eax, dword_1000d96c
test    al, 4
jz      short loc_10001eaf
or      dword ptr [ebp+0], 8
mov     eax, dword_1000d96c
test    al, 8
jz      short loc_10001eb6
or      [ebp+0], esi
movss   xmm0, ds:dword_1000a824
movss   dword ptr [ebp+4], xmm0
movss   xmm0, dword_1000d97c
mov     eax, 80h
movss   dword ptr [ebp+8], xmm0
mov     [ebp+0ch], eax
mov     [ebp+10h], esi
mov     [ebp+14h], eax
movss   xmm0, dword_1000d974
movss   dword ptr [ebp+18h], xmm0
mov     dword ptr [ebp+1ch], 7fh
mov     dword ptr [ebp+20h], 8
movss   xmm0, dword_1000d978
movss   dword ptr [ebp+24h], xmm0
mov     dword ptr [ebp+28h], 3
mov     dword ptr [ebp+2ch], 1eh
mov     dword ptr [ebp+30h], 2
movss   xmm0, dword_1000d970
mov     [ebp+34h], esi
movss   dword ptr [ebp+38h], xmm0
cmp     dword_1000d96c, 0
jz      short loc_10001f5e
mov     edx, dword_1000d910
mov     eax, dword_1000d90c
push    edx
push    eax
push    ebx
push    ebp
call    anime
mov     ecx, size
push    ecx
push    eax
push    edi
call    memcpy
add     esp, 1ch
call    animeend
mov     edx, size
mov     esi, [esp+18h+src]
push    edx
push    edi
push    esi
call    memcpy
mov     eax, size
mov     ecx, src
push    eax
push    esi
push    ecx
call    memcpy
mov     ebx, ds:free
add     esp, 18h
cmp     dword_1000daf8, 0
jz      loc_10002058
call    ds:gettickcount
sub     eax, arglist
mov     [esp+18h+var_4], eax
fild    [esp+18h+var_4]
test    eax, eax
jge     short loc_10001fb7
fadd    ds:flt_1000a838
fmul    flt_1000d934
mov     edx, dword_1000d938
fdiv    ds:dbl_1000a830
fild    dword_1000d938
test    edx, edx
jge     short loc_10001fd9
fadd    ds:flt_1000a838
fsubp   st(1), st
call    __ftol2_sse
test    eax, eax
jle     short loc_10002058
mov     eax, size
push    eax
call    ds:malloc
mov     ecx, dword_1000d928
add     esp, 4
mov     esi, eax
test    ecx, ecx
jnz     short loc_1000200f
mov     ecx, size
mov     edx, src
push    ecx
push    edx
jmp     short loc_10002043
add     ecx, 0ffffffffh
mov     eax, dword_1000d924
jz      short loc_1000202c
mov     edx, dword_1000d91c
nop
inc     eax
cmp     eax, edx
jnz     short loc_10002027
xor     eax, eax
sub     ecx, 1
jnz     short loc_10002020
mov     ecx, size
push    ecx
imul    ecx, eax
mov     eax, lpbaseaddress
lea     ecx, [ecx+eax+408h]
push    ecx
push    esi
call    memcpy
push    esi
call    sub_10001a40
add     esp, 10h
push    esi
call    ebx
add     esp, 4
push    edi
call    ebx
mov     edx, [esp+1ch+block]
push    edx
call    ebx
push    ebp
call    ebx
add     esp, 0ch
pop     edi
pop     esi
pop     ebp
mov     eax, 1
pop     ebx
add     esp, 8
retn
mov     eax, hmutex
push    esi
push    edi
mov     edi, lpbaseaddress
mov     ecx, 102h
mov     esi, offset dword_1000d6d8
push    eax
rep movsd
call    ds:releasemutex
pop     edi
pop     esi
retn
push    esi
push    94h
call    ds:malloc
push    94h
mov     esi, eax
push    0
push    esi
call    memset
add     esp, 10h
push    esi
mov     dword ptr [esi], 94h
call    ds:getversionexa
mov     eax, [esi+4]
cmp     eax, 5
jnz     short loc_100020fa
cmp     dword ptr [esi+8], 1
jnz     short loc_1000212d
push    esi
call    ds:free
add     esp, 4
mov     eax, 10h
pop     esi
retn
cmp     eax, 6
jnz     short loc_1000212d
mov     eax, [esi+8]
test    eax, eax
jnz     short loc_10002117
push    esi
call    ds:free
add     esp, 4
mov     eax, 20h
pop     esi
retn
cmp     eax, 1
jnz     short loc_1000212d
push    esi
call    ds:free
add     esp, 4
mov     eax, 40h
pop     esi
retn
push    esi
call    ds:free
add     esp, 4
xor     eax, eax
pop     esi
retn
push    ebp
mov     ebp, esp
sub     esp, 0ch
mov     [ebp+var_c], ecx
lea     eax, [ebp+arg_8]
push    eax
mov     ecx, [ebp+var_c]
add     ecx, 58h
push    ecx
mov     edx, [ebp+arg_4]
push    edx
mov     eax, [ebp+arg_0]
push    eax
mov     ecx, [ebp+var_c]
call    sub_100038f0
mov     ecx, [ebp+var_c]
mov     dword ptr [ecx], offset ??_7csource@@6b@
mov     edx, [ebp+var_c]
mov     dword ptr [edx+0ch], offset ??_7csource@@6b@_0
mov     eax, [ebp+var_c]
mov     dword ptr [eax+10h], offset ??_7csource@@6b@_1
mov     ecx, [ebp+var_c]
mov     dword ptr [ecx+50h], 0
mov     edx, [ebp+var_c]
mov     dword ptr [edx+54h], 0
mov     eax, [ebp+var_c]
add     eax, 58h
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:initializecriticalsection
mov     eax, [ebp+var_c]
mov     esp, ebp
pop     ebp
retn    18h
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     ecx, [ebp+var_4]
call    sub_100021f0
mov     eax, [ebp+arg_0]
and     eax, 1
jz      short loc_100021e3
mov     ecx, [ebp+var_4]
push    ecx
call    ??3@yaxpax@z
add     esp, 4
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_100021f0
mov     eax, large fs:0
push    eax
sub     esp, 10h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_18], ecx
mov     eax, [ebp+var_18]
mov     dword ptr [eax], offset ??_7csource@@6b@
mov     ecx, [ebp+var_18]
mov     dword ptr [ecx+0ch], offset ??_7csource@@6b@_0
mov     edx, [ebp+var_18]
mov     dword ptr [edx+10h], offset ??_7csource@@6b@_1
mov     [ebp+var_4], 1
mov     eax, [ebp+var_18]
cmp     dword ptr [eax+50h], 0
jz      short loc_10002281
mov     ecx, [ebp+var_18]
mov     edx, [ecx+50h]
mov     eax, [ebp+var_18]
mov     ecx, [eax+54h]
mov     edx, [ecx+edx*4-4]
mov     [ebp+var_14], edx
mov     eax, [ebp+var_14]
mov     [ebp+var_10], eax
cmp     [ebp+var_10], 0
jz      short loc_10002278
push    1
mov     ecx, [ebp+var_10]
mov     edx, [ecx]
mov     ecx, [ebp+var_10]
mov     eax, [edx+4]
call    eax
mov     [ebp+var_1c], eax
jmp     short loc_1000227f
mov     [ebp+var_1c], 0
jmp     short loc_1000223c
mov     byte ptr [ebp+var_4], 0
mov     ecx, [ebp+var_18]
add     ecx, 58h
push    ecx
call    ds:deletecriticalsection
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_18]
call    sub_10003990
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_100029f0
mov     eax, large fs:0
push    eax
sub     esp, 28h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_34], ecx
mov     eax, [ebp+var_34]
add     eax, 58h
mov     [ebp+var_10], eax
mov     ecx, [ebp+var_10]
mov     [ebp+lpcriticalsection], ecx
mov     edx, [ebp+lpcriticalsection]
push    edx
call    ds:entercriticalsection
mov     [ebp+var_4], 0
mov     eax, [ebp+var_34]
mov     eax, [eax+50h]
add     eax, 1
xor     ecx, ecx
mov     edx, 4
mul     edx
seto    cl
neg     ecx
or      ecx, eax
push    ecx
call    ??_u@yapaxi@z
add     esp, 4
mov     [ebp+var_18], eax
mov     eax, [ebp+var_18]
mov     [ebp+var_14], eax
cmp     [ebp+var_14], 0
jnz     short loc_1000234f
mov     [ebp+var_1c], 8007000eh
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_10]
mov     [ebp+var_2c], ecx
mov     edx, [ebp+var_2c]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_1c]
jmp     loc_100023e4
mov     eax, [ebp+var_34]
cmp     dword ptr [eax+54h], 0
jz      short loc_10002399
mov     ecx, [ebp+var_34]
mov     edx, [ecx+50h]
shl     edx, 2
push    edx
mov     eax, [ebp+var_34]
mov     ecx, [eax+54h]
push    ecx
mov     edx, [ebp+var_14]
push    edx
call    memcpy
add     esp, 0ch
mov     eax, [ebp+var_34]
mov     ecx, [eax+50h]
mov     edx, [ebp+var_14]
mov     eax, [ebp+arg_0]
mov     [edx+ecx*4], eax
mov     ecx, [ebp+var_34]
mov     edx, [ecx+54h]
mov     [ebp+var_20], edx
mov     eax, [ebp+var_20]
push    eax
call    ??_v@yaxpax@z
add     esp, 4
mov     ecx, [ebp+var_34]
mov     edx, [ebp+var_14]
mov     [ecx+54h], edx
mov     eax, [ebp+var_34]
mov     ecx, [eax+50h]
mov     edx, [ebp+var_34]
mov     eax, [edx+54h]
mov     edx, [ebp+arg_0]
mov     [eax+ecx*4], edx
mov     eax, [ebp+var_34]
mov     ecx, [eax+50h]
add     ecx, 1
mov     edx, [ebp+var_34]
mov     [edx+50h], ecx
mov     [ebp+var_24], 0
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_10]
mov     [ebp+var_30], eax
mov     ecx, [ebp+var_30]
push    ecx
call    ds:leavecriticalsection
mov     eax, [ebp+var_24]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 0ch
push    esi
mov     [ebp+var_c], ecx
mov     [ebp+var_4], 0
jmp     short loc_1000241c
mov     eax, [ebp+var_4]
add     eax, 1
mov     [ebp+var_4], eax
mov     ecx, [ebp+var_c]
mov     edx, [ebp+var_4]
cmp     edx, [ecx+50h]
jge     loc_100024ad
mov     eax, [ebp+var_c]
mov     ecx, [eax+54h]
mov     edx, [ebp+var_4]
mov     eax, [ecx+edx*4]
cmp     eax, [ebp+arg_0]
jnz     short loc_100024a8
mov     ecx, [ebp+var_c]
cmp     dword ptr [ecx+50h], 1
jnz     short loc_10002466
mov     edx, [ebp+var_c]
mov     eax, [edx+54h]
mov     [ebp+var_8], eax
mov     ecx, [ebp+var_8]
push    ecx
call    ??_v@yaxpax@z
add     esp, 4
mov     edx, [ebp+var_c]
mov     dword ptr [edx+54h], 0
jmp     short loc_10002495
mov     eax, [ebp+var_4]
add     eax, 1
mov     [ebp+var_4], eax
mov     ecx, [ebp+var_c]
mov     edx, [ebp+var_4]
cmp     edx, [ecx+50h]
jge     short loc_10002495
mov     eax, [ebp+var_c]
mov     ecx, [eax+54h]
mov     edx, [ebp+var_c]
mov     eax, [edx+54h]
mov     edx, [ebp+var_4]
mov     esi, [ebp+var_4]
mov     ecx, [ecx+esi*4]
mov     [eax+edx*4-4], ecx
jmp     short loc_10002466
mov     edx, [ebp+var_c]
mov     eax, [edx+50h]
sub     eax, 1
mov     ecx, [ebp+var_c]
mov     [ecx+50h], eax
xor     eax, eax
jmp     short loc_100024b2
jmp     loc_10002413
mov     eax, 1
pop     esi
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 0ch
cmp     [ebp+arg_8], 0
jnz     short loc_100024d3
mov     eax, 80004003h
jmp     short loc_10002543
mov     eax, [ebp+string]
push    eax
call    ds:_wtoi
add     esp, 4
sub     eax, 1
mov     [ebp+var_4], eax
mov     ecx, [ebp+var_4]
push    ecx
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     edx, [ebp+arg_0]
mov     eax, [edx-0ch]
mov     edx, [eax+1ch]
call    edx
mov     [ebp+var_8], eax
cmp     [ebp+var_8], 0
jz      short loc_1000250f
mov     eax, [ebp+var_8]
add     eax, 0ch
mov     [ebp+var_c], eax
jmp     short loc_10002516
mov     [ebp+var_c], 0
mov     ecx, [ebp+arg_8]
mov     edx, [ebp+var_c]
mov     [ecx], edx
mov     eax, [ebp+arg_8]
cmp     dword ptr [eax], 0
jz      short loc_1000253e
mov     ecx, [ebp+arg_8]
mov     edx, [ecx]
mov     eax, [ebp+arg_8]
mov     ecx, [eax]
mov     edx, [edx]
push    ecx
mov     eax, [edx+4]
call    eax
xor     eax, eax
jmp     short loc_10002543
jmp     short loc_10002543
mov     eax, 80040216h
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
sub     esp, 10h
mov     [ebp+var_8], ecx
mov     [ebp+var_4], 0
jmp     short loc_1000256b
mov     eax, [ebp+var_4]
add     eax, 1
mov     [ebp+var_4], eax
mov     ecx, [ebp+var_8]
mov     edx, [ebp+var_4]
cmp     edx, [ecx+50h]
jge     short loc_100025ac
mov     eax, [ebp+var_8]
mov     ecx, [eax+54h]
mov     edx, [ebp+var_4]
mov     eax, [ecx+edx*4]
mov     [ebp+var_c], eax
cmp     [ebp+var_c], 0
jz      short loc_10002596
mov     ecx, [ebp+var_c]
add     ecx, 54h
mov     [ebp+var_10], ecx
jmp     short loc_1000259d
mov     [ebp+var_10], 0
mov     edx, [ebp+var_10]
cmp     edx, [ebp+arg_0]
jnz     short loc_100025aa
mov     eax, [ebp+var_4]
jmp     short loc_100025af
jmp     short loc_10002562
or      eax, 0ffffffffh
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 14h
mov     [ebp+var_14], ecx
mov     eax, [ebp+var_14]
add     eax, 58h
mov     [ebp+var_4], eax
mov     ecx, [ebp+var_4]
mov     [ebp+lpcriticalsection], ecx
mov     edx, [ebp+lpcriticalsection]
push    edx
call    ds:entercriticalsection
mov     eax, [ebp+var_14]
mov     ecx, [eax+50h]
mov     [ebp+var_8], ecx
mov     edx, [ebp+var_4]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_8]
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
sub     esp, 24h
mov     [ebp+var_1c], ecx
mov     eax, [ebp+var_1c]
add     eax, 58h
mov     [ebp+var_4], eax
mov     ecx, [ebp+var_4]
mov     [ebp+lpcriticalsection], ecx
mov     edx, [ebp+lpcriticalsection]
push    edx
call    ds:entercriticalsection
cmp     [ebp+arg_0], 0
jl      short loc_10002685
mov     eax, [ebp+var_1c]
mov     ecx, [ebp+arg_0]
cmp     ecx, [eax+50h]
jge     short loc_10002685
mov     edx, [ebp+var_1c]
mov     eax, [edx+54h]
mov     ecx, [ebp+arg_0]
mov     edx, [eax+ecx*4]
mov     [ebp+var_20], edx
cmp     [ebp+var_20], 0
jz      short loc_10002663
mov     eax, [ebp+var_20]
add     eax, 48h
mov     [ebp+var_24], eax
jmp     short loc_1000266a
mov     [ebp+var_24], 0
mov     ecx, [ebp+var_24]
mov     [ebp+var_8], ecx
mov     edx, [ebp+var_4]
mov     [ebp+var_14], edx
mov     eax, [ebp+var_14]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_8]
jmp     short loc_1000269f
mov     [ebp+var_c], 0
mov     ecx, [ebp+var_4]
mov     [ebp+var_18], ecx
mov     edx, [ebp+var_18]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_c]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 8
cmp     [ebp+arg_4], 0
jnz     short loc_100026c3
mov     eax, 80004003h
jmp     short loc_1000272e
mov     eax, [ebp+arg_0]
sub     eax, 54h
jz      short loc_100026d3
mov     ecx, [ebp+arg_0]
mov     [ebp+var_8], ecx
jmp     short loc_100026da
mov     [ebp+var_8], 0
mov     edx, [ebp+var_8]
push    edx
mov     eax, [ebp+arg_0]
mov     ecx, [eax+94h]
call    sub_10002550
add     eax, 1
mov     dword ptr [ebp+var_4], eax
cmp     dword ptr [ebp+var_4], 1
jge     short loc_100026ff
mov     eax, 80040216h
jmp     short loc_1000272e
push    8
call    ds:cotaskmemalloc
mov     ecx, [ebp+arg_4]
mov     [ecx], eax
mov     edx, [ebp+arg_4]
cmp     dword ptr [edx], 0
jnz     short loc_1000271b
mov     eax, 8007000eh
jmp     short loc_1000272e
push    4
mov     eax, [ebp+arg_4]
mov     ecx, [eax]
push    ecx
mov     edx, dword ptr [ebp+var_4]
push    edx
call    sub_10007c40
xor     eax, eax
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10002740
mov     eax, large fs:0
push    eax
push    ecx
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_10], ecx
mov     ecx, [ebp+var_10]
call    sub_100077d0
mov     [ebp+var_4], 0
mov     eax, [ebp+src]
push    eax
mov     ecx, [ebp+arg_4]
push    ecx
mov     edx, [ebp+arg_8]
add     edx, 58h
push    edx
mov     eax, [ebp+arg_8]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
mov     ecx, [ebp+var_10]
add     ecx, 48h
call    sub_100060a0
mov     byte ptr [ebp+var_4], 1
mov     edx, [ebp+var_10]
mov     dword ptr [edx], offset ??_7csourcestream@@6b@
mov     eax, [ebp+var_10]
mov     dword ptr [eax+48h], offset ??_7csourcestream@@6b@_0
mov     ecx, [ebp+var_10]
mov     dword ptr [ecx+54h], offset ??_7csourcestream@@6b@_1
mov     edx, [ebp+var_10]
mov     dword ptr [edx+58h], offset ??_7csourcestream@@6b@_2
mov     eax, [ebp+var_10]
mov     ecx, [ebp+arg_8]
mov     [eax+0e8h], ecx
mov     edx, [ebp+var_10]
push    edx
mov     eax, [ebp+var_10]
mov     ecx, [eax+0e8h]
call    sub_100022b0
mov     ecx, [ebp+arg_4]
mov     [ecx], eax
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_10]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    10h
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     ecx, [ebp+var_4]
call    sub_10002850
mov     eax, [ebp+arg_0]
and     eax, 1
jz      short loc_10002823
mov     ecx, [ebp+var_4]
push    ecx
call    ??3@yaxpax@z
add     esp, 4
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     ecx, [ebp+var_4]
call    sub_10005280
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10002850
mov     eax, large fs:0
push    eax
sub     esp, 8
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_14], ecx
mov     eax, [ebp+var_14]
mov     dword ptr [eax], offset ??_7csourcestream@@6b@
mov     ecx, [ebp+var_14]
mov     dword ptr [ecx+48h], offset ??_7csourcestream@@6b@_0
mov     edx, [ebp+var_14]
mov     dword ptr [edx+54h], offset ??_7csourcestream@@6b@_1
mov     eax, [ebp+var_14]
mov     dword ptr [eax+58h], offset ??_7csourcestream@@6b@_2
mov     [ebp+var_4], 1
mov     ecx, [ebp+var_14]
push    ecx
mov     edx, [ebp+var_14]
mov     ecx, [edx+0e8h]
call    sub_10002400
mov     byte ptr [ebp+var_4], 0
mov     eax, [ebp+var_14]
add     eax, 48h
mov     [ebp+var_10], eax
mov     ecx, [ebp+var_10]
call    sub_10005280
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_14]
call    sub_10007870
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_100028f0
mov     eax, large fs:0
push    eax
sub     esp, 70h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_10], eax
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_7c], ecx
mov     eax, [ebp+var_7c]
mov     ecx, [eax+0a0h]
add     ecx, 58h
mov     [ebp+var_6c], ecx
mov     edx, [ebp+var_6c]
mov     [ebp+var_60], edx
mov     eax, [ebp+var_60]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     [ebp+var_4], 0
lea     ecx, [ebp+var_5c]
call    sub_100031c0
mov     byte ptr [ebp+var_4], 1
lea     edx, [ebp+var_5c]
push    edx
mov     ecx, [ebp+var_7c]
sub     ecx, 48h
mov     eax, [ebp+var_7c]
mov     edx, [eax-48h]
mov     eax, [edx+1ch]
call    eax
mov     ecx, [ebp+buf2]
push    ecx
lea     ecx, [ebp+var_5c]
call    sub_100031e0
test    eax, eax
jz      short loc_100029a7
mov     [ebp+var_64], 0
mov     byte ptr [ebp+var_4], 0
lea     ecx, [ebp+var_5c]
call    sub_100031a0
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+var_60]
mov     [ebp+var_74], edx
mov     eax, [ebp+var_74]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_64]
jmp     short loc_100029d4
mov     [ebp+var_68], 80004005h
mov     byte ptr [ebp+var_4], 0
lea     ecx, [ebp+var_5c]
call    sub_100031a0
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_60]
mov     [ebp+var_78], ecx
mov     edx, [ebp+var_78]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_68]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     ecx, [ebp+var_10]
xor     ecx, ebp
call    @__security_check_cookie@4
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_100029f0
mov     eax, large fs:0
push    eax
sub     esp, 28h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_34], ecx
mov     eax, [ebp+var_34]
mov     ecx, [eax+0a0h]
add     ecx, 58h
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     [ebp+var_4], 0
cmp     [ebp+arg_0], 0
jge     short loc_10002a6d
mov     [ebp+var_14], 80070057h
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+var_10]
mov     [ebp+var_28], edx
mov     eax, [ebp+var_28]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_14]
jmp     short loc_10002ac8
cmp     [ebp+arg_0], 0
jle     short loc_10002a96
mov     [ebp+var_18], 40103h
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_10]
mov     [ebp+var_2c], ecx
mov     edx, [ebp+var_2c]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_18]
jmp     short loc_10002ac8
mov     eax, [ebp+arg_4]
push    eax
mov     ecx, [ebp+var_34]
sub     ecx, 48h
mov     edx, [ebp+var_34]
mov     eax, [edx-48h]
mov     edx, [eax+1ch]
call    edx
mov     [ebp+var_1c], eax
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_10]
mov     [ebp+var_30], eax
mov     ecx, [ebp+var_30]
push    ecx
call    ds:leavecriticalsection
mov     eax, [ebp+var_1c]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10002ae0
mov     eax, large fs:0
push    eax
sub     esp, 58h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_64], ecx
mov     eax, [ebp+var_64]
mov     ecx, [eax+0a0h]
add     ecx, 58h
mov     [ebp+var_30], ecx
mov     edx, [ebp+var_30]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     [ebp+var_4], 0
mov     edx, [ebp+var_64]
mov     ecx, [edx+0a0h]
call    sub_10003110
test    eax, eax
jz      short loc_10002b6c
mov     [ebp+var_18], 1
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_10]
mov     [ebp+var_4c], eax
mov     ecx, [ebp+var_4c]
push    ecx
call    ds:leavecriticalsection
mov     eax, [ebp+var_18]
jmp     loc_10002c6c
mov     edx, [ebp+var_64]
xor     eax, eax
cmp     dword ptr [edx+18h], 0
setnz   al
test    eax, eax
jnz     short loc_10002ba2
mov     [ebp+var_1c], 0
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_10]
mov     [ebp+var_50], ecx
mov     edx, [ebp+var_50]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_1c]
jmp     loc_10002c6c
mov     ecx, [ebp+var_64]
call    sub_10006460
mov     [ebp+var_14], eax
cmp     [ebp+var_14], 0
jge     short loc_10002bd8
mov     eax, [ebp+var_14]
mov     [ebp+var_20], eax
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_10]
mov     [ebp+var_54], ecx
mov     edx, [ebp+var_54]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_20]
jmp     loc_10002c6c
mov     ecx, [ebp+var_64]
sub     ecx, 48h
call    sub_10007940
test    eax, eax
jnz     short loc_10002c0a
mov     [ebp+var_24], 80004005h
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_10]
mov     [ebp+var_58], eax
mov     ecx, [ebp+var_58]
push    ecx
call    ds:leavecriticalsection
mov     eax, [ebp+var_24]
jmp     short loc_10002c6c
push    0
mov     ecx, [ebp+var_64]
sub     ecx, 48h
call    sub_10007a10
mov     [ebp+var_14], eax
cmp     [ebp+var_14], 0
jge     short loc_10002c42
mov     edx, [ebp+var_14]
mov     [ebp+var_28], edx
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_10]
mov     [ebp+var_5c], eax
mov     ecx, [ebp+var_5c]
push    ecx
call    ds:leavecriticalsection
mov     eax, [ebp+var_28]
jmp     short loc_10002c6c
push    1
mov     ecx, [ebp+var_64]
sub     ecx, 48h
call    sub_10007a10
mov     [ebp+var_2c], eax
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+var_10]
mov     [ebp+var_60], edx
mov     eax, [ebp+var_60]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_2c]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10005910
mov     eax, large fs:0
push    eax
sub     esp, 44h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_50], ecx
mov     eax, [ebp+var_50]
mov     ecx, [eax+0a0h]
add     ecx, 58h
mov     [ebp+var_2c], ecx
mov     edx, [ebp+var_2c]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     [ebp+var_4], 0
mov     edx, [ebp+var_50]
xor     eax, eax
cmp     dword ptr [edx+18h], 0
setnz   al
test    eax, eax
jnz     short loc_10002d0a
mov     [ebp+var_18], 0
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_10]
mov     [ebp+var_34], ecx
mov     edx, [ebp+var_34]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_18]
jmp     loc_10002dfd
mov     ecx, [ebp+var_50]
call    sub_100064a0
mov     [ebp+var_14], eax
cmp     [ebp+var_14], 0
jge     short loc_10002d40
mov     eax, [ebp+var_14]
mov     [ebp+var_1c], eax
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_10]
mov     [ebp+var_38], ecx
mov     edx, [ebp+var_38]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_1c]
jmp     loc_10002dfd
mov     eax, [ebp+var_50]
cmp     dword ptr [eax-34h], 0
jnz     short loc_10002d54
mov     [ebp+var_3c], 0
jmp     short loc_10002d5b
jmp     short loc_10002d5b
mov     [ebp+var_3c], 1
cmp     [ebp+var_3c], 0
jz      short loc_10002ddc
push    3
mov     ecx, [ebp+var_50]
sub     ecx, 48h
call    sub_10007a10
mov     [ebp+var_14], eax
cmp     [ebp+var_14], 0
jge     short loc_10002d99
mov     ecx, [ebp+var_14]
mov     [ebp+var_20], ecx
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+var_10]
mov     [ebp+var_40], edx
mov     eax, [ebp+var_40]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_20]
jmp     short loc_10002dfd
push    4
mov     ecx, [ebp+var_50]
sub     ecx, 48h
call    sub_10007a10
mov     [ebp+var_14], eax
cmp     [ebp+var_14], 0
jge     short loc_10002dd1
mov     ecx, [ebp+var_14]
mov     [ebp+var_24], ecx
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+var_10]
mov     [ebp+var_44], edx
mov     eax, [ebp+var_44]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_24]
jmp     short loc_10002dfd
mov     ecx, [ebp+var_50]
sub     ecx, 48h
call    sub_100030d0
mov     [ebp+var_28], 0
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_10]
mov     [ebp+var_4c], ecx
mov     edx, [ebp+var_4c]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_28]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
sub     esp, 14h
mov     [ebp+var_10], ecx
mov     ecx, [ebp+var_10]
call    sub_10007ac0
mov     [ebp+var_c], eax
cmp     [ebp+var_c], 0
jz      short loc_10002e37
push    8000ffffh
mov     ecx, [ebp+var_10]
call    sub_10007b30
cmp     [ebp+var_c], 0
jnz     short loc_10002e19
mov     eax, [ebp+var_10]
mov     edx, [eax]
mov     ecx, [ebp+var_10]
mov     eax, [edx+0ch]
call    eax
mov     [ebp+var_8], eax
cmp     [ebp+var_8], 0
jge     short loc_10002e76
mov     ecx, [ebp+var_10]
mov     edx, [ecx]
mov     ecx, [ebp+var_10]
mov     eax, [edx+10h]
call    eax
mov     ecx, [ebp+var_8]
push    ecx
mov     ecx, [ebp+var_10]
call    sub_10007b30
mov     eax, 1
jmp     loc_10002f0d
push    0
mov     ecx, [ebp+var_10]
call    sub_10007b30
mov     ecx, [ebp+var_10]
call    sub_10007ac0
mov     [ebp+var_4], eax
mov     edx, [ebp+var_4]
mov     [ebp+var_14], edx
mov     eax, [ebp+var_14]
sub     eax, 1
mov     [ebp+var_14], eax
cmp     [ebp+var_14], 3
ja      short def_10002ea3
mov     ecx, [ebp+var_14]
jmp     ds:jpt_10002ea3[ecx*4]
push    0
mov     ecx, [ebp+var_10]
call    sub_10007b30
jmp     short loc_10002ee8
push    0
mov     ecx, [ebp+var_10]
call    sub_10007b30
mov     edx, [ebp+var_10]
mov     eax, [edx]
mov     ecx, [ebp+var_10]
mov     edx, [eax+18h]
call    edx
jmp     short loc_10002ee8
push    0
mov     ecx, [ebp+var_10]
call    sub_10007b30
jmp     short loc_10002ee8
push    80004001h
mov     ecx, [ebp+var_10]
call    sub_10007b30
cmp     [ebp+var_4], 4
jnz     short loc_10002e80
mov     eax, [ebp+var_10]
mov     edx, [eax]
mov     ecx, [ebp+var_10]
mov     eax, [edx+10h]
call    eax
mov     [ebp+var_8], eax
cmp     [ebp+var_8], 0
jge     short loc_10002f0b
mov     eax, 1
jmp     short loc_10002f0d
xor     eax, eax
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
sub     esp, 10h
mov     [ebp+var_10], ecx
mov     eax, [ebp+var_10]
mov     edx, [eax]
mov     ecx, [ebp+var_10]
mov     eax, [edx+14h]
call    eax
lea     ecx, [ebp+var_4]
push    ecx
mov     ecx, [ebp+var_10]
call    sub_10007ae0
test    eax, eax
jnz     loc_10003059
push    0
push    0
push    0
lea     edx, [ebp+var_8]
push    edx
mov     ecx, [ebp+var_10]
add     ecx, 48h
mov     eax, [ebp+var_10]
mov     edx, [eax+48h]
mov     eax, [edx+40h]
call    eax
mov     [ebp+var_c], eax
cmp     [ebp+var_c], 0
jge     short loc_10002f88
push    1
call    ds:sleep
jmp     short loc_10002f46
mov     ecx, [ebp+var_8]
push    ecx
mov     edx, [ebp+var_10]
mov     eax, [edx]
mov     ecx, [ebp+var_10]
mov     edx, [eax+8]
call    edx
mov     [ebp+var_c], eax
cmp     [ebp+var_c], 0
jnz     short loc_10002fd7
mov     eax, [ebp+var_8]
push    eax
mov     ecx, [ebp+var_10]
add     ecx, 48h
mov     edx, [ebp+var_10]
mov     eax, [edx+48h]
mov     edx, [eax+44h]
call    edx
mov     [ebp+var_c], eax
mov     eax, [ebp+var_8]
mov     ecx, [eax]
mov     edx, [ebp+var_8]
push    edx
mov     eax, [ecx+8]
call    eax
cmp     [ebp+var_c], 0
jz      short loc_10002fd5
xor     eax, eax
jmp     loc_10003093
jmp     short loc_10003054
cmp     [ebp+var_c], 1
jnz     short loc_10003005
mov     ecx, [ebp+var_8]
mov     edx, [ecx]
mov     eax, [ebp+var_8]
push    eax
mov     ecx, [edx+8]
call    ecx
mov     ecx, [ebp+var_10]
add     ecx, 48h
mov     edx, [ebp+var_10]
mov     eax, [edx+48h]
mov     edx, [eax+4ch]
call    edx
xor     eax, eax
jmp     loc_10003093
jmp     short loc_10003054
cmp     [ebp+var_c], 2
jnz     short loc_1000301a
push    5
call    ds:sleep
jmp     loc_10002f88
jmp     short loc_10003054
mov     eax, [ebp+var_8]
mov     ecx, [eax]
mov     edx, [ebp+var_8]
push    edx
mov     eax, [ecx+8]
call    eax
mov     ecx, [ebp+var_10]
add     ecx, 48h
mov     edx, [ebp+var_10]
mov     eax, [edx+48h]
mov     edx, [eax+4ch]
call    edx
push    0
mov     eax, [ebp+var_c]
push    eax
push    3
mov     ecx, [ebp+var_10]
mov     ecx, [ecx+0e8h]
call    sub_100042f0
mov     eax, [ebp+var_c]
jmp     short loc_10003093
jmp     loc_10002f46
cmp     [ebp+var_4], 2
jz      short loc_10003065
cmp     [ebp+var_4], 1
jnz     short loc_10003071
push    0
mov     ecx, [ebp+var_10]
call    sub_10007b30
jmp     short loc_10003084
cmp     [ebp+var_4], 3
jz      short loc_10003084
push    8000ffffh
mov     ecx, [ebp+var_10]
call    sub_10007b30
cmp     [ebp+var_4], 3
jnz     loc_10002f46
mov     eax, 1
mov     esp, ebp
pop     ebp
retn
sub     ecx, 48h
jmp     sub_10002800
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+lpcriticalsection], ecx
mov     eax, [ebp+lpcriticalsection]
push    eax
call    ds:deletecriticalsection
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
sub     esp, 8
mov     [ebp+var_8], ecx
push    0
mov     eax, [ebp+var_8]
add     eax, 14h
push    eax
call    ds:interlockedexchange
mov     [ebp+hhandle], eax
cmp     [ebp+hhandle], 0
jz      short loc_10003107
push    0ffffffffh
mov     ecx, [ebp+hhandle]
push    ecx
call    ds:waitforsingleobject
mov     edx, [ebp+hhandle]
push    edx
call    ds:closehandle
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
sub     esp, 1ch
mov     [ebp+var_18], ecx
mov     eax, [ebp+var_18]
mov     ecx, [eax+38h]
mov     [ebp+var_10], ecx
mov     edx, [ebp+var_10]
mov     [ebp+var_4], edx
mov     eax, [ebp+var_4]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     edx, [ebp+var_18]
cmp     dword ptr [edx+14h], 1
jz      short loc_10003153
mov     eax, [ebp+var_18]
cmp     dword ptr [eax+14h], 2
jz      short loc_10003153
mov     [ebp+var_1c], 0
jmp     short loc_1000315a
mov     [ebp+var_1c], 1
mov     ecx, [ebp+var_1c]
mov     [ebp+var_8], ecx
mov     edx, [ebp+var_4]
mov     [ebp+var_14], edx
mov     eax, [ebp+var_14]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_8]
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, 8000ffffh
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+var_4]
push    eax
call    sub_10003730
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     ecx, [ebp+var_4]
call    sub_10003490
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
sub     esp, 8
mov     [ebp+buf1], ecx
push    10h
mov     eax, [ebp+buf2]
push    eax
mov     ecx, [ebp+buf1]
push    ecx
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
cmp     eax, 1
jnz     loc_10003294
push    10h
mov     edx, [ebp+buf2]
add     edx, 10h
push    edx
mov     eax, [ebp+buf1]
add     eax, 10h
push    eax
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
cmp     eax, 1
jnz     short loc_10003294
push    10h
mov     ecx, [ebp+buf2]
add     ecx, 2ch
push    ecx
mov     edx, [ebp+buf1]
add     edx, 2ch
push    edx
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
cmp     eax, 1
jnz     short loc_10003294
mov     eax, [ebp+buf1]
mov     ecx, [ebp+buf2]
mov     edx, [eax+40h]
cmp     edx, [ecx+40h]
jnz     short loc_10003294
mov     eax, [ebp+buf1]
cmp     dword ptr [eax+40h], 0
jz      short loc_1000328b
mov     ecx, [ebp+buf1]
mov     edx, [ecx+40h]
push    edx
mov     eax, [ebp+buf2]
mov     ecx, [eax+44h]
push    ecx
mov     edx, [ebp+buf1]
mov     eax, [edx+44h]
push    eax
call    memcmp
add     esp, 0ch
test    eax, eax
jnz     short loc_10003294
mov     [ebp+var_8], 1
jmp     short loc_1000329b
mov     [ebp+var_8], 0
mov     eax, [ebp+var_8]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+arg_0]
push    eax
mov     ecx, [ebp+var_4]
call    sub_100032d0
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 8
mov     [ebp+var_8], ecx
mov     eax, [ebp+arg_0]
cmp     eax, [ebp+var_8]
jz      short loc_10003307
mov     ecx, [ebp+var_8]
push    ecx
call    sub_10003730
mov     edx, [ebp+arg_0]
push    edx
mov     eax, [ebp+var_8]
push    eax
call    sub_100036a0
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jge     short loc_10003307
mov     eax, 8007000eh
jmp     short loc_10003309
xor     eax, eax
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+arg_0]
mov     ecx, [ebp+var_4]
mov     edx, [eax]
mov     [ecx], edx
mov     edx, [eax+4]
mov     [ecx+4], edx
mov     edx, [eax+8]
mov     [ecx+8], edx
mov     eax, [eax+0ch]
mov     [ecx+0ch], eax
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+arg_0]
mov     ecx, [ebp+var_4]
add     ecx, 10h
mov     edx, [eax]
mov     [ecx], edx
mov     edx, [eax+4]
mov     [ecx+4], edx
mov     edx, [eax+8]
mov     [ecx+8], edx
mov     eax, [eax+0ch]
mov     [ecx+0ch], eax
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
cmp     [ebp+arg_0], 0
jnz     short loc_10003387
mov     ecx, [ebp+var_4]
call    sub_100033a0
jmp     short loc_1000339a
mov     eax, [ebp+var_4]
mov     dword ptr [eax+20h], 1
mov     ecx, [ebp+var_4]
mov     edx, [ebp+arg_0]
mov     [ecx+28h], edx
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+var_4]
mov     dword ptr [eax+20h], 0
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+arg_0]
mov     ecx, [ebp+var_4]
add     ecx, 2ch
mov     edx, [eax]
mov     [ecx], edx
mov     edx, [eax+4]
mov     [ecx+4], edx
mov     edx, [eax+8]
mov     [ecx+8], edx
mov     eax, [eax+0ch]
mov     [ecx+0ch], eax
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 8
mov     [ebp+var_8], ecx
mov     eax, [ebp+var_8]
mov     ecx, [eax+40h]
cmp     ecx, [ebp+cb]
jnz     short loc_1000342c
mov     edx, [ebp+var_8]
mov     eax, [edx+44h]
jmp     short loc_10003484
mov     eax, [ebp+cb]
push    eax
call    ds:cotaskmemalloc
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jnz     short loc_10003456
mov     ecx, [ebp+var_8]
mov     edx, [ebp+cb]
cmp     edx, [ecx+40h]
ja      short loc_10003452
mov     eax, [ebp+var_8]
mov     eax, [eax+44h]
jmp     short loc_10003484
xor     eax, eax
jmp     short loc_10003484
mov     ecx, [ebp+var_8]
cmp     dword ptr [ecx+40h], 0
jz      short loc_1000346c
mov     edx, [ebp+var_8]
mov     eax, [edx+44h]
push    eax
call    ds:cotaskmemfree
mov     ecx, [ebp+var_8]
mov     edx, [ebp+cb]
mov     [ecx+40h], edx
mov     eax, [ebp+var_8]
mov     ecx, [ebp+var_4]
mov     [eax+44h], ecx
mov     edx, [ebp+var_8]
mov     eax, [edx+44h]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
push    48h
push    0
mov     eax, [ebp+var_4]
push    eax
call    memset
add     esp, 0ch
mov     ecx, [ebp+var_4]
mov     dword ptr [ecx+28h], 1
mov     edx, [ebp+var_4]
mov     dword ptr [edx+20h], 1
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+buf1], ecx
push    10h
push    offset dword_1000a558
mov     eax, [ebp+buf1]
push    eax
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jnz     short loc_10003502
push    10h
push    offset dword_1000a558
mov     ecx, [ebp+buf1]
add     ecx, 2ch
push    ecx
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_1000350b
mov     eax, 1
jmp     short loc_1000350d
jmp     short loc_1000350d
xor     eax, eax
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
push    10h
push    offset dword_1000a558
mov     eax, [ebp+buf1]
push    eax
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_10003573
push    10h
mov     ecx, [ebp+buf1]
push    ecx
mov     edx, [ebp+var_4]
push    edx
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_10003573
xor     eax, eax
jmp     loc_1000365f
push    10h
push    offset dword_1000a558
mov     eax, [ebp+buf1]
add     eax, 10h
push    eax
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_100035c8
push    10h
mov     ecx, [ebp+buf1]
add     ecx, 10h
push    ecx
mov     edx, [ebp+var_4]
add     edx, 10h
push    edx
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_100035c8
xor     eax, eax
jmp     loc_1000365f
push    10h
push    offset dword_1000a558
mov     eax, [ebp+buf1]
add     eax, 2ch
push    eax
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_1000365a
push    10h
mov     ecx, [ebp+buf1]
add     ecx, 2ch
push    ecx
mov     edx, [ebp+var_4]
add     edx, 2ch
push    edx
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_1000361a
xor     eax, eax
jmp     short loc_1000365f
mov     eax, [ebp+var_4]
mov     ecx, [ebp+buf1]
mov     edx, [eax+40h]
cmp     edx, [ecx+40h]
jz      short loc_1000362c
xor     eax, eax
jmp     short loc_1000365f
mov     eax, [ebp+var_4]
cmp     dword ptr [eax+40h], 0
jz      short loc_1000365a
mov     ecx, [ebp+var_4]
mov     edx, [ecx+40h]
push    edx
mov     eax, [ebp+buf1]
mov     ecx, [eax+44h]
push    ecx
mov     edx, [ebp+var_4]
mov     eax, [edx+44h]
push    eax
call    memcmp
add     esp, 0ch
test    eax, eax
jz      short loc_1000365a
xor     eax, eax
jmp     short loc_1000365f
mov     eax, 1
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
cmp     [ebp+pv], 0
jnz     short loc_1000367b
jmp     short loc_1000368e
mov     eax, [ebp+pv]
push    eax
call    sub_10003730
mov     ecx, [ebp+pv]
push    ecx
call    ds:cotaskmemfree
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    esi
push    edi
mov     esi, [ebp+arg_4]
mov     ecx, 12h
mov     edi, [ebp+arg_0]
rep movsd
mov     eax, [ebp+arg_4]
cmp     dword ptr [eax+40h], 0
jz      short loc_10003707
mov     ecx, [ebp+arg_4]
mov     edx, [ecx+40h]
push    edx
call    ds:cotaskmemalloc
mov     ecx, [ebp+arg_0]
mov     [ecx+44h], eax
mov     edx, [ebp+arg_0]
cmp     dword ptr [edx+44h], 0
jnz     short loc_100036ea
mov     eax, [ebp+arg_0]
mov     dword ptr [eax+40h], 0
mov     eax, 8007000eh
jmp     short loc_10003726
jmp     short loc_10003707
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+40h]
push    edx
mov     eax, [ebp+arg_4]
mov     ecx, [eax+44h]
push    ecx
mov     edx, [ebp+arg_0]
mov     eax, [edx+44h]
push    eax
call    memcpy
add     esp, 0ch
mov     ecx, [ebp+arg_0]
cmp     dword ptr [ecx+3ch], 0
jz      short loc_10003724
mov     edx, [ebp+arg_0]
mov     eax, [edx+3ch]
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+3ch]
mov     eax, [eax]
push    edx
mov     ecx, [eax+4]
call    ecx
xor     eax, eax
pop     edi
pop     esi
pop     ebp
retn    8
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
cmp     dword ptr [eax+40h], 0
jz      short loc_1000375d
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+44h]
push    edx
call    ds:cotaskmemfree
mov     eax, [ebp+arg_0]
mov     dword ptr [eax+40h], 0
mov     ecx, [ebp+arg_0]
mov     dword ptr [ecx+44h], 0
mov     edx, [ebp+arg_0]
cmp     dword ptr [edx+3ch], 0
jz      short loc_10003784
mov     eax, [ebp+arg_0]
mov     ecx, [eax+3ch]
mov     edx, [ebp+arg_0]
mov     eax, [edx+3ch]
mov     ecx, [ecx]
push    eax
mov     edx, [ecx+8]
call    edx
mov     eax, [ebp+arg_0]
mov     dword ptr [eax+3ch], 0
pop     ebp
retn    4
push    ebp
mov     ebp, esp
mov     eax, [ebp+ppv]
push    eax
push    offset riid
push    1
push    0
push    offset rclsid
call    ds:cocreateinstance
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 10h
push    10h
push    offset dword_1000a3ac
mov     eax, [ebp+buf1]
push    eax
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_10003801
cmp     [ebp+arg_0], 0
jz      short loc_100037e3
mov     ecx, [ebp+arg_0]
add     ecx, 0ch
mov     [ebp+var_4], ecx
jmp     short loc_100037ea
mov     [ebp+var_4], 0
mov     edx, [ebp+arg_8]
push    edx
mov     eax, [ebp+var_4]
push    eax
call    sub_10006a20
jmp     loc_100038e7
jmp     loc_100038e7
push    10h
push    offset dword_1000a3bc
mov     ecx, [ebp+buf1]
push    ecx
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_1000384c
cmp     [ebp+arg_0], 0
jz      short loc_1000382e
mov     edx, [ebp+arg_0]
add     edx, 0ch
mov     [ebp+var_8], edx
jmp     short loc_10003835
mov     [ebp+var_8], 0
mov     eax, [ebp+arg_8]
push    eax
mov     ecx, [ebp+var_8]
push    ecx
call    sub_10006a20
jmp     loc_100038e7
jmp     loc_100038e7
push    10h
push    offset dword_1000a588
mov     edx, [ebp+buf1]
push    edx
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_10003891
cmp     [ebp+arg_0], 0
jz      short loc_10003879
mov     eax, [ebp+arg_0]
add     eax, 0ch
mov     [ebp+var_c], eax
jmp     short loc_10003880
mov     [ebp+var_c], 0
mov     ecx, [ebp+arg_8]
push    ecx
mov     edx, [ebp+var_c]
push    edx
call    sub_10006a20
jmp     short loc_100038e7
jmp     short loc_100038e7
push    10h
push    offset dword_1000a37c
mov     eax, [ebp+buf1]
push    eax
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_100038d6
cmp     [ebp+arg_0], 0
jz      short loc_100038be
mov     ecx, [ebp+arg_0]
add     ecx, 10h
mov     [ebp+var_10], ecx
jmp     short loc_100038c5
mov     [ebp+var_10], 0
mov     edx, [ebp+arg_8]
push    edx
mov     eax, [ebp+var_10]
push    eax
call    sub_10006a20
jmp     short loc_100038e7
jmp     short loc_100038e7
mov     ecx, [ebp+arg_8]
push    ecx
mov     edx, [ebp+buf1]
push    edx
mov     eax, [ebp+arg_0]
push    eax
call    sub_100068e0
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
sub     esp, 8
mov     [ebp+var_8], ecx
mov     eax, [ebp+arg_4]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
mov     ecx, [ebp+var_8]
call    sub_10006890
mov     edx, [ebp+var_8]
mov     dword ptr [edx+14h], 0
mov     eax, [ebp+var_8]
mov     dword ptr [eax+18h], 0
mov     ecx, [ebp+var_8]
add     ecx, 20h
mov     [ebp+var_4], ecx
mov     edx, [ebp+var_4]
mov     dword ptr [edx], 0
mov     dword ptr [edx+4], 0
mov     eax, [ebp+arg_c]
mov     ecx, [ebp+var_8]
add     ecx, 28h
mov     edx, [eax]
mov     [ecx], edx
mov     edx, [eax+4]
mov     [ecx+4], edx
mov     edx, [eax+8]
mov     [ecx+8], edx
mov     eax, [eax+0ch]
mov     [ecx+0ch], eax
mov     ecx, [ebp+var_8]
mov     edx, [ebp+arg_8]
mov     [ecx+38h], edx
mov     eax, [ebp+var_8]
mov     dword ptr [eax+3ch], 0
mov     ecx, [ebp+var_8]
mov     dword ptr [ecx+40h], 0
mov     edx, [ebp+var_8]
mov     dword ptr [edx+44h], 0
mov     eax, [ebp+var_8]
mov     dword ptr [eax+48h], 1
mov     eax, [ebp+var_8]
mov     esp, ebp
pop     ebp
retn    10h
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10003990
mov     eax, large fs:0
push    eax
sub     esp, 8
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_14], ecx
mov     [ebp+var_4], 0
mov     eax, [ebp+var_14]
mov     ecx, [eax+3ch]
mov     [ebp+var_10], ecx
mov     edx, [ebp+var_10]
push    edx
call    ??_v@yaxpax@z
add     esp, 4
mov     eax, [ebp+var_14]
cmp     dword ptr [eax+18h], 0
jz      short loc_100039fb
mov     ecx, [ebp+var_14]
mov     edx, [ecx+18h]
mov     eax, [ebp+var_14]
mov     ecx, [eax+18h]
mov     edx, [edx]
push    ecx
mov     eax, [edx+8]
call    eax
mov     ecx, [ebp+var_14]
mov     dword ptr [ecx+18h], 0
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_14]
add     ecx, 4
call    sub_10006850
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
cmp     [ebp+arg_4], 0
jnz     short loc_10003a30
mov     eax, 80004003h
jmp     short loc_10003a51
mov     eax, [ebp+arg_0]
add     eax, 1ch
mov     ecx, [ebp+arg_4]
mov     edx, [eax]
mov     [ecx], edx
mov     edx, [eax+4]
mov     [ecx+4], edx
mov     edx, [eax+8]
mov     [ecx+8], edx
mov     eax, [eax+0ch]
mov     [ecx+0ch], eax
xor     eax, eax
pop     ebp
retn    8
push    ebp
mov     ebp, esp
cmp     [ebp+arg_8], 0
jnz     short loc_10003a70
mov     eax, 80004003h
jmp     short loc_10003a7d
mov     eax, [ebp+arg_8]
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+8]
mov     [eax], edx
xor     eax, eax
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10003a90
mov     eax, large fs:0
push    eax
sub     esp, 14h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     eax, [ebp+arg_0]
mov     ecx, [eax+2ch]
mov     [ebp+var_1c], ecx
mov     edx, [ebp+var_1c]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     [ebp+var_4], 0
cmp     [ebp+arg_4], 0
jz      short loc_10003aef
mov     edx, [ebp+arg_4]
mov     eax, [edx]
mov     ecx, [ebp+arg_4]
push    ecx
mov     edx, [eax+4]
call    edx
mov     eax, [ebp+arg_0]
cmp     dword ptr [eax+0ch], 0
jz      short loc_10003b0c
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+0ch]
mov     eax, [ebp+arg_0]
mov     ecx, [eax+0ch]
mov     edx, [edx]
push    ecx
mov     eax, [edx+8]
call    eax
mov     ecx, [ebp+arg_0]
mov     edx, [ebp+arg_4]
mov     [ecx+0ch], edx
mov     [ebp+var_14], 0
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_10]
mov     [ebp+var_20], eax
mov     ecx, [ebp+var_20]
push    ecx
call    ds:leavecriticalsection
mov     eax, [ebp+var_14]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10003a90
mov     eax, large fs:0
push    eax
sub     esp, 14h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
cmp     [ebp+arg_4], 0
jnz     short loc_10003b82
mov     eax, 80004003h
jmp     short loc_10003bf1
mov     eax, [ebp+arg_0]
mov     ecx, [eax+2ch]
mov     [ebp+var_1c], ecx
mov     edx, [ebp+var_1c]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     [ebp+var_4], 0
mov     edx, [ebp+arg_0]
cmp     dword ptr [edx+0ch], 0
jz      short loc_10003bc5
mov     eax, [ebp+arg_0]
mov     ecx, [eax+0ch]
mov     edx, [ebp+arg_0]
mov     eax, [edx+0ch]
mov     ecx, [ecx]
push    eax
mov     edx, [ecx+4]
call    edx
mov     eax, [ebp+arg_4]
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+0ch]
mov     [eax], edx
mov     [ebp+var_14], 0
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_10]
mov     [ebp+var_20], eax
mov     ecx, [ebp+var_20]
push    ecx
call    ds:leavecriticalsection
mov     eax, [ebp+var_14]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_100029f0
mov     eax, large fs:0
push    eax
sub     esp, 28h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     eax, [ebp+arg_0]
mov     ecx, [eax+2ch]
mov     [ebp+var_30], ecx
mov     edx, [ebp+var_30]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     [ebp+var_4], 0
mov     [ebp+var_14], 0
mov     edx, [ebp+arg_0]
cmp     dword ptr [edx+8], 0
jz      short loc_10003ce5
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     eax, [ebp+arg_0]
mov     edx, [eax-0ch]
mov     eax, [edx+18h]
call    eax
mov     [ebp+var_18], eax
mov     [ebp+var_1c], 0
jmp     short loc_10003c91
mov     ecx, [ebp+var_1c]
add     ecx, 1
mov     [ebp+var_1c], ecx
mov     edx, [ebp+var_1c]
cmp     edx, [ebp+var_18]
jge     short loc_10003ce5
mov     eax, [ebp+var_1c]
push    eax
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     edx, [ebp+arg_0]
mov     eax, [edx-0ch]
mov     edx, [eax+1ch]
call    edx
mov     [ebp+var_20], eax
mov     eax, [ebp+var_20]
xor     ecx, ecx
cmp     dword ptr [eax+18h], 0
setnz   cl
test    ecx, ecx
jz      short loc_10003ce3
mov     edx, [ebp+var_20]
mov     eax, [edx]
mov     ecx, [ebp+var_20]
mov     edx, [eax+18h]
call    edx
mov     [ebp+var_24], eax
cmp     [ebp+var_24], 0
jge     short loc_10003ce3
cmp     [ebp+var_14], 0
jl      short loc_10003ce3
mov     eax, [ebp+var_24]
mov     [ebp+var_14], eax
jmp     short loc_10003c88
mov     ecx, [ebp+arg_0]
mov     dword ptr [ecx+8], 0
mov     edx, [ebp+var_14]
mov     [ebp+var_28], edx
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_10]
mov     [ebp+var_34], eax
mov     ecx, [ebp+var_34]
push    ecx
call    ds:leavecriticalsection
mov     eax, [ebp+var_28]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10003d20
mov     eax, large fs:0
push    eax
sub     esp, 2ch
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     eax, [ebp+arg_0]
mov     ecx, [eax+2ch]
mov     [ebp+var_30], ecx
mov     edx, [ebp+var_30]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     [ebp+var_4], 0
mov     edx, [ebp+arg_0]
cmp     dword ptr [edx+8], 0
jnz     loc_10003e08
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     eax, [ebp+arg_0]
mov     edx, [eax-0ch]
mov     eax, [edx+18h]
call    eax
mov     [ebp+var_14], eax
mov     [ebp+var_18], 0
jmp     short loc_10003d9e
mov     ecx, [ebp+var_18]
add     ecx, 1
mov     [ebp+var_18], ecx
mov     edx, [ebp+var_18]
cmp     edx, [ebp+var_14]
jge     short loc_10003e08
mov     eax, [ebp+var_18]
push    eax
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     edx, [ebp+arg_0]
mov     eax, [edx-0ch]
mov     edx, [eax+1ch]
call    edx
mov     [ebp+var_1c], eax
mov     eax, [ebp+var_1c]
xor     ecx, ecx
cmp     dword ptr [eax+18h], 0
setnz   cl
test    ecx, ecx
jz      short loc_10003e06
mov     edx, [ebp+var_1c]
mov     eax, [edx]
mov     ecx, [ebp+var_1c]
mov     edx, [eax+14h]
call    edx
mov     [ebp+var_20], eax
cmp     [ebp+var_20], 0
jge     short loc_10003e06
mov     eax, [ebp+var_20]
mov     [ebp+var_24], eax
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_10]
mov     [ebp+var_34], ecx
mov     edx, [ebp+var_34]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_24]
jmp     short loc_10003e33
jmp     short loc_10003d95
mov     eax, [ebp+arg_0]
mov     dword ptr [eax+8], 1
mov     [ebp+var_28], 0
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_10]
mov     [ebp+var_38], ecx
mov     edx, [ebp+var_38]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_28]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10003e50
mov     eax, large fs:0
push    eax
sub     esp, 3ch
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     eax, [ebp+arg_0]
mov     ecx, [eax+2ch]
mov     [ebp+var_38], ecx
mov     edx, [ebp+var_38]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     [ebp+var_4], 0
mov     edx, [ebp+arg_0]
add     edx, 14h
mov     [ebp+var_3c], edx
mov     eax, [ebp+var_3c]
mov     ecx, [ebp+arg_4]
mov     [eax], ecx
mov     edx, [ebp+arg_8]
mov     [eax+4], edx
mov     eax, [ebp+arg_0]
cmp     dword ptr [eax+8], 0
jnz     short loc_10003ef7
mov     ecx, [ebp+arg_0]
mov     edx, [ebp+arg_0]
mov     eax, [edx]
push    ecx
mov     ecx, [eax+14h]
call    ecx
mov     [ebp+var_14], eax
cmp     [ebp+var_14], 0
jge     short loc_10003ef7
mov     edx, [ebp+var_14]
mov     [ebp+var_28], edx
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_10]
mov     [ebp+var_40], eax
mov     ecx, [ebp+var_40]
push    ecx
call    ds:leavecriticalsection
mov     eax, [ebp+var_28]
jmp     loc_10003fc7
mov     edx, [ebp+arg_0]
cmp     dword ptr [edx+8], 2
jz      loc_10003f9c
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     eax, [ebp+arg_0]
mov     edx, [eax-0ch]
mov     eax, [edx+18h]
call    eax
mov     [ebp+var_18], eax
mov     [ebp+var_1c], 0
jmp     short loc_10003f2a
mov     ecx, [ebp+var_1c]
add     ecx, 1
mov     [ebp+var_1c], ecx
mov     edx, [ebp+var_1c]
cmp     edx, [ebp+var_18]
jge     short loc_10003f9c
mov     eax, [ebp+var_1c]
push    eax
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     edx, [ebp+arg_0]
mov     eax, [edx-0ch]
mov     edx, [eax+1ch]
call    edx
mov     [ebp+var_20], eax
mov     eax, [ebp+var_20]
xor     ecx, ecx
cmp     dword ptr [eax+18h], 0
setnz   cl
test    ecx, ecx
jz      short loc_10003f9a
mov     edx, [ebp+arg_8]
push    edx
mov     eax, [ebp+arg_4]
push    eax
mov     ecx, [ebp+var_20]
mov     edx, [ecx]
mov     ecx, [ebp+var_20]
mov     eax, [edx+1ch]
call    eax
mov     [ebp+var_24], eax
cmp     [ebp+var_24], 0
jge     short loc_10003f9a
mov     ecx, [ebp+var_24]
mov     [ebp+var_2c], ecx
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+var_10]
mov     [ebp+var_44], edx
mov     eax, [ebp+var_44]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_2c]
jmp     short loc_10003fc7
jmp     short loc_10003f21
mov     ecx, [ebp+arg_0]
mov     dword ptr [ecx+8], 2
mov     [ebp+var_30], 0
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+var_10]
mov     [ebp+var_48], edx
mov     eax, [ebp+var_48]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_30]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
sub     esp, 18h
mov     [ebp+var_18], ecx
mov     eax, [ebp+var_18]
cmp     dword ptr [eax+18h], 0
jnz     short loc_10003ff9
mov     eax, 80040213h
jmp     short loc_10004052
mov     ecx, [ebp+arg_0]
push    ecx
mov     edx, [ebp+var_18]
mov     eax, [edx+18h]
mov     ecx, [ebp+var_18]
mov     edx, [ecx+18h]
mov     eax, [eax]
push    edx
mov     ecx, [eax+0ch]
call    ecx
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jge     short loc_1000401f
mov     eax, [ebp+var_4]
jmp     short loc_10004052
mov     edx, [ebp+arg_0]
mov     eax, [edx]
mov     [ebp+var_c], eax
mov     ecx, [edx+4]
mov     [ebp+var_8], ecx
mov     edx, [ebp+var_18]
mov     eax, [edx+20h]
mov     [ebp+var_14], eax
mov     ecx, [edx+24h]
mov     [ebp+var_10], ecx
mov     edx, [ebp+var_c]
sub     edx, [ebp+var_14]
mov     eax, [ebp+var_8]
sbb     eax, [ebp+var_10]
mov     ecx, [ebp+arg_0]
mov     [ecx], edx
mov     [ecx+4], eax
xor     eax, eax
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10004060
mov     eax, large fs:0
push    eax
sub     esp, 0ch
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
cmp     [ebp+arg_4], 0
jnz     short loc_10004092
mov     eax, 80004003h
jmp     short loc_100040f1
push    30h
call    ??2@yapaxi@z
add     esp, 4
mov     [ebp+var_14], eax
mov     [ebp+var_4], 0
cmp     [ebp+var_14], 0
jz      short loc_100040c2
push    0
mov     eax, [ebp+arg_0]
sub     eax, 0ch
push    eax
mov     ecx, [ebp+var_14]
call    sub_100044b0
mov     [ebp+var_18], eax
jmp     short loc_100040c9
mov     [ebp+var_18], 0
mov     ecx, [ebp+var_18]
mov     [ebp+var_10], ecx
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+arg_4]
mov     eax, [ebp+var_10]
mov     [edx], eax
mov     ecx, [ebp+arg_4]
mov     eax, [ecx]
neg     eax
sbb     eax, eax
and     eax, 7ff8fff2h
add     eax, 8007000eh
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
cmp     [ebp+arg_4], 0
jnz     short loc_10004120
mov     eax, 80004003h
jmp     short loc_10004176
mov     eax, [ebp+arg_0]
cmp     dword ptr [eax+30h], 0
jz      short loc_10004140
push    80h
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+30h]
push    edx
mov     eax, [ebp+arg_4]
push    eax
call    sub_10007bb0
jmp     short loc_10004148
xor     ecx, ecx
mov     edx, [ebp+arg_4]
mov     [edx], cx
mov     eax, [ebp+arg_4]
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+34h]
mov     [eax+100h], edx
mov     eax, [ebp+arg_0]
cmp     dword ptr [eax+34h], 0
jz      short loc_10004174
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+34h]
mov     eax, [ebp+arg_0]
mov     ecx, [eax+34h]
mov     edx, [edx]
push    ecx
mov     eax, [edx+4]
call    eax
xor     eax, eax
pop     ebp
retn    8
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10004180
mov     eax, large fs:0
push    eax
sub     esp, 24h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     eax, [ebp+arg_0]
mov     ecx, [eax+2ch]
mov     [ebp+var_2c], ecx
mov     edx, [ebp+var_2c]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     [ebp+var_4], 0
mov     edx, [ebp+arg_0]
mov     eax, [ebp+arg_4]
mov     [edx+34h], eax
mov     ecx, [ebp+arg_0]
cmp     dword ptr [ecx+34h], 0
jz      short loc_1000421d
mov     edx, [ebp+arg_0]
add     edx, 38h
push    edx
push    offset dword_1000a33c
mov     eax, [ebp+arg_0]
mov     ecx, [eax+34h]
mov     edx, [ebp+arg_0]
mov     eax, [edx+34h]
mov     ecx, [ecx]
push    eax
mov     edx, [ecx]
call    edx
mov     [ebp+var_14], eax
cmp     [ebp+var_14], 0
jge     short loc_10004207
jmp     short loc_1000421b
mov     eax, [ebp+arg_0]
mov     ecx, [eax+38h]
mov     edx, [ebp+arg_0]
mov     eax, [edx+38h]
mov     ecx, [ecx]
push    eax
mov     edx, [ecx+8]
call    edx
jmp     short loc_10004227
mov     eax, [ebp+arg_0]
mov     dword ptr [eax+38h], 0
mov     ecx, [ebp+arg_0]
cmp     dword ptr [ecx+30h], 0
jz      short loc_1000424f
mov     edx, [ebp+arg_0]
mov     eax, [edx+30h]
mov     [ebp+var_1c], eax
mov     ecx, [ebp+var_1c]
push    ecx
call    ??_v@yaxpax@z
add     esp, 4
mov     edx, [ebp+arg_0]
mov     dword ptr [edx+30h], 0
cmp     [ebp+src], 0
jz      short loc_100042ae
mov     eax, [ebp+src]
push    eax
call    sub_10007c10
add     eax, 1
mov     [ebp+var_18], eax
xor     ecx, ecx
mov     eax, [ebp+var_18]
mov     edx, 2
mul     edx
seto    cl
neg     ecx
or      ecx, eax
push    ecx
call    ??_u@yapaxi@z
add     esp, 4
mov     [ebp+var_20], eax
mov     eax, [ebp+arg_0]
mov     ecx, [ebp+var_20]
mov     [eax+30h], ecx
mov     edx, [ebp+arg_0]
cmp     dword ptr [edx+30h], 0
jz      short loc_100042ae
mov     eax, [ebp+var_18]
shl     eax, 1
push    eax
mov     ecx, [ebp+src]
push    ecx
mov     edx, [ebp+arg_0]
mov     eax, [edx+30h]
push    eax
call    memcpy
add     esp, 0ch
mov     [ebp+var_24], 0
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_10]
mov     [ebp+var_30], ecx
mov     edx, [ebp+var_30]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_24]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
mov     eax, 80004001h
pop     ebp
retn    8
push    ebp
mov     ebp, esp
sub     esp, 0ch
mov     [ebp+var_8], ecx
mov     eax, [ebp+var_8]
mov     ecx, [eax+44h]
mov     [ebp+var_4], ecx
cmp     [ebp+var_4], 0
jz      short loc_1000434a
cmp     [ebp+arg_0], 1
jnz     short loc_1000432c
cmp     [ebp+var_8], 0
jz      short loc_1000431f
mov     edx, [ebp+var_8]
add     edx, 0ch
mov     [ebp+var_c], edx
jmp     short loc_10004326
mov     [ebp+var_c], 0
mov     eax, [ebp+var_c]
mov     [ebp+arg_8], eax
mov     ecx, [ebp+arg_8]
push    ecx
mov     edx, [ebp+arg_4]
push    edx
mov     eax, [ebp+arg_0]
push    eax
mov     ecx, [ebp+var_4]
mov     edx, [ecx]
mov     eax, [ebp+var_4]
push    eax
mov     ecx, [edx+0ch]
call    ecx
jmp     short loc_1000434f
jmp     short loc_1000434f
mov     eax, 80004001h
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
sub     esp, 0ch
mov     ecx, [ebp+arg_0]
sub     ecx, 10h
mov     eax, [ebp+arg_0]
mov     edx, [eax-10h]
mov     eax, [edx+20h]
call    eax
mov     [ebp+var_c], eax
cmp     [ebp+var_c], 0
jnz     short loc_100043a7
mov     eax, 1
jmp     short loc_10004401
push    0
call    ds:coinitialize
mov     [ebp+var_4], eax
lea     ecx, [ebp+ppv]
push    ecx
push    offset stru_1000a36c
push    1
push    0
push    offset stru_1000a42c
call    ds:cocreateinstance
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jl      short loc_100043f3
push    1
mov     edx, [ebp+ppv]
push    edx
mov     eax, [ebp+var_c]
push    eax
call    sub_100065a0
mov     [ebp+var_4], eax
mov     ecx, [ebp+ppv]
mov     edx, [ecx]
mov     eax, [ebp+ppv]
push    eax
mov     ecx, [edx+8]
call    ecx
call    ds:cofreeunusedlibraries
call    ds:couninitialize
xor     eax, eax
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 0ch
mov     ecx, [ebp+arg_0]
sub     ecx, 10h
mov     eax, [ebp+arg_0]
mov     edx, [eax-10h]
mov     eax, [edx+20h]
call    eax
mov     [ebp+var_c], eax
cmp     [ebp+var_c], 0
jnz     short loc_10004437
mov     eax, 1
jmp     short loc_100044a1
push    0
call    ds:coinitialize
mov     [ebp+var_4], eax
lea     ecx, [ebp+ppv]
push    ecx
push    offset stru_1000a36c
push    1
push    0
push    offset stru_1000a42c
call    ds:cocreateinstance
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jl      short loc_10004483
push    0
mov     edx, [ebp+ppv]
push    edx
mov     eax, [ebp+var_c]
push    eax
call    sub_100065a0
mov     [ebp+var_4], eax
mov     ecx, [ebp+ppv]
mov     edx, [ecx]
mov     eax, [ebp+ppv]
push    eax
mov     ecx, [edx+8]
call    ecx
call    ds:cofreeunusedlibraries
call    ds:couninitialize
cmp     [ebp+var_4], 80070002h
jnz     short loc_1000449e
xor     eax, eax
jmp     short loc_100044a1
jmp     short loc_100044a1
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10004620
mov     eax, large fs:0
push    eax
sub     esp, 8
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_14], ecx
mov     eax, [ebp+var_14]
mov     dword ptr [eax], offset ??_7cenumpins@@6b@
mov     ecx, [ebp+var_14]
mov     dword ptr [ecx+4], 0
mov     edx, [ebp+var_14]
mov     dword ptr [edx+8], 0
mov     eax, [ebp+var_14]
mov     ecx, [ebp+arg_0]
mov     [eax+0ch], ecx
mov     edx, [ebp+var_14]
mov     dword ptr [edx+14h], 1
mov     eax, [ebp+var_14]
add     eax, 18h
mov     [ebp+var_10], eax
push    0
mov     ecx, [ebp+var_10]
call    sub_10007c90
mov     [ebp+var_4], 0
mov     ecx, [ebp+var_14]
mov     edx, [ecx+0ch]
mov     eax, [ebp+var_14]
mov     ecx, [eax+0ch]
add     ecx, 0ch
mov     edx, [edx+0ch]
push    ecx
mov     eax, [edx+4]
call    eax
cmp     [ebp+arg_4], 0
jnz     short loc_10004574
mov     ecx, [ebp+var_14]
mov     edx, [ecx+0ch]
mov     eax, [ebp+var_14]
mov     ecx, [eax+0ch]
mov     edx, [edx]
mov     eax, [edx+14h]
call    eax
mov     ecx, [ebp+var_14]
mov     [ecx+10h], eax
mov     edx, [ebp+var_14]
mov     eax, [edx+0ch]
mov     ecx, [ebp+var_14]
mov     ecx, [ecx+0ch]
mov     edx, [eax]
mov     eax, [edx+18h]
call    eax
mov     ecx, [ebp+var_14]
mov     [ecx+8], eax
jmp     short loc_100045aa
mov     edx, [ebp+var_14]
mov     eax, [ebp+arg_4]
mov     ecx, [eax+4]
mov     [edx+4], ecx
mov     edx, [ebp+var_14]
mov     eax, [ebp+arg_4]
mov     ecx, [eax+8]
mov     [edx+8], ecx
mov     edx, [ebp+var_14]
mov     eax, [ebp+arg_4]
mov     ecx, [eax+10h]
mov     [edx+10h], ecx
mov     edx, [ebp+arg_4]
add     edx, 18h
push    edx
mov     ecx, [ebp+var_14]
add     ecx, 18h
call    sub_10007fb0
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_14]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     ecx, [ebp+var_4]
call    sub_10004620
mov     eax, [ebp+arg_0]
and     eax, 1
jz      short loc_100045f3
mov     ecx, [ebp+var_4]
push    ecx
call    ??3@yaxpax@z
add     esp, 4
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     ecx, [ebp+var_4]
call    sub_10007cf0
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10004620
mov     eax, large fs:0
push    eax
sub     esp, 8
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_14], ecx
mov     eax, [ebp+var_14]
mov     dword ptr [eax], offset ??_7cenumpins@@6b@
mov     [ebp+var_4], 0
mov     ecx, [ebp+var_14]
mov     edx, [ecx+0ch]
mov     eax, [ebp+var_14]
mov     ecx, [eax+0ch]
add     ecx, 0ch
mov     edx, [edx+0ch]
push    ecx
mov     eax, [edx+8]
call    eax
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_14]
add     ecx, 18h
mov     [ebp+var_10], ecx
mov     ecx, [ebp+var_10]
call    sub_10007cf0
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
cmp     [ebp+arg_8], 0
jnz     short loc_100046b0
mov     eax, 80004003h
jmp     short loc_10004707
push    10h
push    offset dword_1000a3dc
mov     eax, [ebp+buf1]
push    eax
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jnz     short loc_100046e8
push    10h
push    offset dword_1000a568
mov     ecx, [ebp+buf1]
push    ecx
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_100046f9
mov     edx, [ebp+arg_8]
push    edx
mov     eax, [ebp+arg_0]
push    eax
call    sub_10006a20
jmp     short loc_10004707
jmp     short loc_10004707
mov     ecx, [ebp+arg_8]
mov     dword ptr [ecx], 0
mov     eax, 80004002h
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
add     eax, 14h
push    eax
call    ds:interlockedincrement
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 10h
mov     eax, [ebp+arg_0]
add     eax, 14h
push    eax
call    ds:interlockeddecrement
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jnz     short loc_10004779
mov     ecx, [ebp+arg_0]
mov     [ebp+var_c], ecx
mov     edx, [ebp+var_c]
mov     [ebp+var_8], edx
cmp     [ebp+var_8], 0
jz      short loc_10004772
push    1
mov     eax, [ebp+var_8]
mov     edx, [eax]
mov     ecx, [ebp+var_8]
mov     eax, [edx+1ch]
call    eax
mov     [ebp+var_10], eax
jmp     short loc_10004779
mov     [ebp+var_10], 0
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10004790
mov     eax, large fs:0
push    eax
sub     esp, 10h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
cmp     [ebp+arg_4], 0
jnz     short loc_100047c5
mov     eax, 80004003h
jmp     loc_10004861
mov     [ebp+var_10], 0
mov     eax, [ebp+arg_0]
mov     ecx, [eax+0ch]
mov     edx, [ebp+arg_0]
mov     eax, [edx+0ch]
mov     edx, [eax]
mov     eax, [edx+14h]
call    eax
mov     ecx, [ebp+arg_0]
xor     edx, edx
cmp     eax, [ecx+10h]
setnz   dl
cmp     edx, 1
jnz     short loc_10004801
mov     eax, [ebp+arg_4]
mov     dword ptr [eax], 0
mov     [ebp+var_10], 80040203h
jmp     short loc_1000485e
push    30h
call    ??2@yapaxi@z
add     esp, 4
mov     [ebp+var_18], eax
mov     [ebp+var_4], 0
cmp     [ebp+var_18], 0
jz      short loc_10004833
mov     ecx, [ebp+arg_0]
push    ecx
mov     edx, [ebp+arg_0]
mov     eax, [edx+0ch]
push    eax
mov     ecx, [ebp+var_18]
call    sub_100044b0
mov     [ebp+var_1c], eax
jmp     short loc_1000483a
mov     [ebp+var_1c], 0
mov     ecx, [ebp+var_1c]
mov     [ebp+var_14], ecx
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+arg_4]
mov     eax, [ebp+var_14]
mov     [edx], eax
mov     ecx, [ebp+arg_4]
cmp     dword ptr [ecx], 0
jnz     short loc_1000485e
mov     [ebp+var_10], 8007000eh
mov     eax, [ebp+var_10]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
sub     esp, 18h
cmp     [ebp+arg_8], 0
jnz     short loc_10004896
mov     eax, 80004003h
jmp     loc_10004a15
cmp     [ebp+arg_c], 0
jz      short loc_100048a7
mov     eax, [ebp+arg_c]
mov     dword ptr [eax], 0
jmp     short loc_100048b7
cmp     [ebp+arg_4], 1
jbe     short loc_100048b7
mov     eax, 80070057h
jmp     loc_10004a15
mov     [ebp+var_4], 0
mov     ecx, [ebp+arg_0]
mov     ecx, [ecx+0ch]
mov     edx, [ebp+arg_0]
mov     eax, [edx+0ch]
mov     edx, [eax]
mov     eax, [edx+14h]
call    eax
mov     ecx, [ebp+arg_0]
xor     edx, edx
cmp     eax, [ecx+10h]
setnz   dl
cmp     edx, 1
jnz     short loc_100048ea
mov     eax, [ebp+arg_0]
push    eax
call    sub_10004b10
mov     ecx, [ebp+arg_0]
mov     edx, [ebp+arg_0]
mov     eax, [ecx+8]
sub     eax, [edx+4]
cmp     eax, [ebp+arg_4]
jge     short loc_1000490c
mov     ecx, [ebp+arg_0]
mov     edx, [ebp+arg_0]
mov     eax, [ecx+8]
sub     eax, [edx+4]
mov     [ebp+var_10], eax
jmp     short loc_10004912
mov     ecx, [ebp+arg_4]
mov     [ebp+var_10], ecx
mov     edx, [ebp+var_10]
mov     [ebp+var_8], edx
cmp     [ebp+var_8], 0
jnz     short loc_10004928
mov     eax, 1
jmp     loc_10004a15
cmp     [ebp+var_8], 0
jz      loc_100049fa
mov     eax, [ebp+arg_0]
mov     ecx, [ebp+arg_0]
mov     edx, [eax+8]
sub     edx, [ecx+4]
jz      loc_100049fa
mov     eax, [ebp+arg_0]
mov     ecx, [eax+4]
mov     [ebp+var_14], ecx
mov     edx, [ebp+arg_0]
mov     eax, [edx+4]
add     eax, 1
mov     ecx, [ebp+arg_0]
mov     [ecx+4], eax
mov     edx, [ebp+var_14]
push    edx
mov     eax, [ebp+arg_0]
mov     ecx, [eax+0ch]
mov     edx, [ebp+arg_0]
mov     eax, [edx+0ch]
mov     edx, [eax]
mov     eax, [edx+1ch]
call    eax
mov     [ebp+var_c], eax
cmp     [ebp+var_c], 0
jnz     short loc_10004986
mov     eax, 80040203h
jmp     loc_10004a15
mov     ecx, [ebp+var_c]
push    ecx
mov     ecx, [ebp+arg_0]
add     ecx, 18h
call    sub_10007e50
test    eax, eax
jnz     short loc_100049f5
cmp     [ebp+var_c], 0
jz      short loc_100049aa
mov     edx, [ebp+var_c]
add     edx, 0ch
mov     [ebp+var_18], edx
jmp     short loc_100049b1
mov     [ebp+var_18], 0
mov     eax, [ebp+arg_8]
mov     ecx, [ebp+var_18]
mov     [eax], ecx
mov     edx, [ebp+var_c]
add     edx, 0ch
mov     eax, [ebp+var_c]
mov     ecx, [eax+0ch]
push    edx
mov     edx, [ecx+4]
call    edx
mov     eax, [ebp+var_4]
add     eax, 1
mov     [ebp+var_4], eax
mov     ecx, [ebp+arg_8]
add     ecx, 4
mov     [ebp+arg_8], ecx
mov     edx, [ebp+var_c]
push    edx
mov     ecx, [ebp+arg_0]
add     ecx, 18h
call    sub_10007ec0
mov     eax, [ebp+var_8]
sub     eax, 1
mov     [ebp+var_8], eax
jmp     loc_10004928
cmp     [ebp+arg_c], 0
jz      short loc_10004a08
mov     ecx, [ebp+arg_c]
mov     edx, [ebp+var_4]
mov     [ecx], edx
mov     eax, [ebp+arg_4]
xor     ecx, ecx
cmp     eax, [ebp+var_4]
setnz   cl
mov     eax, ecx
mov     esp, ebp
pop     ebp
retn    10h
push    ebp
mov     ebp, esp
push    ecx
mov     eax, [ebp+arg_0]
mov     ecx, [eax+0ch]
mov     edx, [ebp+arg_0]
mov     eax, [edx+0ch]
mov     edx, [eax]
mov     eax, [edx+14h]
call    eax
mov     ecx, [ebp+arg_0]
xor     edx, edx
cmp     eax, [ecx+10h]
setnz   dl
cmp     edx, 1
jnz     short loc_10004a4e
mov     eax, 80040203h
jmp     short loc_10004a7d
mov     eax, [ebp+arg_0]
mov     ecx, [ebp+arg_0]
mov     edx, [eax+8]
sub     edx, [ecx+4]
mov     [ebp+var_4], edx
mov     eax, [ebp+arg_4]
cmp     eax, [ebp+var_4]
jbe     short loc_10004a6c
mov     eax, 1
jmp     short loc_10004a7d
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+4]
add     edx, [ebp+arg_4]
mov     eax, [ebp+arg_0]
mov     [eax+4], edx
xor     eax, eax
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     ecx, [ebp+var_4]
add     ecx, 4
call    sub_10006850
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     ecx, [eax+0ch]
mov     edx, [ebp+arg_0]
mov     eax, [edx+0ch]
mov     edx, [ecx]
mov     ecx, eax
mov     eax, [edx+14h]
call    eax
mov     ecx, [ebp+arg_0]
mov     [ecx+10h], eax
mov     edx, [ebp+arg_0]
mov     eax, [edx+0ch]
mov     ecx, [ebp+arg_0]
mov     ecx, [ecx+0ch]
mov     edx, [eax]
mov     eax, [edx+18h]
call    eax
mov     ecx, [ebp+arg_0]
mov     [ecx+8], eax
mov     edx, [ebp+arg_0]
mov     dword ptr [edx+4], 0
mov     ecx, [ebp+arg_0]
add     ecx, 18h
call    sub_10007d70
xor     eax, eax
pop     ebp
retn    4
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     ecx, [eax+0ch]
mov     edx, [ebp+arg_0]
mov     eax, [edx+0ch]
mov     edx, [ecx]
mov     ecx, eax
mov     eax, [edx+14h]
call    eax
mov     ecx, [ebp+arg_0]
mov     [ecx+10h], eax
mov     edx, [ebp+arg_0]
mov     eax, [edx+0ch]
mov     ecx, [ebp+arg_0]
mov     ecx, [ecx+0ch]
mov     edx, [eax]
mov     eax, [edx+18h]
call    eax
mov     ecx, [ebp+arg_0]
mov     [ecx+8], eax
mov     edx, [ebp+arg_0]
mov     dword ptr [edx+4], 0
xor     eax, eax
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+var_4]
mov     dword ptr [eax], offset ??_7cenummediatypes@@6b@
mov     ecx, [ebp+var_4]
mov     dword ptr [ecx+4], 0
mov     edx, [ebp+var_4]
mov     eax, [ebp+arg_0]
mov     [edx+8], eax
mov     ecx, [ebp+var_4]
mov     dword ptr [ecx+10h], 1
mov     edx, [ebp+var_4]
mov     eax, [edx+8]
mov     ecx, [ebp+var_4]
mov     edx, [ecx+8]
add     edx, 0ch
mov     eax, [eax+0ch]
push    edx
mov     ecx, [eax+4]
call    ecx
cmp     [ebp+arg_4], 0
jnz     short loc_10004bc6
mov     edx, [ebp+var_4]
mov     eax, [edx+8]
mov     ecx, [ebp+var_4]
mov     ecx, [ecx+8]
mov     edx, [eax]
mov     eax, [edx+10h]
call    eax
mov     ecx, [ebp+var_4]
mov     [ecx+0ch], eax
jmp     short loc_10004bde
mov     edx, [ebp+var_4]
mov     eax, [ebp+arg_4]
mov     ecx, [eax+4]
mov     [edx+4], ecx
mov     edx, [ebp+var_4]
mov     eax, [ebp+arg_4]
mov     ecx, [eax+0ch]
mov     [edx+0ch], ecx
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     ecx, [ebp+var_4]
call    sub_10004c20
mov     eax, [ebp+arg_0]
and     eax, 1
jz      short loc_10004c13
mov     ecx, [ebp+var_4]
push    ecx
call    ??3@yaxpax@z
add     esp, 4
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+var_4]
mov     dword ptr [eax], offset ??_7cenummediatypes@@6b@
mov     ecx, [ebp+var_4]
mov     edx, [ecx+8]
mov     eax, [ebp+var_4]
mov     ecx, [eax+8]
add     ecx, 0ch
mov     edx, [edx+0ch]
push    ecx
mov     eax, [edx+8]
call    eax
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
cmp     [ebp+arg_8], 0
jnz     short loc_10004c60
mov     eax, 80004003h
jmp     short loc_10004cb7
push    10h
push    offset dword_1000a3cc
mov     eax, [ebp+buf1]
push    eax
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jnz     short loc_10004c98
push    10h
push    offset dword_1000a568
mov     ecx, [ebp+buf1]
push    ecx
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_10004ca9
mov     edx, [ebp+arg_8]
push    edx
mov     eax, [ebp+arg_0]
push    eax
call    sub_10006a20
jmp     short loc_10004cb7
jmp     short loc_10004cb7
mov     ecx, [ebp+arg_8]
mov     dword ptr [ecx], 0
mov     eax, 80004002h
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
add     eax, 10h
push    eax
call    ds:interlockedincrement
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 10h
mov     eax, [ebp+arg_0]
add     eax, 10h
push    eax
call    ds:interlockeddecrement
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jnz     short loc_10004d29
mov     ecx, [ebp+arg_0]
mov     [ebp+var_c], ecx
mov     edx, [ebp+var_c]
mov     [ebp+var_8], edx
cmp     [ebp+var_8], 0
jz      short loc_10004d22
push    1
mov     eax, [ebp+var_8]
mov     edx, [eax]
mov     ecx, [ebp+var_8]
mov     eax, [edx+1ch]
call    eax
mov     [ebp+var_10], eax
jmp     short loc_10004d29
mov     [ebp+var_10], 0
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10004790
mov     eax, large fs:0
push    eax
sub     esp, 10h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
cmp     [ebp+arg_4], 0
jnz     short loc_10004d75
mov     eax, 80004003h
jmp     loc_10004e11
mov     [ebp+var_10], 0
mov     eax, [ebp+arg_0]
mov     ecx, [eax+8]
mov     edx, [ebp+arg_0]
mov     eax, [edx+8]
mov     edx, [eax]
mov     eax, [edx+10h]
call    eax
mov     ecx, [ebp+arg_0]
xor     edx, edx
cmp     eax, [ecx+0ch]
setnz   dl
cmp     edx, 1
jnz     short loc_10004db1
mov     eax, [ebp+arg_4]
mov     dword ptr [eax], 0
mov     [ebp+var_10], 80040203h
jmp     short loc_10004e0e
push    14h
call    ??2@yapaxi@z
add     esp, 4
mov     [ebp+var_18], eax
mov     [ebp+var_4], 0
cmp     [ebp+var_18], 0
jz      short loc_10004de3
mov     ecx, [ebp+arg_0]
push    ecx
mov     edx, [ebp+arg_0]
mov     eax, [edx+8]
push    eax
mov     ecx, [ebp+var_18]
call    sub_10004b60
mov     [ebp+var_1c], eax
jmp     short loc_10004dea
mov     [ebp+var_1c], 0
mov     ecx, [ebp+var_1c]
mov     [ebp+var_14], ecx
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+arg_4]
mov     eax, [ebp+var_14]
mov     [edx], eax
mov     ecx, [ebp+arg_4]
cmp     dword ptr [ecx], 0
jnz     short loc_10004e0e
mov     [ebp+var_10], 8007000eh
mov     eax, [ebp+var_10]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10004e30
mov     eax, large fs:0
push    eax
sub     esp, 0a0h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_14], eax
push    esi
push    edi
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
cmp     [ebp+arg_8], 0
jnz     short loc_10004e6d
mov     eax, 80004003h
jmp     loc_10004fd4
mov     eax, [ebp+arg_0]
mov     ecx, [eax+8]
mov     edx, [ebp+arg_0]
mov     eax, [edx+8]
mov     edx, [eax]
mov     eax, [edx+10h]
call    eax
mov     ecx, [ebp+arg_0]
xor     edx, edx
cmp     eax, [ecx+0ch]
setnz   dl
cmp     edx, 1
jnz     short loc_10004e9a
mov     eax, 80040203h
jmp     loc_10004fd4
cmp     [ebp+arg_c], 0
jz      short loc_10004eab
mov     eax, [ebp+arg_c]
mov     dword ptr [eax], 0
jmp     short loc_10004ebb
cmp     [ebp+arg_4], 1
jbe     short loc_10004ebb
mov     eax, 80070057h
jmp     loc_10004fd4
mov     [ebp+var_10], 0
cmp     [ebp+arg_4], 0
jz      loc_10004fbd
lea     ecx, [ebp+var_5c]
call    sub_100031c0
mov     [ebp+var_4], 0
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+4]
mov     [ebp+var_ac], edx
mov     eax, [ebp+arg_0]
mov     ecx, [eax+4]
add     ecx, 1
mov     edx, [ebp+arg_0]
mov     [edx+4], ecx
lea     eax, [ebp+var_5c]
push    eax
mov     ecx, [ebp+var_ac]
push    ecx
mov     edx, [ebp+arg_0]
mov     ecx, [edx+8]
mov     eax, [ebp+arg_0]
mov     edx, [eax+8]
mov     eax, [edx]
mov     edx, [eax+34h]
call    edx
mov     [ebp+var_60], eax
cmp     [ebp+var_60], 0
jz      short loc_10004f31
mov     [ebp+var_4], 0ffffffffh
lea     ecx, [ebp+var_5c]
call    sub_100031a0
jmp     loc_10004fbd
push    48h
call    ds:cotaskmemalloc
mov     ecx, [ebp+arg_8]
mov     [ecx], eax
mov     edx, [ebp+arg_8]
cmp     dword ptr [edx], 0
jnz     short loc_10004f57
mov     [ebp+var_4], 0ffffffffh
lea     ecx, [ebp+var_5c]
call    sub_100031a0
jmp     short loc_10004fbd
mov     ecx, 12h
lea     esi, [ebp+var_5c]
lea     edi, [ebp+var_a8]
rep movsd
mov     eax, [ebp+arg_8]
mov     edi, [eax]
mov     ecx, 12h
lea     esi, [ebp+var_a8]
rep movsd
mov     [ebp+var_18], 0
mov     [ebp+var_1c], 0
mov     [ebp+var_20], 0
mov     ecx, [ebp+arg_8]
add     ecx, 4
mov     [ebp+arg_8], ecx
mov     edx, [ebp+var_10]
add     edx, 1
mov     [ebp+var_10], edx
mov     eax, [ebp+arg_4]
sub     eax, 1
mov     [ebp+arg_4], eax
mov     [ebp+var_4], 0ffffffffh
lea     ecx, [ebp+var_5c]
call    sub_100031a0
jmp     loc_10004ec2
cmp     [ebp+arg_c], 0
jz      short loc_10004fcb
mov     ecx, [ebp+arg_c]
mov     edx, [ebp+var_10]
mov     [ecx], edx
xor     eax, eax
cmp     [ebp+arg_4], 0
setnz   al
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     esi
mov     ecx, [ebp+var_14]
xor     ecx, ebp
call    @__security_check_cookie@4
mov     esp, ebp
pop     ebp
retn    10h
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10005000
mov     eax, large fs:0
push    eax
sub     esp, 54h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_10], eax
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
cmp     [ebp+arg_4], 0
jnz     short loc_10005035
xor     eax, eax
jmp     loc_100050bb
mov     eax, [ebp+arg_0]
mov     ecx, [eax+8]
mov     edx, [ebp+arg_0]
mov     eax, [edx+8]
mov     edx, [eax]
mov     eax, [edx+10h]
call    eax
mov     ecx, [ebp+arg_0]
xor     edx, edx
cmp     eax, [ecx+0ch]
setnz   dl
cmp     edx, 1
jnz     short loc_1000505f
mov     eax, 80040203h
jmp     short loc_100050bb
mov     eax, [ebp+arg_0]
mov     ecx, [eax+4]
add     ecx, [ebp+arg_4]
mov     edx, [ebp+arg_0]
mov     [edx+4], ecx
lea     ecx, [ebp+var_5c]
call    sub_100031c0
mov     [ebp+var_4], 0
lea     eax, [ebp+var_5c]
push    eax
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+4]
sub     edx, 1
push    edx
mov     eax, [ebp+arg_0]
mov     ecx, [eax+8]
mov     edx, [ebp+arg_0]
mov     eax, [edx+8]
mov     edx, [ecx]
mov     ecx, eax
mov     eax, [edx+34h]
call    eax
neg     eax
sbb     eax, eax
neg     eax
mov     [ebp+var_60], eax
mov     [ebp+var_4], 0ffffffffh
lea     ecx, [ebp+var_5c]
call    sub_100031a0
mov     eax, [ebp+var_60]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     ecx, [ebp+var_10]
xor     ecx, ebp
call    @__security_check_cookie@4
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword ptr [eax+4], 0
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+8]
mov     eax, [ebp+arg_0]
mov     ecx, [eax+8]
mov     edx, [edx]
mov     eax, [edx+10h]
call    eax
mov     ecx, [ebp+arg_0]
mov     [ecx+0ch], eax
xor     eax, eax
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10005110
mov     eax, large fs:0
push    eax
sub     esp, 14h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_20], ecx
push    0
mov     eax, [ebp+arg_0]
push    eax
mov     ecx, [ebp+var_20]
call    sub_10006890
mov     [ebp+var_4], 0
mov     ecx, [ebp+var_20]
mov     dword ptr [ecx+14h], 0
mov     edx, [ebp+var_20]
mov     dword ptr [edx+18h], 0
mov     eax, [ebp+var_20]
mov     ecx, [ebp+arg_14]
mov     [eax+1ch], ecx
mov     edx, [ebp+var_20]
mov     eax, [ebp+arg_8]
mov     [edx+20h], eax
mov     ecx, [ebp+var_20]
mov     byte ptr [ecx+24h], 0
mov     edx, [ebp+var_20]
mov     byte ptr [edx+25h], 0
mov     eax, [ebp+var_20]
mov     byte ptr [eax+26h], 0
mov     ecx, [ebp+var_20]
mov     edx, [ebp+arg_4]
mov     [ecx+28h], edx
mov     eax, [ebp+var_20]
mov     dword ptr [eax+2ch], 0
mov     ecx, [ebp+var_20]
mov     dword ptr [ecx+30h], 1
mov     ecx, [ebp+var_20]
add     ecx, 34h
call    sub_100031c0
mov     byte ptr [ebp+var_4], 1
mov     edx, [ebp+var_20]
add     edx, 80h
mov     [ebp+var_18], edx
mov     eax, [ebp+var_18]
mov     dword ptr [eax], 0
mov     dword ptr [eax+4], 0
mov     ecx, [ebp+var_20]
add     ecx, 88h
mov     [ebp+var_1c], ecx
mov     edx, [ebp+var_1c]
mov     dword ptr [edx], 0ffffffffh
mov     dword ptr [edx+4], 7fffffffh
mov     eax, [ebp+var_20]
fld1
fstp    qword ptr [eax+90h]
cmp     [ebp+src], 0
jz      short loc_10005256
mov     ecx, [ebp+src]
push    ecx
call    sub_10007c10
add     eax, 1
mov     [ebp+var_10], eax
xor     ecx, ecx
mov     eax, [ebp+var_10]
mov     edx, 2
mul     edx
seto    cl
neg     ecx
or      ecx, eax
push    ecx
call    ??_u@yapaxi@z
add     esp, 4
mov     [ebp+var_14], eax
mov     eax, [ebp+var_20]
mov     ecx, [ebp+var_14]
mov     [eax+14h], ecx
mov     edx, [ebp+var_20]
cmp     dword ptr [edx+14h], 0
jz      short loc_10005256
mov     eax, [ebp+var_10]
shl     eax, 1
push    eax
mov     ecx, [ebp+src]
push    ecx
mov     edx, [ebp+var_20]
mov     eax, [edx+14h]
push    eax
call    memcpy
add     esp, 0ch
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_20]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    18h
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10005280
mov     eax, large fs:0
push    eax
sub     esp, 8
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_14], ecx
mov     [ebp+var_4], 1
mov     eax, [ebp+var_14]
mov     ecx, [eax+14h]
mov     [ebp+var_10], ecx
mov     edx, [ebp+var_10]
push    edx
call    ??_v@yaxpax@z
add     esp, 4
mov     byte ptr [ebp+var_4], 0
mov     ecx, [ebp+var_14]
add     ecx, 34h
call    sub_100031a0
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_14]
add     ecx, 4
call    sub_10006850
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
sub     esp, 8
push    10h
push    offset dword_1000a3ec
mov     eax, [ebp+buf1]
push    eax
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_1000534b
cmp     [ebp+arg_0], 0
jz      short loc_10005333
mov     ecx, [ebp+arg_0]
add     ecx, 0ch
mov     [ebp+var_4], ecx
jmp     short loc_1000533a
mov     [ebp+var_4], 0
mov     edx, [ebp+arg_8]
push    edx
mov     eax, [ebp+var_4]
push    eax
call    sub_10006a20
jmp     short loc_100053a1
jmp     short loc_100053a1
push    10h
push    offset dword_1000a34c
mov     ecx, [ebp+buf1]
push    ecx
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_10005390
cmp     [ebp+arg_0], 0
jz      short loc_10005378
mov     edx, [ebp+arg_0]
add     edx, 10h
mov     [ebp+var_8], edx
jmp     short loc_1000537f
mov     [ebp+var_8], 0
mov     eax, [ebp+arg_8]
push    eax
mov     ecx, [ebp+var_8]
push    ecx
call    sub_10006a20
jmp     short loc_100053a1
jmp     short loc_100053a1
mov     edx, [ebp+arg_8]
push    edx
mov     eax, [ebp+buf1]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
call    sub_100068e0
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     ecx, [eax+28h]
mov     edx, [ebp+arg_0]
mov     eax, [edx+28h]
add     eax, 0ch
mov     ecx, [ecx+0ch]
push    eax
mov     edx, [ecx+4]
call    edx
pop     ebp
retn    4
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     ecx, [eax+28h]
mov     edx, [ebp+arg_0]
mov     eax, [edx+28h]
add     eax, 0ch
mov     ecx, [ecx+0ch]
push    eax
mov     edx, [ecx+8]
call    edx
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_100053f0
mov     eax, large fs:0
push    eax
sub     esp, 34h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
cmp     [ebp+arg_4], 0
jnz     short loc_10005425
mov     eax, 80004003h
jmp     loc_10005531
mov     eax, [ebp+arg_0]
mov     ecx, [eax+14h]
mov     [ebp+var_30], ecx
mov     edx, [ebp+var_30]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     [ebp+var_4], 0
mov     edx, [ebp+arg_0]
cmp     dword ptr [edx+0ch], 0
jz      short loc_1000547a
mov     [ebp+var_1c], 80040204h
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_10]
mov     [ebp+var_34], eax
mov     ecx, [ebp+var_34]
push    ecx
call    ds:leavecriticalsection
mov     eax, [ebp+var_1c]
jmp     loc_10005531
mov     edx, [ebp+arg_0]
mov     eax, [edx+1ch]
xor     ecx, ecx
cmp     dword ptr [eax+14h], 0
setz    cl
test    ecx, ecx
jnz     short loc_100054bb
mov     edx, [ebp+arg_0]
movzx   eax, byte ptr [edx+19h]
test    eax, eax
jnz     short loc_100054bb
mov     [ebp+var_20], 80040224h
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_10]
mov     [ebp+var_38], ecx
mov     edx, [ebp+var_38]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_20]
jmp     short loc_10005531
mov     eax, [ebp+arg_8]
mov     [ebp+buf1], eax
mov     ecx, [ebp+buf1]
push    ecx
mov     edx, [ebp+arg_4]
push    edx
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
call    sub_100057a0
mov     [ebp+var_14], eax
cmp     [ebp+var_14], 0
jge     short loc_10005510
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     eax, [ebp+arg_0]
mov     edx, [eax-0ch]
mov     eax, [edx+2ch]
call    eax
mov     ecx, [ebp+var_14]
mov     [ebp+var_24], ecx
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+var_10]
mov     [ebp+var_3c], edx
mov     eax, [ebp+var_3c]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_24]
jmp     short loc_10005531
mov     [ebp+var_28], 0
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_10]
mov     [ebp+var_40], ecx
mov     edx, [ebp+var_40]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_28]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
sub     esp, 0ch
mov     [ebp+var_8], ecx
mov     eax, [ebp+arg_0]
push    eax
mov     ecx, [ebp+var_8]
mov     edx, [ecx]
mov     ecx, [ebp+var_8]
mov     eax, [edx+28h]
call    eax
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jge     short loc_10005588
mov     ecx, [ebp+var_8]
mov     edx, [ecx]
mov     ecx, [ebp+var_8]
mov     eax, [edx+2ch]
call    eax
mov     eax, [ebp+var_4]
jmp     loc_1000569b
mov     ecx, [ebp+arg_4]
push    ecx
mov     edx, [ebp+var_8]
mov     eax, [edx]
mov     ecx, [ebp+var_8]
mov     edx, [eax+20h]
call    edx
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jnz     loc_10005645
mov     eax, [ebp+var_8]
mov     ecx, [ebp+arg_0]
mov     [eax+18h], ecx
mov     edx, [ebp+var_8]
mov     eax, [edx+18h]
mov     ecx, [ebp+var_8]
mov     edx, [ecx+18h]
mov     eax, [eax]
push    edx
mov     ecx, [eax+4]
call    ecx
mov     edx, [ebp+arg_4]
push    edx
mov     eax, [ebp+var_8]
mov     edx, [eax]
mov     ecx, [ebp+var_8]
mov     eax, [edx+24h]
call    eax
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jl      short loc_10005643
cmp     [ebp+var_8], 0
jz      short loc_100055ee
mov     ecx, [ebp+var_8]
add     ecx, 0ch
mov     [ebp+var_c], ecx
jmp     short loc_100055f5
mov     [ebp+var_c], 0
mov     edx, [ebp+arg_4]
push    edx
mov     eax, [ebp+var_c]
push    eax
mov     ecx, [ebp+arg_0]
mov     edx, [ecx]
mov     eax, [ebp+arg_0]
push    eax
mov     ecx, [edx+10h]
call    ecx
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jl      short loc_10005643
mov     edx, [ebp+arg_0]
push    edx
mov     eax, [ebp+var_8]
mov     edx, [eax]
mov     ecx, [ebp+var_8]
mov     eax, [edx+30h]
call    eax
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jl      short loc_10005635
mov     eax, [ebp+var_4]
jmp     short loc_1000569b
jmp     short loc_10005643
mov     ecx, [ebp+arg_0]
mov     edx, [ecx]
mov     eax, [ebp+arg_0]
push    eax
mov     ecx, [edx+14h]
call    ecx
jmp     short loc_10005664
cmp     [ebp+var_4], 0
jge     short loc_1000565d
cmp     [ebp+var_4], 80004005h
jz      short loc_1000565d
cmp     [ebp+var_4], 80070057h
jnz     short loc_10005664
mov     [ebp+var_4], 8004022ah
mov     edx, [ebp+var_8]
mov     eax, [edx]
mov     ecx, [ebp+var_8]
mov     edx, [eax+2ch]
call    edx
mov     eax, [ebp+var_8]
cmp     dword ptr [eax+18h], 0
jz      short loc_10005698
mov     ecx, [ebp+var_8]
mov     edx, [ecx+18h]
mov     eax, [ebp+var_8]
mov     ecx, [eax+18h]
mov     edx, [edx]
push    ecx
mov     eax, [edx+8]
call    eax
mov     ecx, [ebp+var_8]
mov     dword ptr [ecx+18h], 0
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
sub     esp, 14h
mov     [ebp+var_14], ecx
mov     eax, [ebp+arg_8]
mov     ecx, [eax]
mov     edx, [ebp+arg_8]
push    edx
mov     eax, [ecx+14h]
call    eax
mov     [ebp+var_10], eax
cmp     [ebp+var_10], 0
jge     short loc_100056d8
mov     eax, [ebp+var_10]
jmp     loc_10005798
mov     [ebp+pv], 0
mov     [ebp+var_c], 0
mov     [ebp+var_4], 0
lea     ecx, [ebp+var_c]
push    ecx
lea     edx, [ebp+pv]
push    edx
push    1
mov     eax, [ebp+arg_8]
mov     ecx, [eax]
mov     edx, [ebp+arg_8]
push    edx
mov     eax, [ecx+0ch]
call    eax
mov     [ebp+var_10], eax
cmp     [ebp+var_10], 0
jz      short loc_10005720
cmp     [ebp+var_4], 0
jnz     short loc_1000571b
mov     [ebp+var_4], 80040207h
mov     eax, [ebp+var_4]
jmp     short loc_10005798
cmp     [ebp+buf1], 0
jz      short loc_10005736
mov     ecx, [ebp+buf1]
push    ecx
mov     ecx, [ebp+pv]
call    sub_10003520
test    eax, eax
jz      short loc_10005778
mov     edx, [ebp+pv]
push    edx
mov     eax, [ebp+arg_0]
push    eax
mov     ecx, [ebp+var_14]
call    sub_10005550
mov     [ebp+var_10], eax
cmp     [ebp+var_10], 0
jge     short loc_10005776
cmp     [ebp+var_4], 0
jl      short loc_10005776
cmp     [ebp+var_10], 80004005h
jz      short loc_10005776
cmp     [ebp+var_10], 80070057h
jz      short loc_10005776
cmp     [ebp+var_10], 8004022ah
jz      short loc_10005776
mov     ecx, [ebp+var_10]
mov     [ebp+var_4], ecx
jmp     short loc_1000577f
mov     [ebp+var_10], 80040207h
mov     edx, [ebp+pv]
push    edx
call    sub_10003670
cmp     [ebp+var_10], 0
jnz     short loc_10005793
mov     eax, [ebp+var_10]
jmp     short loc_10005798
jmp     loc_100056ed
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
sub     esp, 14h
mov     [ebp+var_14], ecx
mov     [ebp+var_8], 0
cmp     [ebp+buf1], 0
jz      short loc_100057d7
mov     ecx, [ebp+buf1]
call    sub_100034c0
test    eax, eax
jnz     short loc_100057d7
mov     eax, [ebp+buf1]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
mov     ecx, [ebp+var_14]
call    sub_10005550
jmp     loc_10005896
mov     [ebp+var_4], 80040207h
mov     [ebp+var_c], 0
jmp     short loc_100057f0
mov     edx, [ebp+var_c]
add     edx, 1
mov     [ebp+var_c], edx
cmp     [ebp+var_c], 2
jge     loc_10005893
mov     eax, [ebp+var_14]
movzx   ecx, byte ptr [eax+26h]
cmp     [ebp+var_c], ecx
jnz     short loc_1000581d
lea     edx, [ebp+var_8]
push    edx
mov     eax, [ebp+arg_0]
mov     ecx, [eax]
mov     edx, [ebp+arg_0]
push    edx
mov     eax, [ecx+30h]
call    eax
mov     [ebp+var_10], eax
jmp     short loc_10005836
lea     ecx, [ebp+var_8]
push    ecx
mov     edx, [ebp+var_14]
add     edx, 0ch
mov     eax, [ebp+var_14]
mov     ecx, [eax+0ch]
push    edx
mov     edx, [ecx+30h]
call    edx
mov     [ebp+var_10], eax
cmp     [ebp+var_10], 0
jl      short loc_1000588e
mov     eax, [ebp+var_8]
push    eax
mov     ecx, [ebp+buf1]
push    ecx
mov     edx, [ebp+arg_0]
push    edx
mov     ecx, [ebp+var_14]
call    sub_100056b0
mov     [ebp+var_10], eax
mov     eax, [ebp+var_8]
mov     ecx, [eax]
mov     edx, [ebp+var_8]
push    edx
mov     eax, [ecx+8]
call    eax
cmp     [ebp+var_10], 0
jl      short loc_1000586d
xor     eax, eax
jmp     short loc_10005896
jmp     short loc_1000588e
cmp     [ebp+var_10], 80004005h
jz      short loc_1000588e
cmp     [ebp+var_10], 80070057h
jz      short loc_1000588e
cmp     [ebp+var_10], 8004022ah
jz      short loc_1000588e
mov     ecx, [ebp+var_10]
mov     [ebp+var_4], ecx
jmp     loc_100057e7
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
sub     esp, 8
mov     [ebp+var_8], ecx
mov     eax, [ebp+arg_0]
push    eax
mov     ecx, [ebp+var_8]
add     ecx, 34h
call    sub_100032b0
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jge     short loc_100058c6
mov     eax, [ebp+var_4]
jmp     short loc_100058c8
xor     eax, eax
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 8
mov     [ebp+var_8], ecx
lea     eax, [ebp+var_4]
push    eax
mov     ecx, [ebp+arg_0]
mov     edx, [ecx]
mov     eax, [ebp+arg_0]
push    eax
mov     ecx, [edx+24h]
call    ecx
mov     edx, [ebp+var_8]
mov     eax, [ebp+var_4]
cmp     eax, [edx+1ch]
jnz     short loc_100058fd
mov     eax, 80040208h
jmp     short loc_100058ff
xor     eax, eax
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10005910
mov     eax, large fs:0
push    eax
sub     esp, 44h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
cmp     [ebp+arg_4], 0
jnz     short loc_10005945
mov     eax, 80004003h
jmp     loc_10005b86
cmp     [ebp+arg_8], 0
jnz     short loc_10005955
mov     eax, 80004003h
jmp     loc_10005b86
mov     eax, [ebp+arg_0]
mov     ecx, [eax+14h]
mov     [ebp+var_38], ecx
mov     edx, [ebp+var_38]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     [ebp+var_4], 0
mov     edx, [ebp+arg_0]
cmp     dword ptr [edx+0ch], 0
jz      short loc_100059aa
mov     [ebp+var_1c], 80040204h
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_10]
mov     [ebp+var_3c], eax
mov     ecx, [ebp+var_3c]
push    ecx
call    ds:leavecriticalsection
mov     eax, [ebp+var_1c]
jmp     loc_10005b86
mov     edx, [ebp+arg_0]
mov     eax, [edx+1ch]
xor     ecx, ecx
cmp     dword ptr [eax+14h], 0
setz    cl
test    ecx, ecx
jnz     short loc_100059ee
mov     edx, [ebp+arg_0]
movzx   eax, byte ptr [edx+19h]
test    eax, eax
jnz     short loc_100059ee
mov     [ebp+var_20], 80040224h
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_10]
mov     [ebp+var_40], ecx
mov     edx, [ebp+var_40]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_20]
jmp     loc_10005b86
mov     eax, [ebp+arg_4]
push    eax
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     edx, [ebp+arg_0]
mov     eax, [edx-0ch]
mov     edx, [eax+28h]
call    edx
mov     [ebp+var_14], eax
cmp     [ebp+var_14], 0
jge     short loc_10005a42
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     eax, [ebp+arg_0]
mov     edx, [eax-0ch]
mov     eax, [edx+2ch]
call    eax
mov     ecx, [ebp+var_14]
mov     [ebp+var_24], ecx
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+var_10]
mov     [ebp+var_44], edx
mov     eax, [ebp+var_44]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_24]
jmp     loc_10005b86
mov     ecx, [ebp+arg_8]
mov     [ebp+var_18], ecx
mov     edx, [ebp+var_18]
push    edx
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     eax, [ebp+arg_0]
mov     edx, [eax-0ch]
mov     eax, [edx+20h]
call    eax
mov     [ebp+var_14], eax
cmp     [ebp+var_14], 0
jz      short loc_10005abb
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     edx, [ebp+arg_0]
mov     eax, [edx-0ch]
mov     edx, [eax+2ch]
call    edx
cmp     [ebp+var_14], 0
jge     short loc_10005a8f
cmp     [ebp+var_14], 80004005h
jz      short loc_10005a8f
cmp     [ebp+var_14], 80070057h
jnz     short loc_10005a96
mov     [ebp+var_14], 8004022ah
mov     eax, [ebp+var_14]
mov     [ebp+var_28], eax
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_10]
mov     [ebp+var_48], ecx
mov     edx, [ebp+var_48]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_28]
jmp     loc_10005b86
mov     eax, [ebp+arg_0]
mov     ecx, [ebp+arg_4]
mov     [eax+0ch], ecx
mov     edx, [ebp+arg_0]
mov     eax, [edx+0ch]
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+0ch]
mov     eax, [eax]
push    edx
mov     ecx, [eax+4]
call    ecx
mov     edx, [ebp+var_18]
push    edx
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     eax, [ebp+arg_0]
mov     edx, [eax-0ch]
mov     eax, [edx+24h]
call    eax
mov     [ebp+var_14], eax
cmp     [ebp+var_14], 0
jl      short loc_10005b37
mov     ecx, [ebp+arg_4]
push    ecx
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     edx, [ebp+arg_0]
mov     eax, [edx-0ch]
mov     edx, [eax+30h]
call    edx
mov     [ebp+var_14], eax
cmp     [ebp+var_14], 0
jl      short loc_10005b37
mov     [ebp+var_2c], 0
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_10]
mov     [ebp+var_4c], eax
mov     ecx, [ebp+var_4c]
push    ecx
call    ds:leavecriticalsection
mov     eax, [ebp+var_2c]
jmp     short loc_10005b86
mov     edx, [ebp+arg_0]
mov     eax, [edx+0ch]
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+0ch]
mov     eax, [eax]
push    edx
mov     ecx, [eax+8]
call    ecx
mov     edx, [ebp+arg_0]
mov     dword ptr [edx+0ch], 0
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     eax, [ebp+arg_0]
mov     edx, [eax-0ch]
mov     eax, [edx+2ch]
call    eax
mov     ecx, [ebp+var_14]
mov     [ebp+var_30], ecx
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+var_10]
mov     [ebp+var_50], edx
mov     eax, [ebp+var_50]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_30]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10005ba0
mov     eax, large fs:0
push    eax
sub     esp, 1ch
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     eax, [ebp+arg_0]
mov     ecx, [eax+14h]
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     [ebp+var_4], 0
mov     edx, [ebp+arg_0]
mov     eax, [edx+1ch]
xor     ecx, ecx
cmp     dword ptr [eax+14h], 0
setz    cl
test    ecx, ecx
jnz     short loc_10005c21
mov     [ebp+var_14], 80040224h
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+var_10]
mov     [ebp+var_24], edx
mov     eax, [ebp+var_24]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_14]
jmp     short loc_10005c4a
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
push    ecx
call    sub_10005c60
mov     [ebp+var_18], eax
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+var_10]
mov     [ebp+var_28], edx
mov     eax, [ebp+var_28]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_18]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     eax, [ebp+arg_0]
cmp     dword ptr [eax+18h], 0
jz      short loc_10005cac
mov     ecx, [ebp+arg_0]
mov     edx, [ecx]
mov     ecx, [ebp+arg_0]
mov     eax, [edx+2ch]
call    eax
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jge     short loc_10005c88
mov     eax, [ebp+var_4]
jmp     short loc_10005cb1
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+18h]
mov     eax, [ebp+arg_0]
mov     ecx, [eax+18h]
mov     edx, [edx]
push    ecx
mov     eax, [edx+8]
call    eax
mov     ecx, [ebp+arg_0]
mov     dword ptr [ecx+18h], 0
xor     eax, eax
jmp     short loc_10005cb1
jmp     short loc_10005cb1
mov     eax, 1
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
cmp     [ebp+arg_4], 0
jnz     short loc_10005cd1
mov     eax, 80004003h
jmp     short loc_10005d01
mov     eax, [ebp+arg_0]
mov     ecx, [eax+0ch]
mov     [ebp+var_4], ecx
mov     edx, [ebp+arg_4]
mov     eax, [ebp+var_4]
mov     [edx], eax
cmp     [ebp+var_4], 0
jz      short loc_10005cfc
mov     ecx, [ebp+var_4]
mov     edx, [ecx]
mov     eax, [ebp+var_4]
push    eax
mov     ecx, [edx+4]
call    ecx
xor     eax, eax
jmp     short loc_10005d01
jmp     short loc_10005d01
mov     eax, 80040209h
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10005d10
mov     eax, large fs:0
push    eax
sub     esp, 20h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
cmp     [ebp+arg_4], 0
jnz     short loc_10005d45
mov     eax, 80004003h
jmp     loc_10005df2
mov     eax, [ebp+arg_0]
mov     ecx, [eax+14h]
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     [ebp+var_4], 0
mov     edx, [ebp+arg_0]
xor     eax, eax
cmp     dword ptr [edx+0ch], 0
setnz   al
test    eax, eax
jz      short loc_10005db0
mov     ecx, [ebp+arg_0]
add     ecx, 28h
push    ecx
mov     edx, [ebp+arg_4]
push    edx
call    sub_100036a0
mov     [ebp+var_14], 0
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_10]
mov     [ebp+var_24], eax
mov     ecx, [ebp+var_24]
push    ecx
call    ds:leavecriticalsection
mov     eax, [ebp+var_14]
jmp     short loc_10005df2
jmp     short loc_10005ddb
mov     ecx, [ebp+arg_4]
call    sub_10003490
mov     [ebp+var_18], 80040209h
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+var_10]
mov     [ebp+var_28], edx
mov     eax, [ebp+var_28]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_18]
jmp     short loc_10005df2
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_10]
mov     [ebp+var_2c], ecx
mov     edx, [ebp+var_2c]
push    edx
call    ds:leavecriticalsection
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
sub     esp, 8
cmp     [ebp+arg_4], 0
jnz     short loc_10005e26
mov     eax, 80004003h
jmp     loc_10005eaa
mov     eax, [ebp+arg_0]
mov     ecx, [eax+1ch]
mov     [ebp+var_4], ecx
cmp     [ebp+var_4], 0
jz      short loc_10005e40
mov     edx, [ebp+var_4]
add     edx, 0ch
mov     [ebp+var_8], edx
jmp     short loc_10005e47
mov     [ebp+var_8], 0
mov     eax, [ebp+arg_4]
mov     ecx, [ebp+var_8]
mov     [eax], ecx
mov     edx, [ebp+arg_0]
cmp     dword ptr [edx+1ch], 0
jz      short loc_10005e70
mov     eax, [ebp+arg_0]
mov     ecx, [eax+1ch]
mov     edx, [ebp+arg_0]
mov     eax, [edx+1ch]
add     eax, 0ch
mov     ecx, [ecx+0ch]
push    eax
mov     edx, [ecx+4]
call    edx
mov     eax, [ebp+arg_0]
cmp     dword ptr [eax+8], 0
jz      short loc_10005e93
push    80h
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+8]
push    edx
mov     eax, [ebp+arg_4]
add     eax, 8
push    eax
call    sub_10007bb0
jmp     short loc_10005e9c
xor     ecx, ecx
mov     edx, [ebp+arg_4]
mov     [edx+8], cx
mov     eax, [ebp+arg_4]
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+10h]
mov     [eax+4], edx
xor     eax, eax
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
cmp     [ebp+arg_4], 0
jnz     short loc_10005ec0
mov     eax, 80004003h
jmp     short loc_10005ecd
mov     eax, [ebp+arg_4]
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+10h]
mov     [eax], edx
xor     eax, eax
pop     ebp
retn    8
push    ebp
mov     ebp, esp
push    ecx
cmp     [ebp+arg_4], 0
jnz     short loc_10005ef1
mov     eax, 80004003h
jmp     short loc_10005f19
mov     eax, [ebp+arg_4]
push    eax
mov     ecx, [ebp+arg_0]
sub     ecx, 0ch
mov     edx, [ebp+arg_0]
mov     eax, [edx-0ch]
mov     edx, [eax+20h]
call    edx
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jge     short loc_10005f16
mov     eax, 1
jmp     short loc_10005f19
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10004060
mov     eax, large fs:0
push    eax
sub     esp, 0ch
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
cmp     [ebp+arg_4], 0
jnz     short loc_10005f52
mov     eax, 80004003h
jmp     short loc_10005faf
push    14h
call    ??2@yapaxi@z
add     esp, 4
mov     [ebp+var_14], eax
mov     [ebp+var_4], 0
cmp     [ebp+var_14], 0
jz      short loc_10005f82
push    0
mov     eax, [ebp+arg_0]
sub     eax, 0ch
push    eax
mov     ecx, [ebp+var_14]
call    sub_10004b60
mov     [ebp+var_18], eax
jmp     short loc_10005f89
mov     [ebp+var_18], 0
mov     ecx, [ebp+var_18]
mov     [ebp+var_10], ecx
mov     [ebp+var_4], 0ffffffffh
mov     edx, [ebp+arg_4]
mov     eax, [ebp+var_10]
mov     [edx], eax
mov     ecx, [ebp+arg_4]
cmp     dword ptr [ecx], 0
jnz     short loc_10005fad
mov     eax, 8007000eh
jmp     short loc_10005faf
xor     eax, eax
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
sub     esp, 14h
mov     eax, [ebp+arg_0]
mov     ecx, [eax+10h]
mov     [ebp+var_10], ecx
mov     edx, [ebp+var_10]
mov     [ebp+var_4], edx
mov     eax, [ebp+var_4]
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:entercriticalsection
mov     edx, [ebp+arg_0]
mov     eax, [ebp+arg_4]
mov     [edx+1ch], eax
mov     [ebp+var_8], 0
mov     ecx, [ebp+var_4]
mov     [ebp+var_14], ecx
mov     edx, [ebp+var_14]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_8]
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
mov     eax, 80004001h
pop     ebp
retn    20h
push    ebp
mov     ebp, esp
sub     esp, 8
mov     eax, [ebp+arg_0]
add     eax, 74h
mov     [ebp+var_4], eax
mov     ecx, [ebp+var_4]
mov     edx, [ebp+arg_4]
mov     [ecx], edx
mov     eax, [ebp+arg_8]
mov     [ecx+4], eax
mov     ecx, [ebp+arg_0]
add     ecx, 7ch
mov     [ebp+var_8], ecx
mov     edx, [ebp+var_8]
mov     eax, [ebp+arg_c]
mov     [edx], eax
mov     ecx, [ebp+arg_10]
mov     [edx+4], ecx
mov     edx, [ebp+arg_0]
fld     [ebp+arg_14]
fstp    qword ptr [edx+84h]
xor     eax, eax
mov     esp, ebp
pop     ebp
retn    1ch
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
push    1
mov     eax, [ebp+src]
push    eax
mov     ecx, [ebp+arg_c]
push    ecx
mov     edx, [ebp+arg_8]
push    edx
mov     eax, [ebp+arg_4]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
mov     ecx, [ebp+var_4]
call    sub_10005110
mov     edx, [ebp+var_4]
mov     dword ptr [edx+98h], 0
mov     eax, [ebp+var_4]
mov     dword ptr [eax+9ch], 0
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    14h
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+var_4]
add     eax, 98h
push    eax
mov     ecx, [ebp+var_4]
mov     edx, [ecx+9ch]
push    edx
mov     eax, [ebp+var_4]
mov     edx, [eax]
mov     ecx, [ebp+var_4]
mov     eax, [edx+38h]
call    eax
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 8
mov     [ebp+var_8], ecx
mov     eax, [ebp+arg_0]
push    eax
mov     ecx, [ebp+var_8]
call    sub_100058d0
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jge     short loc_10006143
mov     eax, [ebp+var_4]
jmp     short loc_1000616f
mov     ecx, [ebp+var_8]
add     ecx, 9ch
push    ecx
push    offset dword_1000a38c
mov     edx, [ebp+arg_0]
mov     eax, [edx]
mov     ecx, [ebp+arg_0]
push    ecx
mov     edx, [eax]
call    edx
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jge     short loc_1000616d
mov     eax, [ebp+var_4]
jmp     short loc_1000616f
xor     eax, eax
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 8
mov     [ebp+var_8], ecx
mov     eax, [ebp+var_8]
cmp     dword ptr [eax+98h], 0
jz      short loc_100061e4
mov     ecx, [ebp+var_8]
mov     edx, [ecx+98h]
mov     eax, [ebp+var_8]
mov     ecx, [eax+98h]
mov     edx, [edx]
push    ecx
mov     eax, [edx+18h]
call    eax
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jge     short loc_100061bd
mov     eax, [ebp+var_4]
jmp     short loc_10006219
mov     ecx, [ebp+var_8]
mov     edx, [ecx+98h]
mov     eax, [ebp+var_8]
mov     ecx, [eax+98h]
mov     edx, [edx]
push    ecx
mov     eax, [edx+8]
call    eax
mov     ecx, [ebp+var_8]
mov     dword ptr [ecx+98h], 0
mov     edx, [ebp+var_8]
cmp     dword ptr [edx+9ch], 0
jz      short loc_10006217
mov     eax, [ebp+var_8]
mov     ecx, [eax+9ch]
mov     edx, [ebp+var_8]
mov     eax, [edx+9ch]
mov     ecx, [ecx]
push    eax
mov     edx, [ecx+8]
call    edx
mov     eax, [ebp+var_8]
mov     dword ptr [eax+9ch], 0
xor     eax, eax
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+ppv]
push    eax
call    sub_10003790
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 18h
mov     [ebp+var_18], ecx
mov     [ebp+var_4], 0
mov     eax, [ebp+arg_4]
mov     dword ptr [eax], 0
push    10h
push    0
lea     ecx, [ebp+var_14]
push    ecx
call    memset
add     esp, 0ch
lea     edx, [ebp+var_14]
push    edx
mov     eax, [ebp+arg_0]
mov     ecx, [eax]
mov     edx, [ebp+arg_0]
push    edx
mov     eax, [ecx+14h]
call    eax
cmp     [ebp+var_c], 0
jnz     short loc_10006288
mov     [ebp+var_c], 1
mov     ecx, [ebp+arg_4]
push    ecx
mov     edx, [ebp+arg_0]
mov     eax, [edx]
mov     ecx, [ebp+arg_0]
push    ecx
mov     edx, [eax+0ch]
call    edx
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jl      short loc_100062e9
lea     eax, [ebp+var_14]
push    eax
mov     ecx, [ebp+arg_4]
mov     edx, [ecx]
push    edx
mov     eax, [ebp+var_18]
mov     edx, [eax]
mov     ecx, [ebp+var_18]
mov     eax, [edx+3ch]
call    eax
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jl      short loc_100062e9
push    0
mov     ecx, [ebp+arg_4]
mov     edx, [ecx]
push    edx
mov     eax, [ebp+arg_0]
mov     ecx, [eax]
mov     edx, [ebp+arg_0]
push    edx
mov     eax, [ecx+10h]
call    eax
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jl      short loc_100062e9
xor     eax, eax
jmp     loc_1000638f
mov     ecx, [ebp+arg_4]
cmp     dword ptr [ecx], 0
jz      short loc_1000630c
mov     edx, [ebp+arg_4]
mov     eax, [edx]
mov     ecx, [ebp+arg_4]
mov     edx, [ecx]
mov     eax, [eax]
push    edx
mov     ecx, [eax+8]
call    ecx
mov     edx, [ebp+arg_4]
mov     dword ptr [edx], 0
mov     eax, [ebp+arg_4]
push    eax
mov     ecx, [ebp+var_18]
mov     edx, [ecx]
mov     ecx, [ebp+var_18]
mov     eax, [edx+48h]
call    eax
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jl      short loc_10006369
lea     ecx, [ebp+var_14]
push    ecx
mov     edx, [ebp+arg_4]
mov     eax, [edx]
push    eax
mov     ecx, [ebp+var_18]
mov     edx, [ecx]
mov     ecx, [ebp+var_18]
mov     eax, [edx+3ch]
call    eax
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jl      short loc_10006369
push    0
mov     ecx, [ebp+arg_4]
mov     edx, [ecx]
push    edx
mov     eax, [ebp+arg_0]
mov     ecx, [eax]
mov     edx, [ebp+arg_0]
push    edx
mov     eax, [ecx+10h]
call    eax
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jl      short loc_10006369
xor     eax, eax
jmp     short loc_1000638f
mov     ecx, [ebp+arg_4]
cmp     dword ptr [ecx], 0
jz      short loc_1000638c
mov     edx, [ebp+arg_4]
mov     eax, [edx]
mov     ecx, [ebp+arg_4]
mov     edx, [ecx]
mov     eax, [eax]
push    edx
mov     ecx, [eax+8]
call    ecx
mov     edx, [ebp+arg_4]
mov     dword ptr [edx], 0
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+var_4]
cmp     dword ptr [eax+98h], 0
jz      short loc_100063e1
mov     ecx, [ebp+arg_c]
push    ecx
mov     edx, [ebp+arg_8]
push    edx
mov     eax, [ebp+arg_4]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
mov     edx, [ebp+var_4]
mov     eax, [edx+98h]
mov     ecx, [ebp+var_4]
mov     edx, [ecx+98h]
mov     eax, [eax]
push    edx
mov     ecx, [eax+1ch]
call    ecx
jmp     short loc_100063e6
jmp     short loc_100063e6
mov     eax, 80004002h
mov     esp, ebp
pop     ebp
retn    10h
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+var_4]
cmp     dword ptr [eax+9ch], 0
jnz     short loc_1000640a
mov     eax, 80040209h
jmp     short loc_10006428
mov     ecx, [ebp+arg_0]
push    ecx
mov     edx, [ebp+var_4]
mov     eax, [edx+9ch]
mov     ecx, [ebp+var_4]
mov     edx, [ecx+9ch]
mov     eax, [eax]
push    edx
mov     ecx, [eax+18h]
call    ecx
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+var_4]
cmp     dword ptr [eax+18h], 0
jnz     short loc_10006447
mov     eax, 80040209h
jmp     short loc_1000645b
mov     ecx, [ebp+var_4]
mov     edx, [ecx+18h]
mov     eax, [ebp+var_4]
mov     ecx, [eax+18h]
mov     edx, [edx]
push    ecx
mov     eax, [edx+38h]
call    eax
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+var_4]
cmp     dword ptr [eax+98h], 0
jnz     short loc_1000647a
mov     eax, 8004020ah
jmp     short loc_10006494
mov     ecx, [ebp+var_4]
mov     edx, [ecx+98h]
mov     eax, [ebp+var_4]
mov     ecx, [eax+98h]
mov     edx, [edx]
push    ecx
mov     eax, [edx+14h]
call    eax
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+var_4]
mov     byte ptr [eax+24h], 0
mov     ecx, [ebp+var_4]
cmp     dword ptr [ecx+98h], 0
jnz     short loc_100064c1
mov     eax, 8004020ah
jmp     short loc_100064db
mov     edx, [ebp+var_4]
mov     eax, [edx+98h]
mov     ecx, [ebp+var_4]
mov     edx, [ecx+98h]
mov     eax, [eax]
push    edx
mov     ecx, [eax+18h]
call    ecx
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
mov     eax, 8000ffffh
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+var_4]
cmp     dword ptr [eax+18h], 0
jnz     short loc_10006507
mov     eax, 80040209h
jmp     short loc_1000651b
mov     ecx, [ebp+var_4]
mov     edx, [ecx+18h]
mov     eax, [ebp+var_4]
mov     ecx, [eax+18h]
mov     edx, [edx]
push    ecx
mov     eax, [edx+3ch]
call    eax
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+var_4]
cmp     dword ptr [eax+18h], 0
jnz     short loc_10006537
mov     eax, 80040209h
jmp     short loc_1000654b
mov     ecx, [ebp+var_4]
mov     edx, [ecx+18h]
mov     eax, [ebp+var_4]
mov     ecx, [eax+18h]
mov     edx, [edx]
push    ecx
mov     eax, [edx+40h]
call    eax
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+var_4]
cmp     dword ptr [eax+18h], 0
jnz     short loc_10006567
mov     eax, 80040209h
jmp     short loc_10006594
sub     esp, 8
fld     [ebp+arg_10]
fstp    [esp+0ch+var_c]
mov     ecx, [ebp+arg_c]
push    ecx
mov     edx, [ebp+arg_8]
push    edx
mov     eax, [ebp+arg_4]
push    eax
mov     ecx, [ebp+arg_0]
push    ecx
mov     edx, [ebp+var_4]
mov     eax, [edx+18h]
mov     ecx, [ebp+var_4]
mov     edx, [ecx+18h]
mov     eax, [eax]
push    edx
mov     ecx, [eax+44h]
call    ecx
mov     esp, ebp
pop     ebp
retn    18h
push    ebp
mov     ebp, esp
sub     esp, 0ch
cmp     [ebp+arg_0], 0
jnz     short loc_100065b6
mov     eax, 1
jmp     loc_10006829
mov     eax, [ebp+arg_0]
mov     ecx, [eax]
sub     esp, 10h
mov     edx, esp
mov     eax, [ecx]
mov     [edx], eax
mov     eax, [ecx+4]
mov     [edx+4], eax
mov     eax, [ecx+8]
mov     [edx+8], eax
mov     ecx, [ecx+0ch]
mov     [edx+0ch], ecx
mov     edx, [ebp+arg_4]
mov     eax, [edx]
mov     ecx, [ebp+arg_4]
push    ecx
mov     edx, [eax+1ch]
call    edx
mov     [ebp+var_4], eax
cmp     [ebp+arg_8], 0
jz      loc_10006817
mov     eax, [ebp+arg_0]
mov     ecx, [eax+8]
push    ecx
mov     edx, [ebp+arg_0]
mov     eax, [edx+4]
push    eax
mov     ecx, [ebp+arg_0]
mov     edx, [ecx]
sub     esp, 10h
mov     eax, esp
mov     ecx, [edx]
mov     [eax], ecx
mov     ecx, [edx+4]
mov     [eax+4], ecx
mov     ecx, [edx+8]
mov     [eax+8], ecx
mov     edx, [edx+0ch]
mov     [eax+0ch], edx
mov     eax, [ebp+arg_4]
mov     ecx, [eax]
mov     edx, [ebp+arg_4]
push    edx
mov     eax, [ecx+0ch]
call    eax
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jl      loc_10006817
mov     [ebp+var_8], 0
jmp     short loc_1000664c
mov     ecx, [ebp+var_8]
add     ecx, 1
mov     [ebp+var_8], ecx
mov     edx, [ebp+arg_0]
mov     eax, [ebp+var_8]
cmp     eax, [edx+0ch]
jnb     loc_10006817
mov     ecx, [ebp+var_8]
imul    ecx, 24h
mov     edx, [ebp+arg_0]
mov     eax, [edx+10h]
mov     ecx, [eax+ecx+18h]
push    ecx
mov     edx, [ebp+var_8]
imul    edx, 24h
mov     eax, [ebp+arg_0]
mov     ecx, [eax+10h]
mov     edx, [ecx+edx+14h]
sub     esp, 10h
mov     eax, esp
mov     ecx, [edx]
mov     [eax], ecx
mov     ecx, [edx+4]
mov     [eax+4], ecx
mov     ecx, [edx+8]
mov     [eax+8], ecx
mov     edx, [edx+0ch]
mov     [eax+0ch], edx
mov     eax, [ebp+var_8]
imul    eax, 24h
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+10h]
mov     eax, [edx+eax+10h]
push    eax
mov     ecx, [ebp+var_8]
imul    ecx, 24h
mov     edx, [ebp+arg_0]
mov     eax, [edx+10h]
mov     ecx, [eax+ecx+0ch]
push    ecx
mov     edx, [ebp+var_8]
imul    edx, 24h
mov     eax, [ebp+arg_0]
mov     ecx, [eax+10h]
mov     edx, [ecx+edx+8]
push    edx
mov     eax, [ebp+var_8]
imul    eax, 24h
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+10h]
mov     eax, [edx+eax+4]
push    eax
mov     ecx, [ebp+var_8]
imul    ecx, 24h
mov     edx, [ebp+arg_0]
mov     eax, [edx+10h]
mov     ecx, [eax+ecx]
push    ecx
mov     edx, [ebp+arg_0]
mov     eax, [edx]
sub     esp, 10h
mov     ecx, esp
mov     edx, [eax]
mov     [ecx], edx
mov     edx, [eax+4]
mov     [ecx+4], edx
mov     edx, [eax+8]
mov     [ecx+8], edx
mov     eax, [eax+0ch]
mov     [ecx+0ch], eax
mov     ecx, [ebp+arg_4]
mov     edx, [ecx]
mov     eax, [ebp+arg_4]
push    eax
mov     ecx, [edx+14h]
call    ecx
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jl      loc_1000680a
mov     [ebp+var_c], 0
jmp     short loc_10006738
mov     edx, [ebp+var_c]
add     edx, 1
mov     [ebp+var_c], edx
mov     eax, [ebp+var_8]
imul    eax, 24h
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+10h]
mov     ecx, [ebp+var_c]
cmp     ecx, [edx+eax+1ch]
jnb     loc_10006802
mov     edx, [ebp+var_8]
imul    edx, 24h
mov     eax, [ebp+arg_0]
mov     ecx, [eax+10h]
mov     edx, [ecx+edx+20h]
mov     eax, [ebp+var_c]
mov     ecx, [edx+eax*8+4]
sub     esp, 10h
mov     edx, esp
mov     eax, [ecx]
mov     [edx], eax
mov     eax, [ecx+4]
mov     [edx+4], eax
mov     eax, [ecx+8]
mov     [edx+8], eax
mov     ecx, [ecx+0ch]
mov     [edx+0ch], ecx
mov     edx, [ebp+var_8]
imul    edx, 24h
mov     eax, [ebp+arg_0]
mov     ecx, [eax+10h]
mov     edx, [ecx+edx+20h]
mov     eax, [ebp+var_c]
mov     ecx, [edx+eax*8]
sub     esp, 10h
mov     edx, esp
mov     eax, [ecx]
mov     [edx], eax
mov     eax, [ecx+4]
mov     [edx+4], eax
mov     eax, [ecx+8]
mov     [edx+8], eax
mov     ecx, [ecx+0ch]
mov     [edx+0ch], ecx
mov     edx, [ebp+var_8]
imul    edx, 24h
mov     eax, [ebp+arg_0]
mov     ecx, [eax+10h]
mov     edx, [ecx+edx]
push    edx
mov     eax, [ebp+arg_0]
mov     ecx, [eax]
sub     esp, 10h
mov     edx, esp
mov     eax, [ecx]
mov     [edx], eax
mov     eax, [ecx+4]
mov     [edx+4], eax
mov     eax, [ecx+8]
mov     [edx+8], eax
mov     ecx, [ecx+0ch]
mov     [edx+0ch], ecx
mov     edx, [ebp+arg_4]
mov     eax, [edx]
mov     ecx, [ebp+arg_4]
push    ecx
mov     edx, [eax+18h]
call    edx
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jge     short loc_100067fd
jmp     short loc_10006802
jmp     loc_1000672f
cmp     [ebp+var_4], 0
jge     short loc_1000680a
jmp     short loc_10006817
cmp     [ebp+var_4], 0
jge     short loc_10006812
jmp     short loc_10006817
jmp     loc_10006643
cmp     [ebp+var_4], 80070002h
jnz     short loc_10006826
xor     eax, eax
jmp     short loc_10006829
jmp     short loc_10006829
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
push    offset addend
call    ds:interlockedincrement
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
push    offset addend
call    ds:interlockeddecrement
test    eax, eax
jnz     short loc_10006885
cmp     hlibmodule, 0
jz      short loc_10006885
mov     eax, hlibmodule
push    eax
call    ds:freelibrary
mov     hlibmodule, 0
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
sub     esp, 8
mov     [ebp+var_4], ecx
mov     eax, [ebp+arg_0]
push    eax
mov     ecx, [ebp+var_4]
add     ecx, 4
call    sub_10006830
cmp     [ebp+arg_4], 0
jz      short loc_100068b6
mov     ecx, [ebp+arg_4]
mov     [ebp+var_8], ecx
jmp     short loc_100068bc
mov     edx, [ebp+var_4]
mov     [ebp+var_8], edx
mov     eax, [ebp+var_4]
mov     ecx, [ebp+var_8]
mov     [eax+4], ecx
mov     edx, [ebp+var_4]
mov     dword ptr [edx+8], 0
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
cmp     [ebp+arg_8], 0
jnz     short loc_100068f0
mov     eax, 80004003h
jmp     short loc_1000692d
push    10h
push    offset dword_1000a568
mov     eax, [ebp+buf1]
push    eax
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_1000691f
mov     ecx, [ebp+arg_8]
push    ecx
mov     edx, [ebp+arg_0]
push    edx
call    sub_10006a20
xor     eax, eax
jmp     short loc_1000692d
jmp     short loc_1000692d
mov     eax, [ebp+arg_8]
mov     dword ptr [eax], 0
mov     eax, 80004002h
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
sub     esp, 10h
mov     eax, [ebp+arg_0]
add     eax, 8
push    eax
call    ds:interlockedincrement
mov     [ebp+var_4], eax
mov     [ebp+var_8], 1
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+8]
mov     [ebp+var_c], edx
mov     eax, [ebp+var_c]
cmp     eax, [ebp+var_8]
jbe     short loc_10006976
mov     ecx, [ebp+var_c]
mov     [ebp+var_10], ecx
jmp     short loc_1000697c
mov     edx, [ebp+var_8]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 1ch
mov     eax, [ebp+arg_0]
add     eax, 8
push    eax
call    ds:interlockeddecrement
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jnz     short loc_100069ee
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+8]
add     edx, 1
mov     eax, [ebp+arg_0]
mov     [eax+8], edx
mov     ecx, [ebp+arg_0]
mov     [ebp+var_c], ecx
mov     edx, [ebp+var_c]
mov     [ebp+var_8], edx
cmp     [ebp+var_8], 0
jz      short loc_100069e1
push    1
mov     eax, [ebp+var_8]
mov     edx, [eax]
mov     ecx, [ebp+var_8]
mov     eax, [edx+0ch]
call    eax
mov     [ebp+var_18], eax
jmp     short loc_100069e8
mov     [ebp+var_18], 0
xor     eax, eax
jmp     short loc_10006a17
jmp     short loc_10006a17
mov     [ebp+var_10], 1
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+8]
mov     [ebp+var_14], edx
mov     eax, [ebp+var_14]
cmp     eax, [ebp+var_10]
jbe     short loc_10006a0e
mov     ecx, [ebp+var_14]
mov     [ebp+var_1c], ecx
jmp     short loc_10006a14
mov     edx, [ebp+var_10]
mov     [ebp+var_1c], edx
mov     eax, [ebp+var_1c]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
cmp     [ebp+arg_4], 0
jnz     short loc_10006a30
mov     eax, 80004003h
jmp     short loc_10006a48
mov     eax, [ebp+arg_4]
mov     ecx, [ebp+arg_0]
mov     [eax], ecx
mov     edx, [ebp+arg_0]
mov     eax, [edx]
mov     ecx, [ebp+arg_0]
push    ecx
mov     edx, [eax+4]
call    edx
xor     eax, eax
pop     ebp
retn    8
push    ebp
mov     ebp, esp
sub     esp, 120h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_18], eax
mov     eax, [ebp+lpstring]
push    eax
call    ds:lstrlena
test    eax, eax
jnz     short loc_10006a7b
mov     eax, 80004005h
jmp     loc_10006afe
lea     ecx, [ebp+phkresult]
push    ecx
push    2000000h
push    0
mov     edx, [ebp+lpstring]
push    edx
mov     eax, [ebp+hkey]
push    eax
call    ds:regopenkeyexa
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jnz     short loc_10006afc
mov     [ebp+cchname], 104h
lea     ecx, [ebp+ftlastwritetime]
push    ecx
push    0
push    0
push    0
lea     edx, [ebp+cchname]
push    edx
lea     eax, [ebp+name]
push    eax
push    0
mov     ecx, [ebp+phkresult]
push    ecx
call    ds:regenumkeyexa
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jnz     short loc_10006ae0
lea     edx, [ebp+name]
push    edx
mov     eax, [ebp+phkresult]
push    eax
call    sub_10006a50
jmp     short loc_10006ae2
jmp     short loc_10006ae4
jmp     short loc_10006a9d
mov     ecx, [ebp+phkresult]
push    ecx
call    ds:regclosekey
mov     edx, [ebp+lpstring]
push    edx
mov     eax, [ebp+hkey]
push    eax
call    ds:regdeletekeya
xor     eax, eax
mov     ecx, [ebp+var_18]
xor     ecx, ebp
call    @__security_check_cookie@4
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
sub     esp, 178h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
push    27h
lea     eax, [ebp+sz]
push    eax
lea     ecx, [ebp+rguid]
push    ecx
call    ds:stringfromguid2
mov     [ebp+var_64], eax
lea     edx, [ebp+sz]
push    edx
mov     eax, off_1000d070
push    eax
push    104h
lea     ecx, [ebp+subkey]
push    ecx
call    sub_100071b0
add     esp, 10h
lea     edx, [ebp+phkresult]
push    edx
lea     eax, [ebp+subkey]
push    eax
push    80000000h
call    ds:regcreatekeya
mov     [ebp+var_c], eax
cmp     [ebp+var_c], 0
jz      short loc_10006b80
mov     eax, [ebp+var_c]
or      eax, 80070000h
jmp     loc_10006d13
mov     ecx, dword ptr [ebp+arg_10]
push    ecx
push    104h
lea     edx, [ebp+subkey]
push    edx
call    sub_10007160
push    104h
lea     eax, [ebp+subkey]
push    eax
push    1
push    0
mov     ecx, [ebp+phkresult]
push    ecx
call    ds:regsetvaluea
mov     [ebp+var_c], eax
cmp     [ebp+var_c], 0
jz      short loc_10006bcf
mov     edx, [ebp+phkresult]
push    edx
call    ds:regclosekey
mov     eax, [ebp+var_c]
or      eax, 80070000h
jmp     loc_10006d13
mov     eax, dword ptr [ebp+arg_1c]
push    eax
push    104h
lea     ecx, [ebp+subkey]
push    ecx
call    sub_10007160
lea     edx, [ebp+hkey]
push    edx
lea     eax, [ebp+subkey]
push    eax
mov     ecx, [ebp+phkresult]
push    ecx
call    ds:regcreatekeya
mov     [ebp+var_c], eax
cmp     [ebp+var_c], 0
jz      short loc_10006c1c
mov     edx, [ebp+phkresult]
push    edx
call    ds:regclosekey
mov     eax, [ebp+var_c]
or      eax, 80070000h
jmp     loc_10006d13
mov     eax, dword ptr [ebp+arg_14]
push    eax
push    104h
lea     ecx, [ebp+subkey]
push    ecx
call    sub_10007160
lea     edx, [ebp+subkey]
push    edx
call    ds:lstrlena
add     eax, 1
push    eax
lea     eax, [ebp+subkey]
push    eax
push    1
push    0
mov     ecx, [ebp+hkey]
push    ecx
call    ds:regsetvaluea
mov     [ebp+var_c], eax
cmp     [ebp+var_c], 0
jz      short loc_10006c87
mov     edx, [ebp+phkresult]
push    edx
call    ds:regclosekey
mov     eax, [ebp+hkey]
push    eax
call    ds:regclosekey
mov     eax, [ebp+var_c]
or      eax, 80070000h
jmp     loc_10006d13
mov     ecx, dword ptr [ebp+arg_18]
push    ecx
push    104h
lea     edx, [ebp+subkey]
push    edx
call    sub_10007160
lea     eax, [ebp+subkey]
push    eax
call    ds:lstrlena
add     eax, 1
push    eax
lea     ecx, [ebp+subkey]
push    ecx
push    1
push    0
push    offset valuename
mov     edx, [ebp+hkey]
push    edx
call    ds:regsetvalueexa
mov     [ebp+var_c], eax
mov     eax, [ebp+phkresult]
push    eax
call    ds:regclosekey
mov     ecx, [ebp+hkey]
push    ecx
call    ds:regclosekey
cmp     [ebp+var_c], 0
jg      short loc_10006cf5
mov     edx, [ebp+var_c]
mov     [ebp+var_178], edx
jmp     short loc_10006d0d
mov     eax, [ebp+var_c]
and     eax, 0ffffh
or      eax, 70000h
or      eax, 80000000h
mov     [ebp+var_178], eax
mov     eax, [ebp+var_178]
mov     ecx, [ebp+var_4]
xor     ecx, ebp
call    @__security_check_cookie@4
mov     esp, ebp
pop     ebp
retn    20h
push    ebp
mov     ebp, esp
sub     esp, 164h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
push    27h
lea     eax, [ebp+sz]
push    eax
lea     ecx, [ebp+rguid]
push    ecx
call    ds:stringfromguid2
mov     [ebp+var_164], eax
lea     edx, [ebp+sz]
push    edx
mov     eax, off_1000d070
push    eax
push    104h
lea     ecx, [ebp+string]
push    ecx
call    sub_100071b0
add     esp, 10h
lea     edx, [ebp+string]
push    edx
push    80000000h
call    sub_10006a50
mov     [ebp+var_164], eax
xor     eax, eax
mov     ecx, [ebp+var_4]
xor     ecx, ebp
call    @__security_check_cookie@4
mov     esp, ebp
pop     ebp
retn    10h
push    ebp
mov     ebp, esp
sub     esp, 14h
cmp     [ebp+arg_0], 0
jnz     short loc_10006db3
mov     eax, 1
jmp     short loc_10006e30
mov     eax, [ebp+arg_0]
mov     ecx, [eax]
push    ecx
push    0
push    0
mov     edx, [ebp+arg_4]
mov     eax, [edx]
mov     ecx, [ebp+arg_4]
push    ecx
mov     edx, [eax+10h]
call    edx
mov     [ebp+var_4], eax
cmp     [ebp+arg_8], 0
jz      short loc_10006e1e
mov     [ebp+var_14], 1
mov     eax, [ebp+arg_0]
mov     ecx, [eax+8]
mov     [ebp+var_10], ecx
mov     edx, [ebp+arg_0]
mov     eax, [edx+0ch]
mov     [ebp+var_c], eax
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+10h]
mov     [ebp+var_8], edx
lea     eax, [ebp+var_14]
push    eax
push    0
push    0
push    0
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+4]
push    edx
mov     eax, [ebp+arg_0]
mov     ecx, [eax]
push    ecx
mov     edx, [ebp+arg_4]
mov     eax, [edx]
mov     ecx, [ebp+arg_4]
push    ecx
mov     edx, [eax+14h]
call    edx
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 80070002h
jnz     short loc_10006e2d
xor     eax, eax
jmp     short loc_10006e30
jmp     short loc_10006e30
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
sub     esp, 0ch
mov     [ebp+var_4], 0
mov     [ebp+var_8], 0
jmp     short loc_10006e5f
mov     eax, [ebp+var_8]
add     eax, 1
mov     [ebp+var_8], eax
mov     ecx, [ebp+var_8]
cmp     ecx, dword_1000d2dc
jge     loc_10006ef8
mov     edx, [ebp+var_8]
imul    edx, 14h
add     edx, offset off_1000d2c8
mov     [ebp+var_c], edx
cmp     [ebp+arg_4], 0
jz      short loc_10006ec2
push    offset ainprocserver32
push    offset aboth
mov     eax, dword ptr [ebp+arg_0]
push    eax
mov     ecx, [ebp+var_c]
mov     edx, [ecx]
push    edx
mov     eax, [ebp+var_c]
mov     ecx, [eax+4]
sub     esp, 10h
mov     edx, esp
mov     eax, [ecx]
mov     [edx], eax
mov     eax, [ecx+4]
mov     [edx+4], eax
mov     eax, [ecx+8]
mov     [edx+8], eax
mov     ecx, [ecx+0ch]
mov     [edx+0ch], ecx
call    sub_10006b10
mov     [ebp+var_4], eax
jmp     short loc_10006eeb
mov     edx, [ebp+var_c]
mov     eax, [edx+4]
sub     esp, 10h
mov     ecx, esp
mov     edx, [eax]
mov     [ecx], edx
mov     edx, [eax+4]
mov     [ecx+4], edx
mov     edx, [eax+8]
mov     [ecx+8], edx
mov     eax, [eax+0ch]
mov     [ecx+0ch], eax
call    sub_10006d30
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jge     short loc_10006ef3
jmp     short loc_10006ef8
jmp     loc_10006e56
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
sub     esp, 334h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
mov     [ebp+var_214], 0
push    104h
lea     eax, [ebp+filename]
push    eax
mov     ecx, hmodule
push    ecx
call    ds:getmodulefilenamea
test    eax, eax
jnz     short loc_10006f66
call    ds:getlasterror
mov     [ebp+var_324], eax
mov     eax, [ebp+var_324]
or      eax, 80070000h
jmp     loc_10007142
push    104h
lea     edx, [ebp+widecharstr]
push    edx
lea     eax, [ebp+filename]
push    eax
call    ds:lstrlena
add     eax, 1
push    eax
lea     ecx, [ebp+filename]
push    ecx
push    0
push    0
call    ds:multibytetowidechar
cmp     [ebp+arg_0], 0
jz      short loc_10006fae
push    1
lea     edx, [ebp+widecharstr]
push    edx
call    sub_10006e40
mov     [ebp+var_214], eax
cmp     [ebp+var_214], 0
jl      loc_10007119
push    0
call    ds:coinitialize
mov     [ebp+var_214], eax
mov     [ebp+ppv], 0
mov     [ebp+var_32c], 0
lea     eax, [ebp+ppv]
push    eax
push    offset stru_1000a35c
push    1
push    0
push    offset stru_1000a41c
call    ds:cocreateinstance
mov     [ebp+var_214], eax
cmp     [ebp+var_214], 0
jge     short loc_10007028
lea     ecx, [ebp+var_32c]
push    ecx
push    offset stru_1000a36c
push    1
push    0
push    offset stru_1000a42c
call    ds:cocreateinstance
mov     [ebp+var_214], eax
cmp     [ebp+var_214], 0
jl      loc_1000710d
mov     [ebp+var_330], 0
jmp     short loc_10007050
mov     edx, [ebp+var_330]
add     edx, 1
mov     [ebp+var_330], edx
mov     eax, [ebp+var_330]
cmp     eax, dword_1000d2dc
jge     short loc_100070da
mov     ecx, [ebp+var_330]
imul    ecx, 14h
add     ecx, offset off_1000d2c8
mov     [ebp+var_334], ecx
mov     edx, [ebp+var_334]
cmp     dword ptr [edx+10h], 0
jz      short loc_100070ca
cmp     [ebp+ppv], 0
jz      short loc_100070aa
mov     eax, [ebp+arg_0]
push    eax
mov     ecx, [ebp+ppv]
push    ecx
mov     edx, [ebp+var_334]
mov     eax, [edx+10h]
push    eax
call    sub_10006da0
mov     [ebp+var_214], eax
jmp     short loc_100070ca
mov     ecx, [ebp+arg_0]
push    ecx
mov     edx, [ebp+var_32c]
push    edx
mov     eax, [ebp+var_334]
mov     ecx, [eax+10h]
push    ecx
call    sub_100065a0
mov     [ebp+var_214], eax
cmp     [ebp+var_214], 0
jge     short loc_100070d5
jmp     short loc_100070da
jmp     loc_10007041
cmp     [ebp+ppv], 0
jz      short loc_100070f9
mov     edx, [ebp+ppv]
mov     eax, [edx]
mov     ecx, [ebp+ppv]
push    ecx
mov     edx, [eax+8]
call    edx
jmp     short loc_1000710d
mov     eax, [ebp+var_32c]
mov     ecx, [eax]
mov     edx, [ebp+var_32c]
push    edx
mov     eax, [ecx+8]
call    eax
call    ds:cofreeunusedlibraries
call    ds:couninitialize
cmp     [ebp+var_214], 0
jl      short loc_1000713c
cmp     [ebp+arg_0], 0
jnz     short loc_1000713c
push    0
lea     ecx, [ebp+widecharstr]
push    ecx
call    sub_10006e40
mov     [ebp+var_214], eax
mov     eax, [ebp+var_214]
mov     ecx, [ebp+var_4]
xor     ecx, ebp
call    @__security_check_cookie@4
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 8
mov     [ebp+var_8], 0
mov     [ebp+format], offset as
mov     eax, dword ptr [ebp+arg_8]
push    eax
mov     ecx, [ebp+format]
push    ecx
mov     edx, [ebp+arg_4]
push    edx
mov     eax, [ebp+buffer]
push    eax
call    sub_100071b0
add     esp, 10h
mov     [ebp+var_8], eax
cmp     [ebp+var_8], 0
jge     short loc_1000719a
mov     eax, [ebp+var_8]
jmp     short loc_1000719c
xor     eax, eax
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
sub     esp, 1ch
mov     [ebp+var_c], 0
cmp     [ebp+arg_4], 0
jz      short loc_100071cc
cmp     [ebp+arg_4], 7fffffffh
jbe     short loc_100071d3
mov     [ebp+var_c], 80070057h
mov     eax, [ebp+var_c]
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jl      short loc_10007206
lea     ecx, [ebp+arg_c]
mov     [ebp+arglist], ecx
mov     edx, [ebp+arglist]
push    edx
mov     eax, [ebp+format]
push    eax
push    0
mov     ecx, [ebp+arg_4]
push    ecx
mov     edx, [ebp+buffer]
push    edx
call    sub_10007210
mov     [ebp+var_4], eax
mov     [ebp+arglist], 0
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
sub     esp, 10h
mov     [ebp+var_10], 0
mov     [ebp+var_4], 0
mov     eax, [ebp+arg_4]
sub     eax, 1
mov     [ebp+buffercount], eax
mov     ecx, [ebp+arglist]
push    ecx
mov     edx, [ebp+format]
push    edx
mov     eax, [ebp+buffercount]
push    eax
mov     ecx, [ebp+buffer]
push    ecx
call    ds:_vsnprintf
add     esp, 10h
mov     [ebp+var_c], eax
cmp     [ebp+var_c], 0
jl      short loc_10007257
mov     edx, [ebp+var_c]
cmp     edx, [ebp+buffercount]
jbe     short loc_10007275
mov     eax, [ebp+buffer]
add     eax, [ebp+buffercount]
mov     [ebp+buffer], eax
mov     ecx, [ebp+buffer]
mov     byte ptr [ecx], 0
mov     edx, [ebp+buffercount]
mov     [ebp+var_4], edx
mov     [ebp+var_10], 8007007ah
jmp     short loc_1000729a
mov     eax, [ebp+var_c]
cmp     eax, [ebp+buffercount]
jnz     short loc_10007294
mov     ecx, [ebp+buffer]
add     ecx, [ebp+buffercount]
mov     [ebp+buffer], ecx
mov     edx, [ebp+buffer]
mov     byte ptr [edx], 0
mov     eax, [ebp+buffercount]
mov     [ebp+var_4], eax
jmp     short loc_1000729a
mov     ecx, [ebp+var_c]
mov     [ebp+var_4], ecx
cmp     [ebp+arg_8], 0
jz      short loc_100072a8
mov     edx, [ebp+arg_8]
mov     eax, [ebp+var_4]
mov     [edx], eax
mov     eax, [ebp+var_10]
mov     esp, ebp
pop     ebp
retn    14h
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
push    0
mov     ecx, [ebp+var_4]
add     ecx, 4
call    sub_10006830
mov     eax, [ebp+var_4]
mov     dword ptr [eax], offset ??_7cclassfactory@@6b@
mov     ecx, [ebp+var_4]
mov     edx, [ebp+arg_0]
mov     [ecx+4], edx
mov     eax, [ebp+var_4]
mov     dword ptr [eax+8], 0
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
cmp     [ebp+arg_8], 0
jnz     short loc_10007310
mov     eax, 80004003h
jmp     short loc_10007374
mov     eax, [ebp+arg_8]
mov     dword ptr [eax], 0
push    10h
push    offset dword_1000a568
mov     ecx, [ebp+buf1]
push    ecx
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jnz     short loc_10007351
push    10h
push    offset dword_1000a578
mov     edx, [ebp+buf1]
push    edx
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_1000736f
mov     eax, [ebp+arg_8]
mov     ecx, [ebp+arg_0]
mov     [eax], ecx
mov     edx, [ebp+arg_8]
mov     eax, [edx]
mov     ecx, [ebp+arg_8]
mov     edx, [ecx]
mov     eax, [eax]
push    edx
mov     ecx, [eax+4]
call    ecx
xor     eax, eax
jmp     short loc_10007374
mov     eax, 80004002h
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     ecx, [eax+8]
add     ecx, 1
mov     edx, [ebp+arg_0]
mov     [edx+8], ecx
mov     eax, [ebp+arg_0]
mov     eax, [eax+8]
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 0ch
mov     eax, [ebp+arg_0]
mov     ecx, [eax+8]
sub     ecx, 1
mov     edx, [ebp+arg_0]
mov     [edx+8], ecx
mov     eax, [ebp+arg_0]
cmp     dword ptr [eax+8], 0
jnz     short loc_10007406
mov     ecx, [ebp+arg_0]
mov     [ebp+var_8], ecx
mov     edx, [ebp+var_8]
mov     [ebp+var_4], edx
cmp     [ebp+var_4], 0
jz      short loc_100073f9
mov     ecx, [ebp+var_4]
add     ecx, 4
call    sub_10006850
mov     eax, 1
and     eax, 1
jz      short loc_100073f1
mov     ecx, [ebp+var_4]
push    ecx
call    ??3@yaxpax@z
add     esp, 4
mov     edx, [ebp+var_4]
mov     [ebp+var_c], edx
jmp     short loc_10007400
mov     [ebp+var_c], 0
xor     eax, eax
jmp     short loc_1000740c
jmp     short loc_1000740c
mov     eax, [ebp+arg_0]
mov     eax, [eax+8]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 18h
cmp     [ebp+arg_c], 0
jnz     short loc_10007436
mov     eax, 80004003h
jmp     loc_1000751c
cmp     [ebp+arg_4], 0
jz      short loc_10007462
push    10h
push    offset dword_1000a568
mov     eax, [ebp+buf1]
push    eax
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jnz     short loc_10007462
mov     eax, 80004002h
jmp     loc_1000751c
mov     [ebp+var_4], 0
mov     ecx, [ebp+arg_0]
mov     edx, [ecx+4]
mov     [ebp+var_14], edx
lea     eax, [ebp+var_4]
test    eax, eax
jnz     short loc_10007482
mov     [ebp+var_8], 0
jmp     short loc_10007495
lea     ecx, [ebp+var_4]
push    ecx
mov     edx, [ebp+arg_4]
push    edx
mov     eax, [ebp+var_14]
mov     ecx, [eax+8]
call    ecx
mov     [ebp+var_8], eax
cmp     [ebp+var_8], 0
jnz     short loc_100074ad
cmp     [ebp+var_4], 0
jl      short loc_100074a8
mov     [ebp+var_4], 8007000eh
mov     eax, [ebp+var_4]
jmp     short loc_1000751c
cmp     [ebp+var_4], 0
jge     short loc_100074e5
mov     edx, [ebp+var_8]
mov     [ebp+var_10], edx
mov     eax, [ebp+var_10]
mov     [ebp+var_c], eax
cmp     [ebp+var_c], 0
jz      short loc_100074d9
push    1
mov     ecx, [ebp+var_c]
mov     edx, [ecx]
mov     ecx, [ebp+var_c]
mov     eax, [edx+0ch]
call    eax
mov     [ebp+var_18], eax
jmp     short loc_100074e0
mov     [ebp+var_18], 0
mov     eax, [ebp+var_4]
jmp     short loc_1000751c
mov     ecx, [ebp+var_8]
mov     edx, [ecx]
mov     eax, [ebp+var_8]
push    eax
mov     ecx, [edx+4]
call    ecx
mov     edx, [ebp+arg_c]
push    edx
mov     eax, [ebp+buf1]
push    eax
mov     ecx, [ebp+var_8]
mov     edx, [ecx]
mov     eax, [ebp+var_8]
push    eax
mov     ecx, [edx]
call    ecx
mov     [ebp+var_4], eax
mov     edx, [ebp+var_8]
mov     eax, [edx]
mov     ecx, [ebp+var_8]
push    ecx
mov     edx, [eax+8]
call    edx
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    10h
push    ebp
mov     ebp, esp
cmp     [ebp+arg_4], 0
jz      short loc_10007548
mov     eax, dword_1000d394
add     eax, 1
mov     dword_1000d394, eax
jmp     short loc_10007557
mov     ecx, dword_1000d394
sub     ecx, 1
mov     dword_1000d394, ecx
xor     eax, eax
pop     ebp
retn    8
push    ebp
mov     ebp, esp
sub     esp, 18h
push    10h
push    offset dword_1000a568
mov     eax, [ebp+riid]
push    eax
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jnz     short loc_100075a8
push    10h
push    offset dword_1000a578
mov     ecx, [ebp+riid]
push    ecx
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jnz     short loc_100075a8
mov     eax, 80004002h
jmp     loc_10007664
mov     [ebp+var_4], 0
jmp     short loc_100075ba
mov     edx, [ebp+var_4]
add     edx, 1
mov     [ebp+var_4], edx
mov     eax, [ebp+var_4]
cmp     eax, dword_1000d2dc
jge     loc_1000765f
mov     ecx, [ebp+var_4]
imul    ecx, 14h
add     ecx, offset off_1000d2c8
mov     [ebp+var_8], ecx
mov     edx, [ebp+var_8]
mov     eax, [edx+4]
mov     [ebp+buf1], eax
push    10h
mov     ecx, [ebp+rclsid]
push    ecx
mov     edx, [ebp+buf1]
push    edx
call    memcmp
add     esp, 0ch
neg     eax
sbb     eax, eax
add     eax, 1
jz      short loc_1000765a
push    0ch
call    ??2@yapaxi@z
add     esp, 4
mov     [ebp+var_10], eax
cmp     [ebp+var_10], 0
jz      short loc_10007620
mov     eax, [ebp+var_8]
push    eax
mov     ecx, [ebp+var_10]
call    sub_100072c0
mov     [ebp+var_18], eax
jmp     short loc_10007627
mov     [ebp+var_18], 0
mov     ecx, [ebp+var_18]
mov     [ebp+var_c], ecx
mov     edx, [ebp+ppv]
mov     eax, [ebp+var_c]
mov     [edx], eax
mov     ecx, [ebp+ppv]
cmp     dword ptr [ecx], 0
jnz     short loc_10007644
mov     eax, 8007000eh
jmp     short loc_10007664
mov     edx, [ebp+ppv]
mov     eax, [edx]
mov     ecx, [ebp+ppv]
mov     edx, [ecx]
mov     eax, [eax]
push    edx
mov     ecx, [eax+4]
call    ecx
xor     eax, eax
jmp     short loc_10007664
jmp     loc_100075b1
mov     eax, 80040111h
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
sub     esp, 8
mov     [ebp+var_4], 0
jmp     short loc_10007688
mov     eax, [ebp+var_4]
add     eax, 1
mov     [ebp+var_4], eax
mov     ecx, [ebp+var_4]
cmp     ecx, dword_1000d2dc
jge     short loc_100076c0
mov     edx, [ebp+var_4]
imul    edx, 14h
add     edx, offset off_1000d2c8
mov     [ebp+var_8], edx
mov     eax, [ebp+var_8]
cmp     dword ptr [eax+0ch], 0
jz      short loc_100076be
mov     ecx, [ebp+var_8]
mov     edx, [ecx+4]
push    edx
mov     eax, [ebp+arg_0]
push    eax
mov     ecx, [ebp+var_8]
mov     edx, [ecx+0ch]
call    edx
jmp     short loc_1000767f
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
xor     eax, eax
cmp     dword_1000d394, 0
setnle  al
test    eax, eax
jnz     short loc_100076ec
cmp     addend, 0
jz      short loc_100076f5
mov     eax, 1
jmp     short loc_100076f7
jmp     short loc_100076f7
xor     eax, eax
pop     ebp
retn
push    ebp
mov     ebp, esp
push    ecx
mov     eax, [ebp+fdwreason]
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jz      short loc_10007762
cmp     [ebp+var_4], 1
jz      short loc_10007718
jmp     short loc_10007769
mov     ecx, [ebp+hinstdll]
push    ecx
call    ds:disablethreadlibrarycalls
mov     dword_1000d2f8, 1
mov     versioninformation.dwosversioninfosize, 94h
push    offset versioninformation
call    ds:getversionexa
test    eax, eax
jz      short loc_10007751
mov     edx, versioninformation.dwplatformid
mov     dword_1000d2f8, edx
mov     eax, [ebp+hinstdll]
mov     hmodule, eax
push    1
call    sub_10007670
jmp     short loc_10007769
push    0
call    sub_10007670
mov     eax, 1
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
push    0
push    0
mov     eax, [ebp+bmanualreset]
push    eax
push    0
call    ds:createeventa
mov     ecx, [ebp+var_4]
mov     [ecx], eax
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_100077d0
mov     eax, large fs:0
push    eax
sub     esp, 0ch
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_18], ecx
push    1
mov     ecx, [ebp+var_18]
add     ecx, 4
call    sub_10007780
mov     [ebp+var_4], 0
push    0
mov     ecx, [ebp+var_18]
add     ecx, 8
call    sub_10007780
mov     eax, [ebp+var_18]
add     eax, 18h
mov     [ebp+lpcriticalsection], eax
mov     ecx, [ebp+lpcriticalsection]
push    ecx
call    ds:initializecriticalsection
mov     edx, [ebp+var_18]
add     edx, 30h
mov     [ebp+var_14], edx
mov     eax, [ebp+var_14]
push    eax
call    ds:initializecriticalsection
mov     ecx, [ebp+var_18]
mov     dword ptr [ecx+14h], 0
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_18]
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10007870
mov     eax, large fs:0
push    eax
sub     esp, 8
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_14], ecx
mov     [ebp+var_4], 3
mov     ecx, [ebp+var_14]
call    sub_100030d0
mov     byte ptr [ebp+var_4], 2
mov     eax, [ebp+var_14]
add     eax, 30h
push    eax
call    ds:deletecriticalsection
mov     byte ptr [ebp+var_4], 1
mov     ecx, [ebp+var_14]
add     ecx, 18h
push    ecx
call    ds:deletecriticalsection
mov     byte ptr [ebp+var_4], 0
mov     ecx, [ebp+var_14]
add     ecx, 8
call    ??1initialthreadparam@umsfreevirtualprocessorroot@details@concurrency@@qae@xz
mov     [ebp+var_4], 0ffffffffh
mov     ecx, [ebp+var_14]
add     ecx, 4
call    ??1initialthreadparam@umsfreevirtualprocessorroot@details@concurrency@@qae@xz
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
sub     esp, 0ch
call    sub_10007b60
mov     [ebp+var_8], eax
mov     eax, [ebp+lpthreadparameter]
mov     [ebp+var_4], eax
mov     ecx, [ebp+var_4]
mov     edx, [ecx]
mov     ecx, [ebp+var_4]
mov     eax, [edx]
call    eax
mov     [ebp+var_c], eax
cmp     [ebp+var_8], 0
jl      short loc_1000792f
call    ds:couninitialize
mov     eax, [ebp+var_c]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 2ch
mov     [ebp+lpparameter], ecx
mov     eax, [ebp+lpparameter]
add     eax, 18h
mov     [ebp+var_4], eax
mov     ecx, [ebp+var_4]
mov     [ebp+lpcriticalsection], ecx
mov     edx, [ebp+lpcriticalsection]
push    edx
call    ds:entercriticalsection
mov     eax, [ebp+lpparameter]
cmp     dword ptr [eax+14h], 0
jnz     short loc_10007976
mov     [ebp+var_1c], 0
jmp     short loc_1000797d
jmp     short loc_1000797d
mov     [ebp+var_1c], 1
cmp     [ebp+var_1c], 0
jz      short loc_1000799f
mov     [ebp+var_c], 0
mov     ecx, [ebp+var_4]
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_c]
jmp     short loc_100079fd
lea     eax, [ebp+threadid]
push    eax
push    0
mov     ecx, [ebp+lpparameter]
push    ecx
push    offset startaddress
push    0
push    0
call    ds:createthread
mov     edx, [ebp+lpparameter]
mov     [edx+14h], eax
mov     eax, [ebp+lpparameter]
cmp     dword ptr [eax+14h], 0
jnz     short loc_100079e3
mov     [ebp+var_10], 0
mov     ecx, [ebp+var_4]
mov     [ebp+var_24], ecx
mov     edx, [ebp+var_24]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_10]
jmp     short loc_100079fd
mov     [ebp+var_14], 1
mov     eax, [ebp+var_4]
mov     [ebp+var_28], eax
mov     ecx, [ebp+var_28]
push    ecx
call    ds:leavecriticalsection
mov     eax, [ebp+var_14]
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
sub     esp, 20h
mov     [ebp+var_20], ecx
mov     eax, [ebp+var_20]
add     eax, 18h
mov     [ebp+var_4], eax
mov     ecx, [ebp+var_4]
mov     [ebp+lpcriticalsection], ecx
mov     edx, [ebp+lpcriticalsection]
push    edx
call    ds:entercriticalsection
mov     eax, [ebp+var_20]
cmp     dword ptr [eax+14h], 0
jnz     short loc_10007a46
mov     [ebp+var_14], 0
jmp     short loc_10007a4d
jmp     short loc_10007a4d
mov     [ebp+var_14], 1
cmp     [ebp+var_14], 0
jnz     short loc_10007a6f
mov     [ebp+var_8], 80004005h
mov     ecx, [ebp+var_4]
mov     [ebp+var_18], ecx
mov     edx, [ebp+var_18]
push    edx
call    ds:leavecriticalsection
mov     eax, [ebp+var_8]
jmp     short loc_10007ab0
mov     eax, [ebp+var_20]
mov     ecx, [ebp+arg_0]
mov     [eax+0ch], ecx
mov     edx, [ebp+var_20]
mov     eax, [edx+4]
push    eax
call    ds:setevent
push    0ffffffffh
mov     ecx, [ebp+var_20]
mov     edx, [ecx+8]
push    edx
call    ds:waitforsingleobject
mov     eax, [ebp+var_20]
mov     ecx, [eax+10h]
mov     [ebp+var_c], ecx
mov     edx, [ebp+var_4]
mov     [ebp+var_1c], edx
mov     eax, [ebp+var_1c]
push    eax
call    ds:leavecriticalsection
mov     eax, [ebp+var_c]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
push    0ffffffffh
mov     eax, [ebp+var_4]
mov     ecx, [eax+4]
push    ecx
call    ds:waitforsingleobject
mov     edx, [ebp+var_4]
mov     eax, [edx+0ch]
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
push    0
mov     eax, [ebp+var_4]
mov     ecx, [eax+4]
push    ecx
call    ds:waitforsingleobject
neg     eax
sbb     eax, eax
add     eax, 1
jnz     short loc_10007b05
xor     eax, eax
jmp     short loc_10007b1b
jmp     short loc_10007b1b
cmp     [ebp+arg_0], 0
jz      short loc_10007b16
mov     edx, [ebp+arg_0]
mov     eax, [ebp+var_4]
mov     ecx, [eax+0ch]
mov     [edx], ecx
mov     eax, 1
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], ecx
mov     eax, [ebp+var_4]
mov     ecx, [ebp+arg_0]
mov     [eax+10h], ecx
mov     edx, [ebp+var_4]
mov     eax, [edx+4]
push    eax
call    ds:resetevent
mov     ecx, [ebp+var_4]
mov     edx, [ecx+8]
push    edx
call    ds:setevent
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 0ch
mov     [ebp+var_8], 80004005h
push    offset modulename
call    ds:getmodulehandlea
mov     [ebp+hmodule], eax
cmp     [ebp+hmodule], 0
jz      short loc_10007ba3
push    offset procname
mov     eax, [ebp+hmodule]
push    eax
call    ds:getprocaddress
mov     [ebp+var_c], eax
cmp     [ebp+var_c], 0
jz      short loc_10007ba3
push    4
push    0
call    [ebp+var_c]
mov     [ebp+var_8], eax
mov     eax, [ebp+var_8]
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
push    ecx
mov     eax, [ebp+arg_0]
mov     [ebp+var_4], eax
cmp     [ebp+arg_8], 0
jz      short loc_10007c03
mov     ecx, [ebp+arg_8]
sub     ecx, 1
mov     [ebp+arg_8], ecx
jz      short loc_10007bf5
mov     edx, [ebp+arg_0]
mov     eax, [ebp+arg_4]
mov     cx, [eax]
mov     [edx], cx
mov     edx, [ebp+arg_0]
movzx   eax, word ptr [edx]
mov     ecx, [ebp+arg_0]
add     ecx, 2
mov     [ebp+arg_0], ecx
mov     edx, [ebp+arg_4]
add     edx, 2
mov     [ebp+arg_4], edx
test    eax, eax
jz      short loc_10007bf5
jmp     short loc_10007bc0
cmp     [ebp+arg_8], 0
jnz     short loc_10007c03
xor     eax, eax
mov     ecx, [ebp+arg_0]
mov     [ecx], ax
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
push    ecx
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_4]
add     eax, 1
mov     [ebp+var_4], eax
mov     ecx, [ebp+var_4]
mov     edx, [ebp+arg_0]
movzx   eax, word ptr [edx+ecx*2]
test    eax, eax
jz      short loc_10007c34
jmp     short loc_10007c1b
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 24h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
mov     eax, dword ptr [ebp+arg_0]
push    eax
push    offset ad
push    20h
lea     ecx, [ebp+multibytestr]
push    ecx
call    sub_100071b0
add     esp, 10h
mov     edx, [ebp+cchwidechar]
push    edx
mov     eax, [ebp+lpwidecharstr]
push    eax
push    0ffffffffh
lea     ecx, [ebp+multibytestr]
push    ecx
push    0
push    0
call    ds:multibytetowidechar
mov     ecx, [ebp+var_4]
xor     ecx, ebp
call    @__security_check_cookie@4
mov     esp, ebp
pop     ebp
retn    0ch
push    ebp
mov     ebp, esp
sub     esp, 8
mov     [ebp+var_8], ecx
mov     eax, [ebp+var_8]
mov     dword ptr [eax], 0
mov     ecx, [ebp+var_8]
mov     dword ptr [ecx+4], 0
mov     edx, [ebp+var_8]
mov     dword ptr [edx+8], 0
mov     eax, [ebp+var_8]
add     eax, 0ch
mov     [ebp+var_4], eax
mov     ecx, [ebp+var_4]
mov     dword ptr [ecx], 0ah
mov     edx, [ebp+var_4]
mov     dword ptr [edx+4], 0
mov     eax, [ebp+var_4]
mov     dword ptr [eax+8], 0
mov     eax, [ebp+var_8]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    0ffffffffh
push    offset seh_10007cf0
mov     eax, large fs:0
push    eax
sub     esp, 10h
mov     eax, ___security_cookie
xor     eax, ebp
push    eax
lea     eax, [ebp+var_c]
mov     large fs:0, eax
mov     [ebp+var_1c], ecx
mov     [ebp+var_4], 0
mov     ecx, [ebp+var_1c]
call    sub_10007d70
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_1c]
mov     ecx, [eax+14h]
mov     [ebp+var_10], ecx
cmp     [ebp+var_10], 0
jz      short loc_10007d60
mov     edx, [ebp+var_10]
mov     [ebp+var_14], edx
mov     eax, [ebp+var_10]
mov     ecx, [eax+4]
mov     [ebp+var_10], ecx
mov     edx, [ebp+var_14]
mov     [ebp+var_18], edx
mov     eax, [ebp+var_18]
push    eax
call    ??3@yaxpax@z
add     esp, 4
jmp     short loc_10007d37
mov     ecx, [ebp+var_c]
mov     large fs:0, ecx
pop     ecx
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
sub     esp, 10h
mov     [ebp+var_10], ecx
mov     eax, [ebp+var_10]
mov     ecx, [eax]
mov     [ebp+var_4], ecx
cmp     [ebp+var_4], 0
jz      short loc_10007daa
mov     edx, [ebp+var_4]
mov     [ebp+var_8], edx
mov     eax, [ebp+var_4]
mov     ecx, [eax+4]
mov     [ebp+var_4], ecx
mov     edx, [ebp+var_8]
mov     [ebp+var_c], edx
mov     eax, [ebp+var_c]
push    eax
call    ??3@yaxpax@z
add     esp, 4
jmp     short loc_10007d81
mov     ecx, [ebp+var_10]
mov     dword ptr [ecx+8], 0
mov     edx, [ebp+var_10]
mov     dword ptr [edx+4], 0
mov     eax, [ebp+var_10]
mov     dword ptr [eax], 0
mov     esp, ebp
pop     ebp
retn
push    ebp
mov     ebp, esp
sub     esp, 10h
mov     [ebp+var_10], ecx
mov     eax, [ebp+arg_0]
cmp     dword ptr [eax], 0
jnz     short loc_10007df5
xor     eax, eax
jmp     short loc_10007e1a
mov     ecx, [ebp+arg_0]
mov     edx, [ecx]
mov     [ebp+var_8], edx
mov     eax, [ebp+var_8]
mov     ecx, [eax+4]
mov     [ebp+var_c], ecx
mov     edx, [ebp+arg_0]
mov     eax, [ebp+var_c]
mov     [edx], eax
mov     ecx, [ebp+var_8]
mov     edx, [ecx+8]
mov     [ebp+var_4], edx
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 0ch
mov     [ebp+var_c], ecx
cmp     [ebp+arg_0], 0
jnz     short loc_10007e33
xor     eax, eax
jmp     short loc_10007e45
mov     eax, [ebp+arg_0]
mov     [ebp+var_8], eax
mov     ecx, [ebp+var_8]
mov     edx, [ecx+8]
mov     [ebp+var_4], edx
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 10h
mov     [ebp+var_10], ecx
mov     ecx, [ebp+var_10]
call    unknown_libname_3
mov     [ebp+var_4], eax
jmp     short loc_10007e8b
cmp     [ebp+var_4], 0
jnz     short loc_10007e76
mov     eax, [ebp+var_10]
mov     ecx, [eax]
mov     [ebp+var_4], ecx
jmp     short loc_10007e8b
mov     edx, [ebp+var_4]
mov     [ebp+var_8], edx
mov     eax, [ebp+var_8]
mov     ecx, [eax+4]
mov     [ebp+var_c], ecx
mov     edx, [ebp+var_c]
mov     [ebp+var_4], edx
cmp     [ebp+var_4], 0
jz      short loc_10007ea9
mov     eax, [ebp+var_4]
push    eax
mov     ecx, [ebp+var_10]
call    sub_10007e20
cmp     eax, [ebp+arg_0]
jnz     short loc_10007ea7
mov     eax, [ebp+var_4]
jmp     short loc_10007eab
jmp     short loc_10007e66
xor     eax, eax
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 28h
mov     [ebp+var_24], ecx
mov     eax, [ebp+var_24]
add     eax, 0ch
mov     [ebp+var_18], eax
mov     ecx, [ebp+var_18]
mov     edx, [ecx+8]
mov     [ebp+var_10], edx
cmp     [ebp+var_10], 0
jz      short loc_10007f02
mov     eax, [ebp+var_10]
mov     ecx, [eax+4]
mov     [ebp+var_14], ecx
mov     edx, [ebp+var_18]
mov     eax, [ebp+var_14]
mov     [edx+8], eax
mov     ecx, [ebp+var_18]
mov     edx, [ecx+4]
sub     edx, 1
mov     eax, [ebp+var_18]
mov     [eax+4], edx
mov     ecx, [ebp+var_10]
mov     [ebp+var_4], ecx
cmp     [ebp+var_4], 0
jnz     short loc_10007f3c
push    0ch
call    ??2@yapaxi@z
add     esp, 4
mov     [ebp+var_c], eax
cmp     [ebp+var_c], 0
jz      short loc_10007f29
mov     edx, [ebp+var_c]
mov     [ebp+var_28], edx
jmp     short loc_10007f30
mov     [ebp+var_28], 0
mov     eax, [ebp+var_28]
mov     [ebp+var_8], eax
mov     ecx, [ebp+var_8]
mov     [ebp+var_4], ecx
cmp     [ebp+var_4], 0
jnz     short loc_10007f46
xor     eax, eax
jmp     short loc_10007faa
mov     edx, [ebp+var_4]
mov     eax, [ebp+arg_0]
mov     [edx+8], eax
mov     ecx, [ebp+var_4]
mov     dword ptr [ecx+4], 0
mov     edx, [ebp+var_24]
mov     eax, [edx+4]
mov     [ebp+var_1c], eax
mov     ecx, [ebp+var_4]
mov     edx, [ebp+var_1c]
mov     [ecx], edx
mov     eax, [ebp+var_24]
cmp     dword ptr [eax+4], 0
jnz     short loc_10007f7d
mov     ecx, [ebp+var_24]
mov     edx, [ebp+var_4]
mov     [ecx], edx
jmp     short loc_10007f8f
mov     eax, [ebp+var_24]
mov     ecx, [eax+4]
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
mov     eax, [ebp+var_4]
mov     [edx+4], eax
mov     ecx, [ebp+var_24]
mov     edx, [ebp+var_4]
mov     [ecx+4], edx
mov     eax, [ebp+var_24]
mov     ecx, [eax+8]
add     ecx, 1
mov     edx, [ebp+var_24]
mov     [edx+8], ecx
mov     eax, [ebp+var_4]
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 8
mov     [ebp+var_8], ecx
mov     ecx, [ebp+arg_0]
call    unknown_libname_3
mov     [ebp+var_4], eax
cmp     [ebp+var_4], 0
jz      short loc_10007fe9
lea     eax, [ebp+var_4]
push    eax
mov     ecx, [ebp+arg_0]
call    sub_10007de0
push    eax
mov     ecx, [ebp+var_8]
call    sub_10007ec0
test    eax, eax
jnz     short loc_10007fe7
xor     eax, eax
jmp     short loc_10007fee
jmp     short loc_10007fc4
mov     eax, 1
mov     esp, ebp
pop     ebp
retn    4
push    ebp
mov     ebp, esp
sub     esp, 10h
mov     [ebp+var_10], ecx
mov     eax, [ebp+var_10]
mov     ecx, [eax+8]
mov     [ebp+var_4], ecx
cmp     [ebp+var_4], 0
jz      short loc_1000803b
mov     edx, [ebp+var_4]
mov     [ebp+var_8], edx
mov     eax, [ebp+var_4]
mov     ecx, [eax+4]
mov     [ebp+var_4], ecx
mov     edx, [ebp+var_8]
mov     [ebp+var_c], edx
mov     eax, [ebp+var_c]
push    eax
call    ??3@yaxpax@z
add     esp, 4
jmp     short loc_10008012
mov     esp, ebp
pop     ebp
retn
push    esi
push    80h
call    ds:_malloc_crt
mov     esi, eax
push    esi
call    ds:_encode_pointer
pop     ecx
pop     ecx
mov     dword_1000db20, eax
mov     dword_1000db1c, eax
test    esi, esi
jnz     short loc_100080f8
xor     eax, eax
inc     eax
pop     esi
retn
and     dword ptr [esi], 0
call    sub_10008847
push    offset byte_1000886d
call    _atexit
mov     dword ptr [esp], offset sub_1000877f
call    _atexit
pop     ecx
xor     eax, eax
pop     esi
retn
push    offset dword_1000d6c4
call    __clean_type_info_names_internal
pop     ecx
retn
mov     edi, edi
push    esi
mov     eax, offset dword_1000b360
mov     esi, offset dword_1000b360
push    edi
mov     edi, eax
cmp     eax, esi
jnb     short loc_1000886a
mov     eax, [edi]
test    eax, eax
jz      short loc_10008863
call    eax
add     edi, 4
cmp     edi, esi
jb      short loc_1000885b
pop     edi
pop     esi
retn
push    esi
mov     eax, offset dword_1000b368
mov     esi, offset dword_1000b368
push    edi
mov     edi, eax
cmp     eax, esi
jnb     short loc_10008890
mov     eax, [edi]
test    eax, eax
jz      short loc_10008889
call    eax
add     edi, 4
cmp     edi, esi
jb      short loc_10008881
pop     edi
pop     esi
retn
cmp     dword_1000db0c, 0
jz      short __ftol2
sub     esp, 4
fnstcw  word ptr [esp]
pop     eax
and     ax, 7fh
cmp     ax, 7fh
jz      short __ftol2_pentium4
call    __get_sse2_info
mov     dword_1000db0c, eax
xor     eax, eax
retn
mov     ecx, [ebp+var_18]
jmp     sub_10003990
mov     ecx, [ebp+var_18]
add     ecx, 58h
jmp     sub_100030b0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-14h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b380
jmp     __cxxframehandler3
lea     ecx, [ebp+var_10]
jmp     loc_100018e0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-2ch]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b3ac
jmp     __cxxframehandler3
mov     ecx, [ebp+var_10]
jmp     sub_10007870
mov     ecx, [ebp+var_10]
add     ecx, 48h
jmp     sub_10002830
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-8]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b3e0
jmp     __cxxframehandler3
mov     ecx, [ebp+var_14]
jmp     sub_10007870
mov     ecx, [ebp+var_14]
add     ecx, 48h
jmp     sub_10002830
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-0ch]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b414
jmp     __cxxframehandler3
lea     ecx, [ebp+var_60]
jmp     loc_100018e0
lea     ecx, [ebp+var_5c]
jmp     sub_100031a0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-74h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     ecx, [edx-4]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b448
jmp     __cxxframehandler3
lea     ecx, [ebp+var_10]
jmp     loc_100018e0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-5ch]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b474
jmp     __cxxframehandler3
mov     ecx, [ebp+var_14]
jmp     sub_10004a90
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-0ch]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b4a0
jmp     __cxxframehandler3
lea     ecx, [ebp+var_10]
jmp     loc_100018e0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-18h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b4cc
jmp     __cxxframehandler3
lea     ecx, [ebp+var_10]
jmp     loc_100018e0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-30h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b4f8
jmp     __cxxframehandler3
lea     ecx, [ebp+var_10]
jmp     loc_100018e0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-40h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b524
jmp     __cxxframehandler3
mov     eax, [ebp+var_14]
push    eax
call    ??3@yaxpax@z
pop     ecx
retn
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-10h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b550
jmp     __cxxframehandler3
lea     ecx, [ebp+var_10]
jmp     loc_100018e0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-28h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b57c
jmp     __cxxframehandler3
mov     ecx, [ebp+var_14]
add     ecx, 18h
jmp     sub_10004600
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-0ch]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b5a8
jmp     __cxxframehandler3
mov     eax, [ebp+var_18]
push    eax
call    ??3@yaxpax@z
pop     ecx
retn
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-14h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b5d4
jmp     __cxxframehandler3
lea     ecx, [ebp+var_5c]
jmp     sub_100031a0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-0ach]
xor     ecx, eax
call    @__security_check_cookie@4
mov     ecx, [edx-8]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b600
jmp     __cxxframehandler3
lea     ecx, [ebp+var_5c]
jmp     sub_100031a0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-58h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     ecx, [edx-4]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b62c
jmp     __cxxframehandler3
mov     ecx, [ebp+var_20]
jmp     sub_10004a90
mov     ecx, [ebp+var_20]
add     ecx, 34h
jmp     sub_100031a0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-18h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b660
jmp     __cxxframehandler3
mov     ecx, [ebp+var_14]
jmp     sub_10004a90
mov     ecx, [ebp+var_14]
add     ecx, 34h
jmp     sub_100031a0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-0ch]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b694
jmp     __cxxframehandler3
lea     ecx, [ebp+var_10]
jmp     loc_100018e0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-38h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b6c0
jmp     __cxxframehandler3
lea     ecx, [ebp+var_10]
jmp     loc_100018e0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-48h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b6ec
jmp     __cxxframehandler3
lea     ecx, [ebp+var_10]
jmp     loc_100018e0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-20h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b718
jmp     __cxxframehandler3
lea     ecx, [ebp+var_10]
jmp     loc_100018e0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-24h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b744
jmp     __cxxframehandler3
mov     ecx, [ebp+var_18]
add     ecx, 4
jmp     ??1initialthreadparam@umsfreevirtualprocessorroot@details@concurrency@@qae@xz
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-10h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b770
jmp     __cxxframehandler3
mov     ecx, [ebp+var_14]
add     ecx, 4
jmp     ??1initialthreadparam@umsfreevirtualprocessorroot@details@concurrency@@qae@xz
mov     ecx, [ebp+var_14]
add     ecx, 8
jmp     ??1initialthreadparam@umsfreevirtualprocessorroot@details@concurrency@@qae@xz
mov     ecx, [ebp+var_14]
add     ecx, 18h
jmp     sub_100030b0
mov     ecx, [ebp+var_14]
add     ecx, 30h
jmp     sub_100030b0
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-0ch]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b7b4
jmp     __cxxframehandler3
mov     ecx, [ebp+var_1c]
add     ecx, 0ch
jmp     sub_10008000
mov     edx, [esp-4+arg_4]
lea     eax, [edx+0ch]
mov     ecx, [edx-14h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b7e0
jmp     __cxxframehandler3
mov     ecx, [ebp-10h]
jmp     sub_100021f0
mov     edx, [esp+arg_4]
lea     eax, [edx-8]
mov     ecx, [edx-0ch]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b8b4
jmp     __cxxframehandler3
mov     ecx, [ebp+4]
jmp     sub_100021f0
mov     eax, [ebp+8]
push    eax
call    ??3@yaxpax@z
pop     ecx
retn
mov     edx, [esp+arg_4]
lea     eax, [edx-4]
mov     ecx, [edx-8]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b8e8
jmp     __cxxframehandler3
lea     ecx, [ebp-20h]
jmp     loc_100018e0
mov     edx, [esp+arg_4]
lea     eax, [edx-20h]
mov     ecx, [edx-24h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b914
jmp     __cxxframehandler3
lea     ecx, [ebp-14h]
jmp     loc_100018e0
mov     edx, [esp+arg_4]
lea     eax, [edx-1ch]
mov     ecx, [edx-20h]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b940
jmp     __cxxframehandler3
mov     eax, [ebp-10h]
push    eax
call    ??3@yaxpax@z
pop     ecx
retn
mov     edx, [esp+arg_4]
lea     eax, [edx-8]
mov     ecx, [edx-0ch]
xor     ecx, eax
call    @__security_check_cookie@4
mov     eax, offset stru_1000b96c
jmp     __cxxframehandler3
call    ds:gettickcount
mov     dword_1000dafc, eax
retn