push    ebp
mov     ebp, esp
sub     esp, 44h
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
mov     [ebp+var_38], 5c097a5fh
mov     eax, ds:dword_414b40
mov     [ebp+var_18], eax
mov     ecx, ds:dword_414b44
mov     [ebp+var_14], ecx
mov     edx, ds:dword_414b48
mov     [ebp+var_10], edx
mov     eax, ds:dword_414b4c
mov     [ebp+var_c], eax
mov     cl, ds:byte_414b50
mov     [ebp+var_8], cl
mov     edx, [ebp+var_18]
mov     [ebp+var_30], edx
mov     eax, 4
shl     eax, 0
mov     ecx, [ebp+eax+var_18]
mov     [ebp+var_34], ecx
mov     edx, 4
shl     edx, 1
mov     eax, [ebp+edx+var_18]
mov     [ebp+var_28], eax
mov     ecx, 4
imul    edx, ecx, 3
mov     eax, [ebp+edx+var_18]
mov     [ebp+var_2c], eax
mov     ecx, [ebp+arg_0]
mov     [ebp+var_3c], ecx
lea     edx, [ebp+var_3c]
mov     [ebp+var_44], edx
mov     [ebp+var_40], 0
jmp     short loc_40109f
mov     eax, [ebp+var_44]
mov     ecx, [eax]
add     ecx, 8
mov     edx, [ebp+var_44]
mov     [edx], ecx
mov     eax, [ebp+var_40]
add     eax, 1
mov     [ebp+var_40], eax
mov     ecx, [ebp+var_40]
cmp     ecx, [ebp+arg_4]
jnb     loc_401b1b
mov     [ebp+var_24], 812f4be0h
mov     edx, 4
imul    eax, edx, 0
mov     ecx, [ebp+var_3c]
mov     edx, [ecx+eax]
mov     [ebp+var_1c], edx
mov     eax, 4
shl     eax, 0
mov     ecx, [ebp+var_3c]
mov     edx, [ecx+eax]
mov     [ebp+var_20], edx
mov     eax, [ebp+var_1c]
shl     eax, 4
add     eax, [ebp+var_28]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_1c]
xor     eax, ecx
mov     edx, [ebp+var_1c]
shr     edx, 5
add     edx, [ebp+var_2c]
xor     eax, edx
mov     ecx, [ebp+var_20]
sub     ecx, eax
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
shl     edx, 4
add     edx, [ebp+var_30]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_20]
xor     edx, eax
mov     ecx, [ebp+var_20]
shr     ecx, 5
add     ecx, [ebp+var_34]
xor     edx, ecx
mov     eax, [ebp+var_1c]
sub     eax, edx
mov     [ebp+var_1c], eax
mov     ecx, [ebp+var_24]
sub     ecx, [ebp+var_38]
mov     [ebp+var_24], ecx
mov     edx, [ebp+var_1c]
shl     edx, 4
add     edx, [ebp+var_28]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_1c]
xor     edx, eax
mov     ecx, [ebp+var_1c]
shr     ecx, 5
add     ecx, [ebp+var_2c]
xor     edx, ecx
mov     eax, [ebp+var_20]
sub     eax, edx
mov     [ebp+var_20], eax
mov     ecx, [ebp+var_20]
shl     ecx, 4
add     ecx, [ebp+var_30]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_20]
xor     ecx, edx
mov     eax, [ebp+var_20]
shr     eax, 5
add     eax, [ebp+var_34]
xor     ecx, eax
mov     edx, [ebp+var_1c]
sub     edx, ecx
mov     [ebp+var_1c], edx
mov     eax, [ebp+var_24]
sub     eax, [ebp+var_38]
mov     [ebp+var_24], eax
mov     ecx, [ebp+var_1c]
shl     ecx, 4
add     ecx, [ebp+var_28]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_1c]
xor     ecx, edx
mov     eax, [ebp+var_1c]
shr     eax, 5
add     eax, [ebp+var_2c]
xor     ecx, eax
mov     edx, [ebp+var_20]
sub     edx, ecx
mov     [ebp+var_20], edx
mov     eax, [ebp+var_20]
shl     eax, 4
add     eax, [ebp+var_30]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_20]
xor     eax, ecx
mov     edx, [ebp+var_20]
shr     edx, 5
add     edx, [ebp+var_34]
xor     eax, edx
mov     ecx, [ebp+var_1c]
sub     ecx, eax
mov     [ebp+var_1c], ecx
mov     edx, [ebp+var_24]
sub     edx, [ebp+var_38]
mov     [ebp+var_24], edx
mov     eax, [ebp+var_1c]
shl     eax, 4
add     eax, [ebp+var_28]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_1c]
xor     eax, ecx
mov     edx, [ebp+var_1c]
shr     edx, 5
add     edx, [ebp+var_2c]
xor     eax, edx
mov     ecx, [ebp+var_20]
sub     ecx, eax
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
shl     edx, 4
add     edx, [ebp+var_30]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_20]
xor     edx, eax
mov     ecx, [ebp+var_20]
shr     ecx, 5
add     ecx, [ebp+var_34]
xor     edx, ecx
mov     eax, [ebp+var_1c]
sub     eax, edx
mov     [ebp+var_1c], eax
mov     ecx, [ebp+var_24]
sub     ecx, [ebp+var_38]
mov     [ebp+var_24], ecx
mov     edx, [ebp+var_1c]
shl     edx, 4
add     edx, [ebp+var_28]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_1c]
xor     edx, eax
mov     ecx, [ebp+var_1c]
shr     ecx, 5
add     ecx, [ebp+var_2c]
xor     edx, ecx
mov     eax, [ebp+var_20]
sub     eax, edx
mov     [ebp+var_20], eax
mov     ecx, [ebp+var_20]
shl     ecx, 4
add     ecx, [ebp+var_30]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_20]
xor     ecx, edx
mov     eax, [ebp+var_20]
shr     eax, 5
add     eax, [ebp+var_34]
xor     ecx, eax
mov     edx, [ebp+var_1c]
sub     edx, ecx
mov     [ebp+var_1c], edx
mov     eax, [ebp+var_24]
sub     eax, [ebp+var_38]
mov     [ebp+var_24], eax
mov     ecx, [ebp+var_1c]
shl     ecx, 4
add     ecx, [ebp+var_28]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_1c]
xor     ecx, edx
mov     eax, [ebp+var_1c]
shr     eax, 5
add     eax, [ebp+var_2c]
xor     ecx, eax
mov     edx, [ebp+var_20]
sub     edx, ecx
mov     [ebp+var_20], edx
mov     eax, [ebp+var_20]
shl     eax, 4
add     eax, [ebp+var_30]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_20]
xor     eax, ecx
mov     edx, [ebp+var_20]
shr     edx, 5
add     edx, [ebp+var_34]
xor     eax, edx
mov     ecx, [ebp+var_1c]
sub     ecx, eax
mov     [ebp+var_1c], ecx
mov     edx, [ebp+var_24]
sub     edx, [ebp+var_38]
mov     [ebp+var_24], edx
mov     eax, [ebp+var_1c]
shl     eax, 4
add     eax, [ebp+var_28]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_1c]
xor     eax, ecx
mov     edx, [ebp+var_1c]
shr     edx, 5
add     edx, [ebp+var_2c]
xor     eax, edx
mov     ecx, [ebp+var_20]
sub     ecx, eax
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
shl     edx, 4
add     edx, [ebp+var_30]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_20]
xor     edx, eax
mov     ecx, [ebp+var_20]
shr     ecx, 5
add     ecx, [ebp+var_34]
xor     edx, ecx
mov     eax, [ebp+var_1c]
sub     eax, edx
mov     [ebp+var_1c], eax
mov     ecx, [ebp+var_24]
sub     ecx, [ebp+var_38]
mov     [ebp+var_24], ecx
mov     edx, [ebp+var_1c]
shl     edx, 4
add     edx, [ebp+var_28]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_1c]
xor     edx, eax
mov     ecx, [ebp+var_1c]
shr     ecx, 5
add     ecx, [ebp+var_2c]
xor     edx, ecx
mov     eax, [ebp+var_20]
sub     eax, edx
mov     [ebp+var_20], eax
mov     ecx, [ebp+var_20]
shl     ecx, 4
add     ecx, [ebp+var_30]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_20]
xor     ecx, edx
mov     eax, [ebp+var_20]
shr     eax, 5
add     eax, [ebp+var_34]
xor     ecx, eax
mov     edx, [ebp+var_1c]
sub     edx, ecx
mov     [ebp+var_1c], edx
mov     eax, [ebp+var_24]
sub     eax, [ebp+var_38]
mov     [ebp+var_24], eax
mov     ecx, [ebp+var_1c]
shl     ecx, 4
add     ecx, [ebp+var_28]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_1c]
xor     ecx, edx
mov     eax, [ebp+var_1c]
shr     eax, 5
add     eax, [ebp+var_2c]
xor     ecx, eax
mov     edx, [ebp+var_20]
sub     edx, ecx
mov     [ebp+var_20], edx
mov     eax, [ebp+var_20]
shl     eax, 4
add     eax, [ebp+var_30]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_20]
xor     eax, ecx
mov     edx, [ebp+var_20]
shr     edx, 5
add     edx, [ebp+var_34]
xor     eax, edx
mov     ecx, [ebp+var_1c]
sub     ecx, eax
mov     [ebp+var_1c], ecx
mov     edx, [ebp+var_24]
sub     edx, [ebp+var_38]
mov     [ebp+var_24], edx
mov     eax, [ebp+var_1c]
shl     eax, 4
add     eax, [ebp+var_28]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_1c]
xor     eax, ecx
mov     edx, [ebp+var_1c]
shr     edx, 5
add     edx, [ebp+var_2c]
xor     eax, edx
mov     ecx, [ebp+var_20]
sub     ecx, eax
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
shl     edx, 4
add     edx, [ebp+var_30]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_20]
xor     edx, eax
mov     ecx, [ebp+var_20]
shr     ecx, 5
add     ecx, [ebp+var_34]
xor     edx, ecx
mov     eax, [ebp+var_1c]
sub     eax, edx
mov     [ebp+var_1c], eax
mov     ecx, [ebp+var_24]
sub     ecx, [ebp+var_38]
mov     [ebp+var_24], ecx
mov     edx, [ebp+var_1c]
shl     edx, 4
add     edx, [ebp+var_28]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_1c]
xor     edx, eax
mov     ecx, [ebp+var_1c]
shr     ecx, 5
add     ecx, [ebp+var_2c]
xor     edx, ecx
mov     eax, [ebp+var_20]
sub     eax, edx
mov     [ebp+var_20], eax
mov     ecx, [ebp+var_20]
shl     ecx, 4
add     ecx, [ebp+var_30]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_20]
xor     ecx, edx
mov     eax, [ebp+var_20]
shr     eax, 5
add     eax, [ebp+var_34]
xor     ecx, eax
mov     edx, [ebp+var_1c]
sub     edx, ecx
mov     [ebp+var_1c], edx
mov     eax, [ebp+var_24]
sub     eax, [ebp+var_38]
mov     [ebp+var_24], eax
mov     ecx, [ebp+var_1c]
shl     ecx, 4
add     ecx, [ebp+var_28]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_1c]
xor     ecx, edx
mov     eax, [ebp+var_1c]
shr     eax, 5
add     eax, [ebp+var_2c]
xor     ecx, eax
mov     edx, [ebp+var_20]
sub     edx, ecx
mov     [ebp+var_20], edx
mov     eax, [ebp+var_20]
shl     eax, 4
add     eax, [ebp+var_30]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_20]
xor     eax, ecx
mov     edx, [ebp+var_20]
shr     edx, 5
add     edx, [ebp+var_34]
xor     eax, edx
mov     ecx, [ebp+var_1c]
sub     ecx, eax
mov     [ebp+var_1c], ecx
mov     edx, [ebp+var_24]
sub     edx, [ebp+var_38]
mov     [ebp+var_24], edx
mov     eax, [ebp+var_1c]
shl     eax, 4
add     eax, [ebp+var_28]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_1c]
xor     eax, ecx
mov     edx, [ebp+var_1c]
shr     edx, 5
add     edx, [ebp+var_2c]
xor     eax, edx
mov     ecx, [ebp+var_20]
sub     ecx, eax
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
shl     edx, 4
add     edx, [ebp+var_30]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_20]
xor     edx, eax
mov     ecx, [ebp+var_20]
shr     ecx, 5
add     ecx, [ebp+var_34]
xor     edx, ecx
mov     eax, [ebp+var_1c]
sub     eax, edx
mov     [ebp+var_1c], eax
mov     ecx, [ebp+var_24]
sub     ecx, [ebp+var_38]
mov     [ebp+var_24], ecx
mov     edx, [ebp+var_1c]
shl     edx, 4
add     edx, [ebp+var_28]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_1c]
xor     edx, eax
mov     ecx, [ebp+var_1c]
shr     ecx, 5
add     ecx, [ebp+var_2c]
xor     edx, ecx
mov     eax, [ebp+var_20]
sub     eax, edx
mov     [ebp+var_20], eax
mov     ecx, [ebp+var_20]
shl     ecx, 4
add     ecx, [ebp+var_30]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_20]
xor     ecx, edx
mov     eax, [ebp+var_20]
shr     eax, 5
add     eax, [ebp+var_34]
xor     ecx, eax
mov     edx, [ebp+var_1c]
sub     edx, ecx
mov     [ebp+var_1c], edx
mov     eax, [ebp+var_24]
sub     eax, [ebp+var_38]
mov     [ebp+var_24], eax
mov     ecx, [ebp+var_1c]
shl     ecx, 4
add     ecx, [ebp+var_28]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_1c]
xor     ecx, edx
mov     eax, [ebp+var_1c]
shr     eax, 5
add     eax, [ebp+var_2c]
xor     ecx, eax
mov     edx, [ebp+var_20]
sub     edx, ecx
mov     [ebp+var_20], edx
mov     eax, [ebp+var_20]
shl     eax, 4
add     eax, [ebp+var_30]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_20]
xor     eax, ecx
mov     edx, [ebp+var_20]
shr     edx, 5
add     edx, [ebp+var_34]
xor     eax, edx
mov     ecx, [ebp+var_1c]
sub     ecx, eax
mov     [ebp+var_1c], ecx
mov     edx, [ebp+var_24]
sub     edx, [ebp+var_38]
mov     [ebp+var_24], edx
mov     eax, [ebp+var_1c]
shl     eax, 4
add     eax, [ebp+var_28]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_1c]
xor     eax, ecx
mov     edx, [ebp+var_1c]
shr     edx, 5
add     edx, [ebp+var_2c]
xor     eax, edx
mov     ecx, [ebp+var_20]
sub     ecx, eax
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
shl     edx, 4
add     edx, [ebp+var_30]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_20]
xor     edx, eax
mov     ecx, [ebp+var_20]
shr     ecx, 5
add     ecx, [ebp+var_34]
xor     edx, ecx
mov     eax, [ebp+var_1c]
sub     eax, edx
mov     [ebp+var_1c], eax
mov     ecx, [ebp+var_24]
sub     ecx, [ebp+var_38]
mov     [ebp+var_24], ecx
mov     edx, [ebp+var_1c]
shl     edx, 4
add     edx, [ebp+var_28]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_1c]
xor     edx, eax
mov     ecx, [ebp+var_1c]
shr     ecx, 5
add     ecx, [ebp+var_2c]
xor     edx, ecx
mov     eax, [ebp+var_20]
sub     eax, edx
mov     [ebp+var_20], eax
mov     ecx, [ebp+var_20]
shl     ecx, 4
add     ecx, [ebp+var_30]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_20]
xor     ecx, edx
mov     eax, [ebp+var_20]
shr     eax, 5
add     eax, [ebp+var_34]
xor     ecx, eax
mov     edx, [ebp+var_1c]
sub     edx, ecx
mov     [ebp+var_1c], edx
mov     eax, [ebp+var_24]
sub     eax, [ebp+var_38]
mov     [ebp+var_24], eax
mov     ecx, [ebp+var_1c]
shl     ecx, 4
add     ecx, [ebp+var_28]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_1c]
xor     ecx, edx
mov     eax, [ebp+var_1c]
shr     eax, 5
add     eax, [ebp+var_2c]
xor     ecx, eax
mov     edx, [ebp+var_20]
sub     edx, ecx
mov     [ebp+var_20], edx
mov     eax, [ebp+var_20]
shl     eax, 4
add     eax, [ebp+var_30]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_20]
xor     eax, ecx
mov     edx, [ebp+var_20]
shr     edx, 5
add     edx, [ebp+var_34]
xor     eax, edx
mov     ecx, [ebp+var_1c]
sub     ecx, eax
mov     [ebp+var_1c], ecx
mov     edx, [ebp+var_24]
sub     edx, [ebp+var_38]
mov     [ebp+var_24], edx
mov     eax, [ebp+var_1c]
shl     eax, 4
add     eax, [ebp+var_28]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_1c]
xor     eax, ecx
mov     edx, [ebp+var_1c]
shr     edx, 5
add     edx, [ebp+var_2c]
xor     eax, edx
mov     ecx, [ebp+var_20]
sub     ecx, eax
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
shl     edx, 4
add     edx, [ebp+var_30]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_20]
xor     edx, eax
mov     ecx, [ebp+var_20]
shr     ecx, 5
add     ecx, [ebp+var_34]
xor     edx, ecx
mov     eax, [ebp+var_1c]
sub     eax, edx
mov     [ebp+var_1c], eax
mov     ecx, [ebp+var_24]
sub     ecx, [ebp+var_38]
mov     [ebp+var_24], ecx
mov     edx, [ebp+var_1c]
shl     edx, 4
add     edx, [ebp+var_28]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_1c]
xor     edx, eax
mov     ecx, [ebp+var_1c]
shr     ecx, 5
add     ecx, [ebp+var_2c]
xor     edx, ecx
mov     eax, [ebp+var_20]
sub     eax, edx
mov     [ebp+var_20], eax
mov     ecx, [ebp+var_20]
shl     ecx, 4
add     ecx, [ebp+var_30]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_20]
xor     ecx, edx
mov     eax, [ebp+var_20]
shr     eax, 5
add     eax, [ebp+var_34]
xor     ecx, eax
mov     edx, [ebp+var_1c]
sub     edx, ecx
mov     [ebp+var_1c], edx
mov     eax, [ebp+var_24]
sub     eax, [ebp+var_38]
mov     [ebp+var_24], eax
mov     ecx, [ebp+var_1c]
shl     ecx, 4
add     ecx, [ebp+var_28]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_1c]
xor     ecx, edx
mov     eax, [ebp+var_1c]
shr     eax, 5
add     eax, [ebp+var_2c]
xor     ecx, eax
mov     edx, [ebp+var_20]
sub     edx, ecx
mov     [ebp+var_20], edx
mov     eax, [ebp+var_20]
shl     eax, 4
add     eax, [ebp+var_30]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_20]
xor     eax, ecx
mov     edx, [ebp+var_20]
shr     edx, 5
add     edx, [ebp+var_34]
xor     eax, edx
mov     ecx, [ebp+var_1c]
sub     ecx, eax
mov     [ebp+var_1c], ecx
mov     edx, [ebp+var_24]
sub     edx, [ebp+var_38]
mov     [ebp+var_24], edx
mov     eax, [ebp+var_1c]
shl     eax, 4
add     eax, [ebp+var_28]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_1c]
xor     eax, ecx
mov     edx, [ebp+var_1c]
shr     edx, 5
add     edx, [ebp+var_2c]
xor     eax, edx
mov     ecx, [ebp+var_20]
sub     ecx, eax
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
shl     edx, 4
add     edx, [ebp+var_30]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_20]
xor     edx, eax
mov     ecx, [ebp+var_20]
shr     ecx, 5
add     ecx, [ebp+var_34]
xor     edx, ecx
mov     eax, [ebp+var_1c]
sub     eax, edx
mov     [ebp+var_1c], eax
mov     ecx, [ebp+var_24]
sub     ecx, [ebp+var_38]
mov     [ebp+var_24], ecx
mov     edx, [ebp+var_1c]
shl     edx, 4
add     edx, [ebp+var_28]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_1c]
xor     edx, eax
mov     ecx, [ebp+var_1c]
shr     ecx, 5
add     ecx, [ebp+var_2c]
xor     edx, ecx
mov     eax, [ebp+var_20]
sub     eax, edx
mov     [ebp+var_20], eax
mov     ecx, [ebp+var_20]
shl     ecx, 4
add     ecx, [ebp+var_30]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_20]
xor     ecx, edx
mov     eax, [ebp+var_20]
shr     eax, 5
add     eax, [ebp+var_34]
xor     ecx, eax
mov     edx, [ebp+var_1c]
sub     edx, ecx
mov     [ebp+var_1c], edx
mov     eax, [ebp+var_24]
sub     eax, [ebp+var_38]
mov     [ebp+var_24], eax
mov     ecx, [ebp+var_1c]
shl     ecx, 4
add     ecx, [ebp+var_28]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_1c]
xor     ecx, edx
mov     eax, [ebp+var_1c]
shr     eax, 5
add     eax, [ebp+var_2c]
xor     ecx, eax
mov     edx, [ebp+var_20]
sub     edx, ecx
mov     [ebp+var_20], edx
mov     eax, [ebp+var_20]
shl     eax, 4
add     eax, [ebp+var_30]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_20]
xor     eax, ecx
mov     edx, [ebp+var_20]
shr     edx, 5
add     edx, [ebp+var_34]
xor     eax, edx
mov     ecx, [ebp+var_1c]
sub     ecx, eax
mov     [ebp+var_1c], ecx
mov     edx, [ebp+var_24]
sub     edx, [ebp+var_38]
mov     [ebp+var_24], edx
mov     eax, [ebp+var_1c]
shl     eax, 4
add     eax, [ebp+var_28]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_1c]
xor     eax, ecx
mov     edx, [ebp+var_1c]
shr     edx, 5
add     edx, [ebp+var_2c]
xor     eax, edx
mov     ecx, [ebp+var_20]
sub     ecx, eax
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
shl     edx, 4
add     edx, [ebp+var_30]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_20]
xor     edx, eax
mov     ecx, [ebp+var_20]
shr     ecx, 5
add     ecx, [ebp+var_34]
xor     edx, ecx
mov     eax, [ebp+var_1c]
sub     eax, edx
mov     [ebp+var_1c], eax
mov     ecx, [ebp+var_24]
sub     ecx, [ebp+var_38]
mov     [ebp+var_24], ecx
mov     edx, [ebp+var_1c]
shl     edx, 4
add     edx, [ebp+var_28]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_1c]
xor     edx, eax
mov     ecx, [ebp+var_1c]
shr     ecx, 5
add     ecx, [ebp+var_2c]
xor     edx, ecx
mov     eax, [ebp+var_20]
sub     eax, edx
mov     [ebp+var_20], eax
mov     ecx, [ebp+var_20]
shl     ecx, 4
add     ecx, [ebp+var_30]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_20]
xor     ecx, edx
mov     eax, [ebp+var_20]
shr     eax, 5
add     eax, [ebp+var_34]
xor     ecx, eax
mov     edx, [ebp+var_1c]
sub     edx, ecx
mov     [ebp+var_1c], edx
mov     eax, [ebp+var_24]
sub     eax, [ebp+var_38]
mov     [ebp+var_24], eax
mov     ecx, [ebp+var_1c]
shl     ecx, 4
add     ecx, [ebp+var_28]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_1c]
xor     ecx, edx
mov     eax, [ebp+var_1c]
shr     eax, 5
add     eax, [ebp+var_2c]
xor     ecx, eax
mov     edx, [ebp+var_20]
sub     edx, ecx
mov     [ebp+var_20], edx
mov     eax, [ebp+var_20]
shl     eax, 4
add     eax, [ebp+var_30]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_20]
xor     eax, ecx
mov     edx, [ebp+var_20]
shr     edx, 5
add     edx, [ebp+var_34]
xor     eax, edx
mov     ecx, [ebp+var_1c]
sub     ecx, eax
mov     [ebp+var_1c], ecx
mov     edx, [ebp+var_24]
sub     edx, [ebp+var_38]
mov     [ebp+var_24], edx
mov     eax, [ebp+var_1c]
shl     eax, 4
add     eax, [ebp+var_28]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_1c]
xor     eax, ecx
mov     edx, [ebp+var_1c]
shr     edx, 5
add     edx, [ebp+var_2c]
xor     eax, edx
mov     ecx, [ebp+var_20]
sub     ecx, eax
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
shl     edx, 4
add     edx, [ebp+var_30]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_20]
xor     edx, eax
mov     ecx, [ebp+var_20]
shr     ecx, 5
add     ecx, [ebp+var_34]
xor     edx, ecx
mov     eax, [ebp+var_1c]
sub     eax, edx
mov     [ebp+var_1c], eax
mov     ecx, [ebp+var_24]
sub     ecx, [ebp+var_38]
mov     [ebp+var_24], ecx
mov     edx, [ebp+var_1c]
shl     edx, 4
add     edx, [ebp+var_28]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_1c]
xor     edx, eax
mov     ecx, [ebp+var_1c]
shr     ecx, 5
add     ecx, [ebp+var_2c]
xor     edx, ecx
mov     eax, [ebp+var_20]
sub     eax, edx
mov     [ebp+var_20], eax
mov     ecx, [ebp+var_20]
shl     ecx, 4
add     ecx, [ebp+var_30]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_20]
xor     ecx, edx
mov     eax, [ebp+var_20]
shr     eax, 5
add     eax, [ebp+var_34]
xor     ecx, eax
mov     edx, [ebp+var_1c]
sub     edx, ecx
mov     [ebp+var_1c], edx
mov     eax, [ebp+var_24]
sub     eax, [ebp+var_38]
mov     [ebp+var_24], eax
mov     ecx, [ebp+var_1c]
shl     ecx, 4
add     ecx, [ebp+var_28]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_1c]
xor     ecx, edx
mov     eax, [ebp+var_1c]
shr     eax, 5
add     eax, [ebp+var_2c]
xor     ecx, eax
mov     edx, [ebp+var_20]
sub     edx, ecx
mov     [ebp+var_20], edx
mov     eax, [ebp+var_20]
shl     eax, 4
add     eax, [ebp+var_30]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_20]
xor     eax, ecx
mov     edx, [ebp+var_20]
shr     edx, 5
add     edx, [ebp+var_34]
xor     eax, edx
mov     ecx, [ebp+var_1c]
sub     ecx, eax
mov     [ebp+var_1c], ecx
mov     edx, [ebp+var_24]
sub     edx, [ebp+var_38]
mov     [ebp+var_24], edx
mov     eax, [ebp+var_1c]
shl     eax, 4
add     eax, [ebp+var_28]
mov     ecx, [ebp+var_24]
add     ecx, [ebp+var_1c]
xor     eax, ecx
mov     edx, [ebp+var_1c]
shr     edx, 5
add     edx, [ebp+var_2c]
xor     eax, edx
mov     ecx, [ebp+var_20]
sub     ecx, eax
mov     [ebp+var_20], ecx
mov     edx, [ebp+var_20]
shl     edx, 4
add     edx, [ebp+var_30]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_20]
xor     edx, eax
mov     ecx, [ebp+var_20]
shr     ecx, 5
add     ecx, [ebp+var_34]
xor     edx, ecx
mov     eax, [ebp+var_1c]
sub     eax, edx
mov     [ebp+var_1c], eax
mov     ecx, [ebp+var_24]
sub     ecx, [ebp+var_38]
mov     [ebp+var_24], ecx
mov     edx, [ebp+var_1c]
shl     edx, 4
add     edx, [ebp+var_28]
mov     eax, [ebp+var_24]
add     eax, [ebp+var_1c]
xor     edx, eax
mov     ecx, [ebp+var_1c]
shr     ecx, 5
add     ecx, [ebp+var_2c]
xor     edx, ecx
mov     eax, [ebp+var_20]
sub     eax, edx
mov     [ebp+var_20], eax
mov     ecx, [ebp+var_20]
shl     ecx, 4
add     ecx, [ebp+var_30]
mov     edx, [ebp+var_24]
add     edx, [ebp+var_20]
xor     ecx, edx
mov     eax, [ebp+var_20]
shr     eax, 5
add     eax, [ebp+var_34]
xor     ecx, eax
mov     edx, [ebp+var_1c]
sub     edx, ecx
mov     [ebp+var_1c], edx
mov     eax, [ebp+var_24]
sub     eax, [ebp+var_38]
mov     [ebp+var_24], eax
mov     ecx, 4
imul    edx, ecx, 0
mov     eax, [ebp+var_3c]
mov     ecx, [ebp+var_1c]
mov     [eax+edx], ecx
mov     edx, 4
shl     edx, 0
mov     eax, [ebp+var_3c]
mov     ecx, [ebp+var_20]
mov     [eax+edx], ecx
jmp     loc_401089
mov     ecx, [ebp+var_4]
xor     ecx, ebp
call    @__security_check_cookie@4
mov     esp, ebp
pop     ebp
retn    8
push    ebp
mov     ebp, esp
sub     esp, 10h
push    0
call    ds:getconsolewindow
push    eax
call    ds:showwindow
test    eax, eax
jz      short loc_401b53
mov     lpaddress, 116100h
push    0
call    ds:getmodulehandlew
mov     ecx, lpaddress
add     ecx, eax
mov     lpaddress, ecx
mov     [ebp+var_4], 0
mov     edx, lpaddress
mov     [ebp+var_4], edx
mov     eax, 4
imul    ecx, eax, 12h
mov     edx, ds:dword_516000[ecx]
mov     [ebp+var_8], edx
lea     eax, [ebp+floldprotect]
push    eax
push    40h
push    0c00h
mov     ecx, lpaddress
push    ecx
call    ds:virtualprotect
test    eax, eax
jz      short loc_401bbc
push    180h
mov     edx, lpaddress
push    edx
call    sub_401000
call    [ebp+var_4]
jmp     short loc_401b8a
mov     eax, 4
imul    ecx, eax, 3e7h
mov     edx, dword_4167d4[ecx]
mov     [ebp+var_10], edx
xor     eax, eax
mov     esp, ebp
pop     ebp
retn
call    ___scrt_initialize_default_local_stdio_options
xor     eax, eax
retn
call    sub_40246c
call    usermatherrorfunction
push    eax
call    __set_new_mode
pop     ecx
retn
xor     eax, eax
retn
xor     eax, eax
inc     eax
retn
push    offset listhead
call    ds:initializeslisthead
retn
mov     al, 1
retn
retn
mov     eax, offset dword_5149a0
retn
mov     eax, offset dword_5149a8
retn
xor     eax, eax
cmp     dword_41600c, eax
setz    al
retn
mov     eax, offset dword_515080
retn
mov     eax, offset dword_51507c
retn
push    offset ___scrt_unhandled_exception_filter@4
call    ds:setunhandledexceptionfilter
retn
and     dword_5149b0, 0
retn
push    ebx
push    esi
mov     esi, offset dword_415004
mov     ebx, offset dword_415004
cmp     esi, ebx
jnb     short loc_4024ea
push    edi
mov     edi, [esi]
test    edi, edi
jz      short loc_4024e2
mov     ecx, edi
call    ds:___guard_check_icall_fptr
call    edi
add     esi, 4
cmp     esi, ebx
jb      short loc_4024d2
pop     edi
pop     esi
pop     ebx
retn
push    ebx
push    esi
mov     esi, offset dword_41500c
mov     ebx, offset dword_41500c
cmp     esi, ebx
jnb     short loc_402516
push    edi
mov     edi, [esi]
test    edi, edi
jz      short loc_40250e
mov     ecx, edi
call    ds:___guard_check_icall_fptr
call    edi
add     esi, 4
cmp     esi, ebx
jb      short loc_4024fe
pop     edi
pop     esi
pop     ebx
retn
mov     ecx, [ebp-10h]
mov     large fs:0, ecx
pop     ecx
pop     edi
pop     edi
pop     esi
pop     ebx
mov     esp, ebp
pop     ebp
push    ecx
bnd retn
mov     edi, edi
push    ebp
push    dword ptr [esp+8]
call    ___except_validate_jump_buffer
add     esp, 4
mov     ecx, [esp+8]
mov     ebp, [ecx]
push    dword ptr [ecx+1ch]
push    dword ptr [ecx+18h]
push    dword ptr [ecx+28h]
call    __local_unwind4
add     esp, 0ch
pop     ebp
retn    4
mov     edi, edi
pop     ebx
leave
retn    8
push    ebp
mov     ebp, esp
push    esi
push    [ebp+arg_0]
mov     esi, ecx
call    ??0exception@std@@qae@abv01@@z
mov     dword ptr [esi], offset ??_7bad_exception@std@@6b@
mov     eax, esi
pop     esi
pop     ebp
retn    4
and     dword ptr [ecx+4], 0
mov     eax, ecx
and     dword ptr [ecx+8], 0
mov     dword ptr [ecx+4], offset abadexception
mov     dword ptr [ecx], offset ??_7bad_exception@std@@6b@
retn
mov     eax, dword_514a64
retn
mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_514a64, eax
pop     ebp
retn
mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_514a68, eax
pop     ebp
retn
mov     eax, dword_514b78
test    eax, eax
jnz     short locret_405609
cmp     dword_514b7c, eax
jnz     short loc_4055f2
xor     eax, eax
retn
call    ??$common_initialize_environment_nolock@d@@yahxz
test    eax, eax
jz      short loc_405604
call    ??$initialize_environment_by_cloning_nolock@d@@yahxz
test    eax, eax
jnz     short loc_4055ef
mov     eax, dword_514b78
retn
mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     eax, [eax]
cmp     eax, dword_514b84
jz      short loc_40583f
push    eax
call    unknown_libname_5
pop     ecx
pop     ebp
retn
mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     eax, [eax]
cmp     eax, dword_514b80
jz      short loc_40585a
push    eax
call    unknown_libname_5
pop     ecx
pop     ebp
retn
jmp     sub_4055de
mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_514b8c, eax
pop     ebp
retn
mov     eax, offset dword_514b94
retn
mov     eax, offset dword_514b98
retn
xor     eax, eax
mov     ecx, offset dword_514bac
inc     eax
xchg    eax, [ecx]
retn
mov     eax, dword_514bb0
retn
mov     eax, offset dword_514bb4
retn
mov     edi, edi
push    ebp
mov     ebp, esp
push    [ebp+function]
push    offset stru_514bb8
call    __register_onexit_function
pop     ecx
pop     ecx
pop     ebp
retn
mov     dword_514f44, offset off_416580
mov     al, 1
retn
call    ___dcrt_uninitialize_environments_nolock
mov     al, 1
retn
push    0
call    ___vcrt_uninitialize
pop     ecx
retn
push    esi
push    dword_515048
call    __free_base
push    dword_51504c
xor     esi, esi
mov     dword_515048, esi
call    __free_base
push    dword_514b98
mov     dword_51504c, esi
call    __free_base
push    dword_514b9c
mov     dword_514b98, esi
call    __free_base
add     esp, 10h
mov     dword_514b9c, esi
mov     al, 1
pop     esi
retn
mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_514bd0, eax
pop     ebp
retn
push    offset dword_514bd4
call    ___acrt_getptd
push    eax
call    ?update_thread_multibyte_data_internal@@yapau__crt_multibyte_data@@qau__acrt_ptd@@qapau1@@z
pop     ecx
pop     ecx
retn
mov     eax, dword_514b78
cmp     eax, dword_514b84
jnz     short locret_408154
push    eax
call    ??$copy_environment@d@@yapapadqapad@z
pop     ecx
mov     dword_514b78, eax
retn
push    esi
push    edi
mov     edi, offset dword_514be8
xor     esi, esi
push    0
push    0fa0h
push    edi
call    ___acrt_initializecriticalsectionex@12
test    eax, eax
jz      short loc_4081e9
inc     dword_514d38
add     esi, 18h
add     edi, 18h
cmp     esi, 150h
jb      short loc_4081c0
mov     al, 1
jmp     short loc_4081f3
push    0
call    ___acrt_uninitialize_locks
pop     ecx
xor     al, al
pop     edi
pop     esi
retn
push    esi
xor     esi, esi
mov     eax, dword_514d40[esi]
test    eax, eax
jz      short loc_4086eb
push    eax
call    ___acrt_lowio_destroy_handle_array
and     dword_514d40[esi], 0
pop     ecx
add     esi, 4
cmp     esi, 200h
jb      short loc_4086d3
mov     al, 1
pop     esi
retn
push    offset alcmapstringex
push    offset dword_411df0
push    offset alcmapstringex
push    14h
call    ?try_get_function@@yapaxw4function_id@?a0x391cf84c@@qbdqbw4module_id@2@2@z
add     esp, 10h
retn
push    offset alocalenametolc
push    offset dword_411e08
push    offset alocalenametolc
push    16h
call    ?try_get_function@@yapaxw4function_id@?a0x391cf84c@@qbdqbw4module_id@2@2@z
add     esp, 10h
retn
mov     edi, edi
push    ebp
mov     ebp, esp
push    ecx
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
push    esi
call    sub_408ec1
mov     esi, eax
test    esi, esi
jz      short loc_40930a
push    [ebp+arg_20]
mov     ecx, esi
push    [ebp+arg_1c]
push    [ebp+arg_18]
push    [ebp+cchdest]
push    [ebp+lpdeststr]
push    [ebp+cchsrc]
push    [ebp+lpsrcstr]
push    [ebp+dwmapflags]
push    [ebp+arg_0]
call    ds:___guard_check_icall_fptr
call    esi
jmp     short loc_40932a
push    [ebp+cchdest]
push    [ebp+lpdeststr]
push    [ebp+cchsrc]
push    [ebp+lpsrcstr]
push    [ebp+dwmapflags]
push    0
push    [ebp+arg_0]
call    ___acrt_localenametolcid@8
push    eax
call    ds:lcmapstringw
mov     ecx, [ebp+var_4]
xor     ecx, ebp
pop     esi
call    @__security_check_cookie@4
mov     esp, ebp
pop     ebp
retn    24h
mov     edi, edi
push    ebp
mov     ebp, esp
pop     ebp
jmp     $+5
mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
mov     esi, [ebp+arg_4]
test    esi, esi
jz      short loc_409428
push    0ffffffe0h
xor     edx, edx
pop     eax
div     esi
cmp     eax, [ebp+arg_8]
jnb     short loc_409428
call    __errno
mov     dword ptr [eax], 0ch
xor     eax, eax
jmp     short loc_40946a
push    ebx
mov     ebx, [ebp+block]
push    edi
test    ebx, ebx
jz      short loc_40943c
push    ebx
call    sub_40b5b9
pop     ecx
mov     edi, eax
jmp     short loc_40943e
xor     edi, edi
imul    esi, [ebp+arg_8]
push    esi
push    ebx
call    __realloc_base
mov     ebx, eax
pop     ecx
pop     ecx
test    ebx, ebx
jz      short loc_409466
cmp     edi, esi
jnb     short loc_409466
sub     esi, edi
lea     eax, [ebx+edi]
push    esi
push    0
push    eax
call    _memset
add     esp, 0ch
pop     edi
mov     eax, ebx
pop     ebx
pop     esi
pop     ebp
retn
and     hheap, 0
mov     al, 1
retn
mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     dword_51502c, eax
pop     ebp
retn
push    1
call    ?common_flush_all@@yah_n@z
pop     ecx
retn
mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
mov     esi, [ebp+arg_4]
mov     eax, [esi]
cmp     eax, dword_514f44
jz      short loc_40a410
mov     ecx, [ebp+arg_0]
mov     eax, dword_4166a0
test    [ecx+350h], eax
jnz     short loc_40a410
call    ___acrt_update_thread_locale_data
mov     [esi], eax
pop     esi
pop     ebp
retn
mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
mov     esi, [ebp+arg_4]
mov     eax, [esi]
cmp     eax, dword_514bd4
jz      short loc_40a43d
mov     ecx, [ebp+arg_0]
mov     eax, dword_4166a0
test    [ecx+350h], eax
jnz     short loc_40a43d
call    sub_407963
mov     [esi], eax
pop     esi
pop     ebp
retn
mov     edi, edi
push    ebp
mov     ebp, esp
push    ecx
mov     eax, ___security_cookie
xor     eax, ebp
mov     [ebp+var_4], eax
cmp     [ebp+arg_0], 0
push    esi
jnz     short loc_40aaf0
mov     esi, [ebp+arg_4]
mov     ecx, esi
call    unknown_libname_10
xor     eax, eax
mov     [esi+8], eax
mov     [esi+0ch], eax
mov     [esi+10h], eax
xor     eax, eax
jmp     short loc_40ab52
push    [ebp+arg_c]
mov     ecx, [ebp+arg_8]
xor     eax, eax
push    eax
push    [ebp+arg_0]
push    eax
call    ds:___guard_check_icall_fptr
call    [ebp+arg_8]
add     esp, 10h
cmp     eax, 0ffffffffh
jz      short loc_40ab4b
mov     esi, [ebp+arg_4]
inc     eax
cmp     eax, [esi+0ch]
jbe     short loc_40ab23
push    eax
mov     ecx, esi
call    sub_40ab98
test    eax, eax
jnz     short loc_40ab52
push    [ebp+arg_c]
mov     ecx, [ebp+arg_8]
push    dword ptr [esi+0ch]
push    [ebp+arg_0]
push    dword ptr [esi+8]
call    ds:___guard_check_icall_fptr
call    [ebp+arg_8]
add     esp, 10h
cmp     eax, 0ffffffffh
jz      short loc_40ab4b
cmp     eax, [esi+0ch]
jz      short loc_40ab4b
inc     eax
jmp     short loc_40aae9
call    __errno
mov     eax, [eax]
mov     ecx, [ebp+var_4]
xor     ecx, ebp
pop     esi
call    @__security_check_cookie@4
mov     esp, ebp
pop     ebp
retn
mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
push    edi
mov     esi, ecx
call    unknown_libname_10
mov     edi, [ebp+arg_0]
push    esi
lea     eax, [edi+edi]
push    eax
lea     eax, [esi+8]
push    eax
call    ?allocate@__crt_win32_buffer_internal_dynamic_resizing@@sahqapaxiabv__crt_win32_buffer_empty_debug_info@@@z
add     esp, 0ch
test    eax, eax
jz      short loc_40abc8
and     dword ptr [esi+0ch], 0
mov     byte ptr [esi+14h], 0
jmp     short loc_40abd1
mov     byte ptr [esi+14h], 1
xor     eax, eax
mov     [esi+0ch], edi
pop     edi
pop     esi
pop     ebp
retn    4
mov     edi, edi
push    ebp
mov     ebp, esp
pop     ebp
jmp     $+5
mov     edi, edi
push    ebp
mov     ebp, esp
cmp     [ebp+lpmem], 0
jnz     short loc_40b5e4
call    __errno
mov     dword ptr [eax], 16h
call    __invalid_parameter_noinfo
or      eax, 0ffffffffh
pop     ebp
retn
push    [ebp+lpmem]
push    0
push    hheap
call    ds:heapsize
pop     ebp
retn
cmp     dword_515088, 0
jz      short __cilog10_default
sub     esp, 8
stmxcsr dword ptr [esp+4]
mov     eax, [esp+4]
and     eax, 7f80h
cmp     eax, 1f80h
jnz     short jnedef
fnstcw  word ptr [esp]
mov     ax, [esp]
and     ax, 7fh
cmp     ax, 7fh
lea     esp, [esp+8]
jnz     short __cilog10_default
jmp     __cilog10_pentium4
lea     edx, [esp+4]
call    __fload_withfb
mov     ecx, hconsoleoutput
cmp     ecx, 0fffffffeh
jnz     short loc_40d226
call    ?__dcrt_lowio_initialize_console_output@@yaxxz
mov     ecx, hconsoleoutput
xor     eax, eax
cmp     ecx, 0ffffffffh
setnz   al
retn
mov     edi, edi
push    ebp
mov     ebp, esp
sub     esp, 10h
push    esi
mov     esi, [ebp+arg_0]
cmp     esi, 0fffffffeh
jnz     short loc_40d343
call    ___doserrno
and     dword ptr [eax], 0
call    __errno
mov     dword ptr [eax], 9
jmp     short loc_40d3a4
test    esi, esi
js      short loc_40d38c
cmp     esi, dword_514f40
jnb     short loc_40d38c
mov     eax, esi
mov     edx, esi
and     eax, 3fh
sar     edx, 6
imul    ecx, eax, 30h
mov     eax, dword_514d40[edx*4]
test    byte ptr [eax+ecx+28h], 1
jz      short loc_40d38c
lea     eax, [ebp+arg_0]
mov     [ebp+var_8], esi
mov     [ebp+var_c], eax
lea     ecx, [ebp+var_1]
lea     eax, [ebp+var_8]
mov     [ebp+var_10], esi
push    eax
lea     eax, [ebp+var_c]
push    eax
lea     eax, [ebp+var_10]
push    eax
call    ??$?rv_lambda_123407a5e2ac06da108355a851863b7a_@@aav_lambda_2fe9b910cf3cbf4a0ab98a02ba45b3ec_@@v_lambda_ae55bdf541ad94d75914d381c370e64d_@@@?$__crt_seh_guarded_call@h@@qaeh$$qav_lambda_123407a5e2ac06da108355a851863b7a_@@aav_lambda_2fe9b910cf3cbf4a0ab98a02ba45b3ec_@@$$qav_lambda_ae55bdf541ad94d75914d381c370e64d_@@@z
jmp     short loc_40d3a7
call    ___doserrno
and     dword ptr [eax], 0
call    __errno
mov     dword ptr [eax], 9
call    __invalid_parameter_noinfo
or      eax, 0ffffffffh
pop     esi
mov     esp, ebp
pop     ebp
retn
movlpd  xmm0, qword ptr [esp+4]
jmp     short ffytox
mov     byte ptr [ebp-90h], 0feh
or      ch, ch
jnz     short negytox
fxch    st(1)
fyl2x
jmp     short ff2x
call    _isinttos
or      eax, eax
jz      short negytoxerror
xor     ch, ch
cmp     eax, 2
jz      short evenexp
not     ch
fxch    st(1)
fabs
jmp     short ffxtoy
jmp     __rtonepop
jmp     __rtindfpop
fstp    st
fstp    st
fld     ds:tbyte_414050
mov     byte ptr [ebp-90h], 2
retn
fldln2
fxch    st(1)
ftst
fstsw   word ptr [ebp-0a0h]
wait
test    byte ptr [ebp-9fh], 41h
jnz     short negytoxerror
fyl2x
retn
mov     byte ptr [ebp-90h], 2
fstp    st
fld     ds:tbyte_41405a
retn
or      cl, cl
jnz     short tranindfnpop
retn
fldlg2
jmp     short ffyl2xm
fldln2
fxch    st(1)
or      cl, cl
jnz     short negytoxerror
fyl2x
retn
jmp     __rtonepop
call    _isinttos
fstp    st
fstp    st
or      cl, cl
jnz     short _rtfor0toneg
fldz
cmp     eax, 1
jnz     short zerotoxdone
or      ch, ch
jz      short zerotoxdone
fchs
mov     byte ptr [ebp-90h], 2
fld     ds:tbyte_414050
cmp     eax, 1
jnz     short zerotoxdone
or      ch, ch
jz      short zerotoxdone
fchs
jmp     short zerotoxdone
fstp    st
fstp    st
jmp     __rtindfnpop
fstp    st
fstp    st
fld     ds:tbyte_414050
mov     byte ptr [ebp-90h], 3
retn
push    esi
sub     esp, 74h
mov     esi, esp
push    esi
sub     esp, 8
fstp    qword ptr [esp]
sub     esp, 8
fstp    qword ptr [esp]
fsave   byte ptr [esi+8]
call    __powhlp
add     esp, 14h
frstor  byte ptr [esi+8]
fld     qword ptr [esi]
add     esp, 74h
pop     esi
test    eax, eax
jz      short noerror
jmp     __rttosnpopde
cmp     byte ptr [edx+0eh], 5
jnz     short cwdefault
mov     bx, [ebp-0a4h]
or      bh, 2
and     bh, 0feh
mov     bl, 3fh
jmp     short setcw
mov     bx, 133fh
mov     [ebp-0a2h], bx
fldcw   word ptr [ebp-0a2h]
mov     ebx, offset word_4140de
fxam
mov     [ebp-94h], edx
fstsw   word ptr [ebp-0a0h]
mov     byte ptr [ebp-90h], 0
fxch    st(1)
mov     cl, [ebp-9fh]
fxam
fstsw   word ptr [ebp-0a0h]
fxch    st(1)
mov     ch, [ebp-9fh]
shl     ch, 1
sar     ch, 1
rol     ch, 1
mov     al, ch
and     al, 0fh
xlat
mov     ah, al
shl     cl, 1
sar     cl, 1
rol     cl, 1
mov     al, cl
and     al, 0fh
xlat
shl     ah, 1
shl     ah, 1
or      al, ah
movsx   eax, al
and     ecx, 404h
mov     ebx, edx
add     ebx, eax
add     ebx, 10h
push    eax
push    edx
push    ecx
mov     ecx, [ebx]
call    ds:___guard_check_icall_fptr
pop     ecx
pop     edx
pop     eax
jmp     dword ptr [ebx]
call    __rttosnpopde
call    __rttosnpopde
jmp     short __rtnospop
fstp    st
fstp    st
fstp    st
fldz
test    ch, ch
jz      short dont_change_zerosign
fchs
fstp    st
nop
jmp     short __nosnan2
fxch    st(1)
lea     esp, [esp+0]
lea     esp, [esp+0]
fstp    tbyte ptr [ebp-9eh]
fld     tbyte ptr [ebp-9eh]
test    byte ptr [ebp-97h], 40h
jz      short _tossnan2
mov     byte ptr [ebp-90h], 0
jmp     short _tosnan2ret
mov     byte ptr [ebp-90h], 0
faddp   st(1), st
retn
fstp    tbyte ptr [ebp-9eh]
fld     tbyte ptr [ebp-9eh]
test    byte ptr [ebp-97h], 40h
jz      short _snan2
fxch    st(1)
fstp    tbyte ptr [ebp-9eh]
fld     tbyte ptr [ebp-9eh]
test    byte ptr [ebp-97h], 40h
jz      short _snan2
mov     byte ptr [ebp-90h], 0
jmp     short _nan2ret
mov     byte ptr [ebp-90h], 1
faddp   st(1), st
retn
fstp    st
fstp    st
fld     ds:tbyte_4140b0
cmp     byte ptr [ebp-90h], 0
jg      short retj
fstp    st
fstp    st
fld     ds:tbyte_4140c4
or      ch, ch
jz      short dont_change_sign
fchs
or      cl, cl
jz      short retinf
fld     ds:dbl_4140d6
fmulp   st(1), st
or      cl, cl
jz      short chsifnegret
fchs
mov     edx, [esp+4]
and     edx, 300h
or      edx, 7fh
mov     [esp+6], dx
fldcw   word ptr [esp+6]
retn
push    ebp
mov     ebp, esp
test    [ebp+arg_0], 1
push    esi
mov     esi, ecx
mov     dword ptr [esi], offset ??_7type_info@@6b@
jz      short loc_40efe1
push    0ch
push    esi
call    sub_40efe8
pop     ecx
pop     ecx
mov     eax, esi
pop     esi
pop     ebp
retn    4
push    ebp
mov     ebp, esp
push    [ebp+block]
call    j__free
pop     ecx
pop     ebp
retn
push    edi
push    esi
push    ebp
xor     edi, edi
xor     ebp, ebp
mov     eax, [esp+14h]
or      eax, eax
jge     short loc_40f0f4
inc     edi
inc     ebp
mov     edx, [esp+10h]
neg     eax
neg     edx
sbb     eax, 0
mov     [esp+14h], eax
mov     [esp+10h], edx
mov     eax, [esp+1ch]
or      eax, eax
jge     short loc_40f110
inc     edi
mov     edx, [esp+18h]
neg     eax
neg     edx
sbb     eax, 0
mov     [esp+1ch], eax
mov     [esp+18h], edx
or      eax, eax
jnz     short loc_40f13c
mov     ecx, [esp+18h]
mov     eax, [esp+14h]
xor     edx, edx
div     ecx
mov     ebx, eax
mov     eax, [esp+10h]
div     ecx
mov     esi, eax
mov     eax, ebx
mul     dword ptr [esp+18h]
mov     ecx, eax
mov     eax, esi
mul     dword ptr [esp+18h]
add     edx, ecx
jmp     short loc_40f183
mov     ebx, eax
mov     ecx, [esp+18h]
mov     edx, [esp+14h]
mov     eax, [esp+10h]
shr     ebx, 1
rcr     ecx, 1
shr     edx, 1
rcr     eax, 1
or      ebx, ebx
jnz     short loc_40f14a
div     ecx
mov     esi, eax
mul     dword ptr [esp+1ch]
mov     ecx, eax
mov     eax, [esp+18h]
mul     esi
add     edx, ecx
jb      short loc_40f178
cmp     edx, [esp+14h]
ja      short loc_40f178
jb      short loc_40f181
cmp     eax, [esp+10h]
jbe     short loc_40f181
dec     esi
sub     eax, [esp+18h]
sbb     edx, [esp+1ch]
xor     ebx, ebx
sub     eax, [esp+10h]
sbb     edx, [esp+14h]
dec     ebp
jns     short loc_40f195
neg     edx
neg     eax
sbb     edx, 0
mov     ecx, edx
mov     edx, ebx
mov     ebx, ecx
mov     ecx, eax
mov     eax, esi
dec     edi
jnz     short loc_40f1a9
neg     edx
neg     eax
sbb     edx, 0
pop     ebp
pop     esi
pop     edi
retn    10h
cmp     cl, 40h
jnb     short retzero
cmp     cl, 20h
jnb     short more32
shrd    eax, edx, cl
shr     edx, cl
retn
mov     eax, edx
xor     edx, edx
and     cl, 1fh
shr     eax, cl
retn
xor     eax, eax
xor     edx, edx
retn
cmp     cl, 40h
jnb     short retzero_0
cmp     cl, 20h
jnb     short more32_0
shld    edx, eax, cl
shl     eax, cl
retn
mov     edx, eax
xor     eax, eax
and     cl, 1fh
shl     edx, cl
retn
xor     eax, eax
xor     edx, edx
retn
cmp     dword_5149b4, 0
jz      short __ftol2
cmp     dword_5149b4, 0
jz      short __ftol2
sub     esp, 4
fnstcw  word ptr [esp]
pop     eax
and     ax, 7fh
cmp     ax, 7fh
jz      short __ftol2_pentium4
lea     esp, [esp+0]
lea     ecx, [ecx+0]
offset __catch$?callunexpected@@yaxpbu_s_estypelist@@@z$0>
offset __cta2?avbad_exception@std@@>