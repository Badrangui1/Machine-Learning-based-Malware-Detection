push    ebp
mov     ebp, esp
push    esi
push    ecx
push    edx
mov     esi, [ebp+arg_4]
xor     edx, edx
or      eax, 0ffffffffh
mov     ecx, [ebp+arg_0]
lea     esp, [esp+0]
lea     esp, [esp+0]
nop
mov     dl, [esi]
xor     dl, al
shr     eax, 8
xor     eax, ds:dword_10001060[edx*4]
add     esi, 1
sub     ecx, 1
jnz     short loc_10001040
not     eax
pop     edx
pop     ecx
pop     esi
leave
retn    8
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
pusha
mov     esi, [ebp+lpname]
lea     ebx, [ebx+0]
push    esi
push    [ebp+hmodule]
call    sub_1000149b
or      eax, eax
jnz     short loc_10001482
mov     [ebp+var_4], eax
jmp     short loc_10001493
mov     dword_1000d884, esi
inc     esi
mov     ebx, [ebp+arg_4]
cmp     [eax], bl
jnz     short loc_10001470
mov     [ebp+var_4], eax
popa
mov     eax, [ebp+var_4]
leave
retn    0ch
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
pusha
mov     [ebp+var_4], 0
push    0ah
push    [ebp+lpname]
push    [ebp+hmodule]
call    findresourcea
or      eax, eax
jnz     short loc_100014bc
jmp     short loc_100014de
push    eax
push    eax
push    [ebp+hmodule]
call    sizeofresource
mov     dword_1000d880, eax
pop     eax
push    eax
push    [ebp+hmodule]
call    loadresource
or      eax, eax
jnz     short loc_100014db
jmp     short loc_100014de
mov     [ebp+var_4], eax
popa
mov     eax, [ebp+var_4]
leave
retn    8
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
push    esi
push    edi
push    ebx
mov     [ebp+var_1], 1
mov     esi, [ebp+arg_0]
lea     edi, [esi+15h]
mov     ecx, [esi+1]
jmp     short loc_10001536
push    ecx
lea     eax, [edi+4]
push    eax
movzx   eax, word ptr [edi]
movzx   ebx, word ptr [edi+2]
or      ebx, [esi+5]
add     edi, eax
pop     eax
add     edi, 5
lea     ecx, [edi+4]
add     edi, [edi]
add     edi, 5
lea     edx, [edi+4]
push    ebx
push    edx
push    ecx
push    eax
call    sub_10001545
or      eax, eax
jnz     short loc_1000152f
mov     [ebp+var_1], 0
add     edi, [edi]
add     edi, 5
pop     ecx
dec     ecx
or      ecx, ecx
jnz     short loc_100014fe
movzx   eax, [ebp+var_1]
pop     ebx
pop     edi
pop     esi
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffffbfch
mov     [ebp+var_401], 0
pusha
mov     esi, [ebp+lpstring2]
lea     ebx, [ebp+string1]
push    esi
push    ebx
call    lstrcpya
xor     ecx, ecx
jmp     short loc_1000156b
inc     ecx
cmp     byte ptr [ecx+ebx], 5ch
jnz     short loc_1000156a
mov     byte ptr [ecx+ebx], 0
lea     esi, [ecx+esi+1]
push    ebx
call    sub_10001657
or      eax, eax
jz      short loc_100015d2
mov     byte ptr [ebx], 0
test    [ebp+arg_c], 8
jz      short loc_10001596
mov     edx, 1
jmp     short loc_10001598
xor     edx, edx
push    edx
push    [ebp+lpvaluename]
push    esi
push    eax
push    ebx
call    getregstring
push    offset byte_1000d000
push    ebx
call    sub_10001607
test    [ebp+arg_c], 1
jz      short loc_100015be
push    ebx
call    sub_100015de
cmp     byte ptr [ebx], 0
jz      short loc_100015d2
push    ebx
push    [ebp+lpname]
call    setenvironmentvariablea
mov     [ebp+var_401], al
popa
movzx   eax, [ebp+var_401]
leave
retn    10h
push    ebp
mov     ebp, esp
push    ecx
push    edx
push    edi
mov     edi, [ebp+lpstring]
push    edi
push    edi
call    lstrlena
add     edi, eax
dec     edi
jmp     short loc_100015f7
dec     edi
dec     eax
jz      short loc_100015ff
cmp     byte ptr [edi], 5ch
jnz     short loc_100015f3
mov     byte ptr [edi], 0
pop     eax
pop     edi
pop     edx
pop     ecx
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffffc00h
push    esi
push    edi
push    ebx
mov     esi, [ebp+lpstring1]
lea     edi, [ebp+string2]
jmp     short loc_10001639
mov     al, [esi]
mov     edx, [ebp+arg_4]
mov     bl, 0
jmp     short loc_1000162e
cmp     [edx], al
jnz     short loc_1000162d
mov     bl, 1
inc     edx
cmp     byte ptr [edx], 0
jnz     short loc_10001627
or      bl, bl
jnz     short loc_10001638
stosb
inc     esi
cmp     byte ptr [esi], 0
jnz     short loc_1000161e
xor     al, al
stosb
lea     edi, [ebp+string2]
push    edi
push    [ebp+lpstring1]
call    lstrcpya
pop     ebx
pop     edi
pop     esi
leave
retn    8
push    ebp
mov     ebp, esp
push    esi
push    edi
push    ebx
mov     ebx, [ebp+lpstring1]
mov     edi, offset lstrcmpia
push    offset string2
push    ebx
call    edi
or      eax, eax
jnz     short loc_10001678
mov     eax, 80000000h
jmp     short loc_100016d9
push    offset ahkeycurrentcon
push    ebx
call    edi
or      eax, eax
jnz     short loc_1000168b
mov     eax, 80000005h
jmp     short loc_100016d9
push    offset ahkeycurrentuse
push    ebx
call    edi
or      eax, eax
jnz     short loc_1000169e
mov     eax, 80000001h
jmp     short loc_100016d9
push    offset ahkeylocalmachi
push    ebx
call    edi
or      eax, eax
jnz     short loc_100016b1
mov     eax, 80000002h
jmp     short loc_100016d9
push    offset ahkeyusers
push    ebx
call    edi
or      eax, eax
jnz     short loc_100016c4
mov     eax, 80000003h
jmp     short loc_100016d9
push    offset ahkeydyndata
push    ebx
call    edi
or      eax, eax
jnz     short loc_100016d7
mov     eax, 80000006h
jmp     short loc_100016d9
xor     eax, eax
pop     ebx
pop     edi
pop     esi
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0ffffff98h
push    ebx
push    esi
push    edi
mov     ebx, [ebp+hinstance]
push    [ebp+lpbitmapname]
push    ebx
call    loadbitmapa
test    eax, eax
jz      loc_1000189f
mov     [ebp+dwnewlong], eax
push    [ebp+arg_c]
push    ebx
call    loadbitmapa
or      eax, eax
jnz     short loc_10001710
mov     eax, [ebp+dwnewlong]
mov     [ebp+var_c], eax
push    [ebp+arg_10]
push    ebx
call    loadbitmapa
or      eax, eax
jnz     short loc_10001723
mov     eax, [ebp+dwnewlong]
mov     [ebp+var_10], eax
push    [ebp+niddlgitem]
push    [ebp+hdlg]
call    getdlgitem
test    eax, eax
jz      loc_1000189f
mov     esi, eax
push    ebx
lea     ebx, [ebp+rect]
push    ebx
push    esi
call    getwindowrect
lea     edi, [ebp+var_28]
push    edi
push    [ebp+hdlg]
call    getwindowrect
mov     eax, [ebx]
sub     eax, [edi]
mov     [ebp+x], eax
mov     eax, [ebx+4]
sub     eax, [edi+4]
mov     [ebp+y], eax
lea     eax, [ebp+y]
push    eax
lea     eax, [ebp+x]
push    eax
push    [ebp+hdlg]
call    sub_100018b0
pop     ebx
push    0
push    esi
call    showwindow
jmp     short loc_1000178e
lea     esi, [ebp+var_68]
mov     dword ptr [esi], 30h
mov     dword ptr [esi+4], 2000h
mov     dword ptr [esi+8], offset sub_10001980
mov     dword ptr [esi+0ch], 0
mov     dword ptr [esi+10h], 14h
mov     [esi+14h], ebx
mov     dword ptr [esi+20h], 10h
mov     dword ptr [esi+24h], 0
mov     dword ptr [esi+28h], offset classname
mov     dword ptr [esi+18h], 0
push    7f00h
push    0
call    loadcursora
mov     [esi+1ch], eax
mov     dword ptr [esi+2ch], 0
push    esi
call    registerclassexa
push    0
push    ebx
push    [ebp+niddlgitem]
push    [ebp+hdlg]
push    0
push    0
push    [ebp+y]
push    [ebp+x]
push    50000000h
push    0
push    offset classname
push    20h
call    createwindowexa
mov     ebx, eax
push    [ebp+dwnewlong]
push    0
push    ebx
call    setwindowlonga
push    [ebp+var_c]
push    4
push    ebx
call    setwindowlonga
push    [ebp+var_10]
push    8
push    ebx
call    setwindowlonga
push    0
push    [ebp+hinstance]
push    [ebp+niddlgitem]
push    ebx
push    0
push    0
push    0
push    0
push    5000000eh
push    0
push    offset astatic
push    0
call    createwindowexa
mov     [ebp+hwnd], eax
push    [ebp+dwnewlong]
push    0
push    172h
push    eax
call    sendmessagea
push    edi
push    [ebp+hwnd]
call    getwindowrect
push    [ebp+hwnd]
push    0ch
push    ebx
call    setwindowlonga
mov     ecx, [edi+0ch]
sub     ecx, [edi+4]
mov     eax, [edi+8]
sub     eax, [edi]
push    2
push    ecx
push    eax
push    0
push    0
push    0
push    ebx
call    setwindowpos
mov     eax, ebx
pop     edi
pop     esi
pop     ebx
leave
retn    18h
push    ebp
mov     ebp, esp
push    ebx
push    esi
push    edi
mov     edi, [ebp+arg_8]
push    0ffffffech
push    [ebp+hwnd]
call    getwindowlonga
mov     esi, eax
push    0fffffff0h
push    [ebp+hwnd]
call    getwindowlonga
mov     ebx, eax
test    ebx, 0c00000h
jz      short loc_10001901
and     eax, 0c00000h
cmp     eax, 0c00000h
jnz     short loc_10001901
test    esi, 80h
jz      short loc_100018f8
push    33h
call    getsystemmetrics
sub     [edi], eax
jmp     short loc_10001901
push    4
call    getsystemmetrics
sub     [edi], eax
test    ebx, 40000h
jz      short loc_10001920
push    21h
call    getsystemmetrics
sub     [edi], eax
push    20h
call    getsystemmetrics
mov     ecx, [ebp+arg_4]
sub     [ecx], eax
jmp     short loc_1000193d
test    ebx, 400000h
jz      short loc_1000193d
push    8
call    getsystemmetrics
sub     [edi], eax
push    7
call    getsystemmetrics
mov     ecx, [ebp+arg_4]
sub     [ecx], eax
test    esi, 200h
jz      short loc_1000195a
push    2dh
call    getsystemmetrics
sub     [edi], eax
push    2eh
call    getsystemmetrics
mov     ecx, [ebp+arg_4]
sub     [ecx], eax
test    esi, 20000h
jz      short loc_10001977
push    6
call    getsystemmetrics
sub     [edi], eax
push    5
call    getsystemmetrics
mov     ecx, [ebp+arg_4]
sub     [ecx], eax
pop     edi
pop     esi
pop     ebx
leave
retn    0ch
mov     edi, edi
push    ebp
mov     ebp, esp
add     esp, 0ffffffe8h
push    ebx
push    esi
push    edi
mov     eax, [ebp+msg]
cmp     eax, 201h
jnz     short loc_100019d2
push    4
push    [ebp+hwnd]
call    getwindowlonga
mov     ebx, eax
push    0ch
push    [ebp+hwnd]
call    getwindowlonga
push    ebx
push    0
push    172h
push    eax
call    sendmessagea
push    [ebp+hwnd]
call    setcapture
mov     byte_1000d888, 1
mov     byte_1000d889, 0
jmp     loc_10001b73
cmp     eax, 200h
jnz     loc_10001ac0
lea     esi, [ebp+rect]
lea     edi, [ebp+var_18]
push    esi
push    [ebp+hwnd]
call    getwindowrect
mov     eax, [ebp+lparam]
and     eax, 0ffffh
mov     [edi], eax
mov     eax, [ebp+lparam]
and     eax, 0ffff0000h
shr     eax, 10h
mov     [edi+4], eax
mov     eax, [esi+8]
sub     eax, [esi]
mov     edx, [esi+0ch]
sub     edx, [esi+4]
cmp     dword ptr [edi], 0
jb      short loc_10001a23
cmp     dword ptr [edi+4], 0
jb      short loc_10001a23
cmp     [edi], eax
ja      short loc_10001a23
cmp     [edi+4], edx
jbe     short loc_10001a68
cmp     byte_1000d888, 0
jnz     short loc_10001a68
push    0
push    [ebp+hwnd]
call    getwindowlonga
mov     ebx, eax
push    0ch
push    [ebp+hwnd]
call    getwindowlonga
push    ebx
push    0
push    172h
push    eax
call    sendmessagea
call    releasecapture
mov     byte_1000d889, 0
mov     byte_1000d888, 0
jmp     loc_10001b73
cmp     byte_1000d888, 0
jnz     short loc_10001a7a
cmp     byte_1000d889, 0
jz      short loc_10001a81
pop     edi
pop     esi
pop     ebx
leave
retn    10h
push    [ebp+hwnd]
call    setcapture
push    8
push    [ebp+hwnd]
call    getwindowlonga
mov     ebx, eax
push    0ch
push    [ebp+hwnd]
call    getwindowlonga
push    ebx
push    0
push    172h
push    eax
call    sendmessagea
mov     byte_1000d889, 1
mov     byte_1000d888, 0
jmp     loc_10001b73
cmp     eax, 202h
jnz     loc_10001b73
cmp     byte_1000d888, 0
jnz     short loc_10001ae0
pop     edi
pop     esi
pop     ebx
leave
retn    10h
jmp     loc_10001b73
mov     byte_1000d888, 0
mov     byte_1000d889, 0
push    0
push    [ebp+hwnd]
call    getwindowlonga
mov     ebx, eax
push    0ch
push    [ebp+hwnd]
call    getwindowlonga
push    ebx
push    0
push    172h
push    eax
call    sendmessagea
mov     eax, [ebp+lparam]
cwde
mov     edi, eax
mov     eax, [ebp+lparam]
rol     eax, 10h
cwde
mov     ebx, eax
lea     eax, [ebp+rect]
push    eax
push    [ebp+hwnd]
call    getwindowrect
lea     esi, [ebp+rect]
mov     eax, [esi+8]
sub     eax, [esi]
mov     edx, [esi+0ch]
sub     edx, [esi+4]
cmp     edi, 0
jle     short loc_10001b6e
cmp     ebx, 0
jle     short loc_10001b6e
cmp     edi, eax
jge     short loc_10001b6e
cmp     ebx, edx
jge     short loc_10001b6e
push    [ebp+hwnd]
call    getparent
mov     ebx, eax
push    [ebp+hwnd]
call    getdlgctrlid
push    [ebp+hwnd]
push    eax
push    111h
push    ebx
call    sendmessagea
call    releasecapture
push    [ebp+lparam]
push    [ebp+wparam]
push    [ebp+msg]
push    [ebp+hwnd]
call    defwindowproca
pop     edi
pop     esi
pop     ebx
leave
retn    10h
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
lea     eax, [ebp+threadid]
push    eax
push    0
push    [ebp+lpparameter]
push    offset startaddress
push    0
push    0
call    createthread
push    eax
call    closehandle
leave
retn    4
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mov     cl, [eax+21h]
or      cl, cl
jnz     short loc_10001bc3
inc     cl
jmp     short loc_10001bc5
dec     cl
mov     [eax+21h], cl
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0ffffffa8h
mov     esi, [ebp+lpthreadparameter]
mov     eax, [esi+1dh]
cmp     eax, 1f4h
jnb     short loc_10001be6
mov     eax, 1f4h
jmp     short loc_10001beb
add     eax, 96h
push    eax
call    sleep
push    dword ptr [esi+4]
call    lstrlena
mov     [ebp+c], eax
push    dword ptr [esi]
call    getdc
mov     [ebp+hdcsrc], eax
push    0
call    getdc
push    eax
call    createcompatibledc
mov     [ebp+hdc], eax
mov     eax, [esi+14h]
or      eax, eax
jnz     short loc_10001c2a
push    0
push    0
push    31h
push    dword ptr [esi]
call    sendmessagea
push    eax
push    [ebp+hdc]
call    selectobject
lea     eax, [ebp+sz]
push    eax
push    [ebp+c]
push    dword ptr [esi+4]
push    [ebp+hdc]
call    gettextextentpointa
cmp     eax, 1
jnz     locret_10001de1
push    [ebp+sz.cy]
pop     [ebp+cy]
push    [ebp+sz._cx]
pop     [ebp+var_18]
push    [ebp+cy]
push    dword ptr [esi+10h]
push    [ebp+hdcsrc]
call    createcompatiblebitmap
push    eax
push    [ebp+hdc]
call    selectobject
lea     edi, [ebp+pbmi]
push    2ch
push    edi
call    rtlzeromemory
mov     dword ptr [edi], 28h
push    dword ptr [esi+10h]
pop     dword ptr [edi+4]
push    [ebp+cy]
pop     dword ptr [edi+8]
mov     word ptr [edi+0ch], 1
mov     word ptr [edi+0eh], 20h
mov     dword ptr [edi+10h], 0
push    0
push    0
lea     eax, [ebp+ppvbits]
push    eax
push    0
push    edi
push    [ebp+hdc]
call    createdibsection
push    eax
push    [ebp+hdc]
call    selectobject
push    0
call    getdc
push    eax
call    createcompatibledc
mov     [ebp+var_8], eax
lea     edi, [ebp+pbmi]
push    0
push    0
lea     eax, [ebp+var_4c]
push    eax
push    0
push    edi
push    [ebp+var_8]
call    createdibsection
push    eax
push    [ebp+var_8]
call    selectobject
push    0cc0020h
push    dword ptr [esi+0ch]
push    dword ptr [esi+8]
push    [ebp+hdcsrc]
push    [ebp+cy]
push    dword ptr [esi+10h]
push    0
push    0
push    [ebp+var_8]
call    bitblt
push    1
push    [ebp+hdc]
call    setbkmode
push    dword ptr [esi+18h]
push    [ebp+hdc]
call    settextcolor
push    offset modulename
call    getmodulehandlea
push    offset procname
push    eax
call    getprocaddress
mov     edi, eax
xor     eax, eax
sub     eax, [ebp+var_18]
sub     eax, 8
mov     [ebp+var_1c], eax
mov     ebx, [esi+10h]
add     ebx, 4
cmp     byte ptr [esi+21h], 0
jnz     loc_10001dd5
push    0cc0020h
push    0
push    0
push    [ebp+var_8]
push    [ebp+cy]
push    dword ptr [esi+10h]
push    0
push    0
push    [ebp+hdc]
call    bitblt
push    [ebp+c]
push    dword ptr [esi+4]
push    0
push    ebx
push    [ebp+hdc]
call    textouta
push    dword ptr [esi+10h]
push    [ebp+cy]
push    [ebp+var_4c]
push    [ebp+ppvbits]
call    sub_10001df0
push    0cc0020h
push    0
push    0
push    [ebp+hdc]
push    [ebp+cy]
push    dword ptr [esi+10h]
push    dword ptr [esi+0ch]
push    dword ptr [esi+8]
push    [ebp+hdcsrc]
call    bitblt
dec     ebx
cmp     ebx, [ebp+var_1c]
jnz     short loc_10001dbc
mov     ebx, [esi+10h]
or      edi, edi
jz      short loc_10001dd5
movzx   eax, byte ptr [esi+1ch]
or      al, al
jz      short loc_10001dd5
cmp     al, 0ffh
jz      short loc_10001dd5
push    2
push    eax
push    0
push    dword ptr [esi]
call    edi
push    1eh
call    sleep
jmp     loc_10001d49
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffffff8h
push    esi
push    edi
push    ebx
mov     eax, [ebp+arg_c]
cmp     eax, 32h
jb      short loc_10001e7d
sub     eax, 19h
mov     [ebp+var_8], eax
xor     esi, esi
mov     [ebp+var_4], 0
jmp     short loc_10001e78
xor     edi, edi
jmp     short loc_10001e54
push    [ebp+arg_8]
push    [ebp+arg_c]
push    [ebp+arg_0]
push    edi
push    esi
call    sub_10001e90
mov     ebx, eax
push    [ebp+arg_8]
push    [ebp+arg_c]
push    [ebp+arg_4]
push    edi
push    esi
call    sub_10001e90
push    [ebp+var_4]
push    ebx
push    eax
call    sub_10001f00
push    eax
push    [ebp+arg_8]
push    [ebp+arg_c]
push    [ebp+arg_0]
push    edi
push    esi
call    sub_10001ec0
inc     edi
cmp     edi, [ebp+arg_8]
jnz     short loc_10001e16
cmp     esi, 19h
jnb     short loc_10001e64
add     [ebp+var_4], 4
jmp     short loc_10001e77
cmp     esi, 19h
jnz     short loc_10001e6e
mov     esi, [ebp+var_8]
jmp     short loc_10001e77
cmp     esi, [ebp+var_8]
jbe     short loc_10001e77
sub     [ebp+var_4], 4
inc     esi
cmp     esi, [ebp+arg_c]
jnz     short loc_10001e12
pop     ebx
pop     edi
pop     esi
leave
retn    10h
jmp     short sub_10001e90
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_c]
mov     ecx, [ebp+arg_10]
sub     ecx, [ebp+arg_4]
dec     ecx
mul     ecx
shl     eax, 2
push    eax
mov     eax, [ebp+arg_0]
shl     eax, 2
pop     ecx
add     eax, ecx
add     eax, [ebp+arg_8]
mov     eax, [eax]
leave
retn    14h
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_c]
mov     ecx, [ebp+arg_10]
cmp     [ebp+arg_0], eax
jnb     short locret_10001eee
cmp     [ebp+arg_4], ecx
jnb     short locret_10001eee
sub     ecx, [ebp+arg_4]
dec     ecx
mul     ecx
shl     eax, 2
mov     edx, eax
mov     eax, [ebp+arg_0]
shl     eax, 2
add     eax, edx
add     eax, [ebp+arg_8]
mov     ecx, [ebp+arg_14]
mov     [eax], ecx
leave
retn    18h
push    ebp
mov     ebp, esp
push    esi
push    edi
push    ebx
cmp     [ebp+arg_8], 64h
jnb     short loc_10001f60
mov     eax, [ebp+arg_4]
cmp     eax, [ebp+arg_0]
jz      short loc_10001f5b
mov     eax, 64h
sub     eax, [ebp+arg_8]
push    eax
push    [ebp+arg_0]
call    sub_10001f90
mov     ebx, eax
push    [ebp+arg_8]
push    [ebp+arg_4]
call    sub_10001f90
xor     esi, esi
jmp     short loc_10001f51
movzx   edx, al
movzx   ecx, bl
add     edx, ecx
cmp     edx, 0ffh
jbe     short loc_10001f48
mov     dl, 0ffh
mov     al, dl
ror     eax, 8
ror     ebx, 8
inc     esi
cmp     esi, 3
jnz     short loc_10001f36
rol     eax, 18h
jmp     short loc_10001f63
mov     eax, [ebp+arg_4]
jmp     short loc_10001f63
mov     eax, [ebp+arg_4]
pop     ebx
pop     edi
pop     esi
leave
retn    0ch
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_0]
mul     [ebp+arg_4]
mov     ecx, 64h
xor     edx, edx
div     ecx
leave
retn    8
push    ebp
mov     ebp, esp
push    esi
push    edi
push    ebx
mov     ebx, [ebp+arg_0]
movzx   eax, bl
push    [ebp+arg_4]
push    eax
call    sub_10001f70
mov     edi, eax
ror     ebx, 8
movzx   eax, bl
push    [ebp+arg_4]
push    eax
call    sub_10001f70
ror     edi, 8
mov     edx, edi
mov     dl, al
mov     edi, edx
ror     ebx, 8
movzx   eax, bl
push    [ebp+arg_4]
push    eax
call    sub_10001f70
ror     edi, 8
mov     edx, edi
mov     dl, al
mov     edi, edx
rol     edi, 10h
mov     eax, edi
pop     ebx
pop     edi
pop     esi
leave
retn    8
push    ebp
mov     ebp, esp
add     esp, 0fffffc00h
push    esi
push    edi
push    ebx
push    ecx
push    edx
lea     eax, [ebp+buffer]
push    eax
push    400h
call    gettemppatha
push    offset abassmoddll
lea     eax, [ebp+buffer]
push    eax
call    lstrcata
xor     edi, edi
lea     eax, [ebp+buffer]
push    eax
call    loadlibrarya
or      eax, eax
jz      loc_100020b2
mov     hlibmodule, eax
mov     esi, offset abassmodinit
mov     ebx, offset dword_1000d88a
jmp     short loc_10002071
push    esi
push    hlibmodule
call    getprocaddress
or      eax, eax
jz      short loc_1000205a
mov     [ebx], eax
add     ebx, 4
jmp     short loc_10002052
inc     esi
cmp     byte ptr [esi], 0
jnz     short loc_10002051
inc     esi
jmp     short loc_10002071
push    hlibmodule
call    freelibrary
mov     hlibmodule, 0
jmp     short loc_100020b2
cmp     byte ptr [esi], 0
jnz     short loc_1000203a
push    0
push    0ac44h
push    0ffffffffh
call    dword_1000d88a
cmp     eax, 1
jnz     short loc_100020b2
call    dword_1000d88e
mov     eax, [ebp+arg_0]
mov     ecx, [eax]
add     eax, 4
push    6
push    ecx
push    0
push    eax
push    1
call    dword_1000d892
cmp     eax, 1
jnz     short loc_100020b2
call    dword_1000d896
inc     edi
mov     eax, edi
pop     edx
pop     ecx
pop     ebx
pop     edi
pop     esi
leave
retn    4
pusha
mov     esi, hlibmodule
or      esi, esi
jz      short loc_100020de
call    dword_1000d89a
push    esi
call    freelibrary
mov     hlibmodule, 0
popa
retn
push    ebp
mov     ebp, esp
add     esp, 0fffffc00h
cmp     [ebp+fdwreason], 1
jnz     short loc_100020fa
push    [ebp+hinstdll]
pop     hinstance
jmp     short loc_10002100
cmp     [ebp+fdwreason], 0
jnz     short $+2
mov     eax, 1
leave
retn    0ch
call    sub_10004126
retn
mov     eax, hdlg
retn
push    ebp
mov     ebp, esp
add     esp, 0fffffff0h
push    esi
push    edi
push    ebx
lea     edi, [ebp+var_10]
push    edi
push    [ebp+arg_0]
call    sub_10002180
xor     ebx, ebx
jmp     short loc_1000215c
jmp     short loc_1000216b
cmp     byte ptr [esi], 18h
jnz     short loc_1000215c
push    10h
lea     eax, [esi+1]
push    eax
push    edi
call    sub_100021d0
or      eax, eax
jz      short loc_1000215c
mov     eax, esi
add     eax, 11h
pop     ebx
pop     edi
pop     esi
leave
retn    4
inc     ebx
push    ebx
push    hinstance
call    sub_1000149b
mov     esi, eax
or      esi, esi
jnz     short loc_1000213b
xor     eax, eax
pop     ebx
pop     edi
pop     esi
leave
retn    4
push    ebp
mov     ebp, esp
push    esi
push    edi
push    ebx
push    [ebp+arg_0]
call    sub_10006c90
mov     ebx, eax
cmp     ebx, 0
jbe     short loc_100021c1
call    sub_1000a578
push    ebx
push    [ebp+arg_0]
call    sub_1000a5b8
call    sub_1000a618
mov     esi, [ebp+arg_4]
push    dword ptr [eax]
pop     dword ptr [esi]
push    dword ptr [eax+4]
pop     dword ptr [esi+4]
push    dword ptr [eax+8]
pop     dword ptr [esi+8]
push    dword ptr [eax+0ch]
pop     dword ptr [esi+0ch]
pop     ebx
pop     edi
pop     esi
leave
retn    8
push    ebp
mov     ebp, esp
push    esi
push    edi
mov     ecx, [ebp+arg_8]
mov     esi, [ebp+arg_0]
mov     edi, [ebp+arg_4]
jmp     short loc_100021ef
lodsb
cmp     al, [edi]
jz      short loc_100021ed
xor     eax, eax
pop     edi
pop     esi
leave
retn    0ch
dec     ecx
inc     edi
or      ecx, ecx
jnz     short loc_100021e0
mov     eax, 1
pop     edi
pop     esi
leave
retn    0ch
mov     edi, edi
push    ebp
mov     ebp, esp
push    esi
push    edi
push    ebx
mov     esi, [ebp+arg_0]
mov     edi, [ebp+lpstring1]
mov     byte ptr [edi], 0
mov     ecx, [ebp+arg_8]
jmp     short loc_10002236
push    ecx
xor     eax, eax
lodsb
push    offset byte_1000d0fe
push    eax
call    sub_10006c5c
mov     eax, offset byte_1000d0fe
push    dword ptr [eax+6]
pop     dword ptr [eax]
push    eax
push    edi
call    lstrcata
pop     ecx
dec     ecx
or      ecx, ecx
jnz     short loc_10002214
mov     eax, [ebp+lpstring1]
pop     ebx
pop     edi
pop     esi
leave
retn    0ch
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
pusha
lea     eax, [ebp+threadid]
push    eax
push    0
push    0
push    [ebp+lpstartaddress]
push    0
push    0
call    createthread
push    eax
call    closehandle
popa
leave
retn    4
push    ebp
mov     ebp, esp
push    ecx
push    edx
push    edi
mov     edi, [ebp+arg_0]
push    edi
push    edi
call    sub_10006c90
add     edi, eax
dec     edi
inc     eax
jmp     short loc_10002284
dec     edi
dec     eax
jz      short loc_1000228c
cmp     byte ptr [edi], 5ch
jnz     short loc_10002280
mov     byte ptr [edi], 0
pop     eax
pop     edi
pop     edx
pop     ecx
leave
retn    4
push    ebp
mov     ebp, esp
pusha
mov     esi, [ebp+arg_0]
or      esi, esi
jz      short loc_100022bb
lea     eax, [esi+15h]
push    eax
push    dword ptr [esi+1]
push    0
call    extcreateregion
push    1
push    eax
push    hdlg
call    setwindowrgn
popa
leave
retn    4
push    ebp
mov     ebp, esp
pusha
mov     esi, hwnd
or      esi, esi
jz      short loc_100022fc
push    [ebp+lparam]
push    0
push    180h
push    esi
call    sendmessagea
push    0
push    0
push    18bh
push    esi
call    sendmessagea
dec     eax
push    0
push    eax
push    186h
push    esi
call    sendmessagea
push    offset asc_1000d10c
call    sub_10006d14
push    [ebp+lparam]
call    sub_10006d14
popa
leave
retn    4
push    ebp
mov     ebp, esp
pusha
push    6bh
push    hdlg
call    isdlgbuttonchecked
cmp     eax, 1
jnz     short loc_10002363
mov     esi, offset filename
push    [ebp+lpstring2]
push    esi
call    lstrcpya
push    offset abak
push    esi
call    lstrcata
push    esi
call    getfileattributesa
cmp     eax, 0ffffffffh
jnz     short loc_1000235c
push    0
push    esi
push    [ebp+lpstring2]
call    copyfilea
mov     al, 0
jmp     short loc_1000235e
mov     al, 1
mov     byte_1000e52d, al
popa
leave
retn    4
push    ebp
mov     ebp, esp
pusha
push    6bh
push    hdlg
call    isdlgbuttonchecked
cmp     eax, 1
jnz     loc_1000240c
mov     esi, offset filename
cmp     [ebp+arg_0], 0
jnz     short loc_100023b4
cmp     byte_1000e52d, 0
jnz     short loc_100023a3
push    0
push    offset src
push    esi
call    copyfilea
cmp     byte_1000e52d, 0
jnz     short loc_1000240c
push    esi
call    deletefilea
jmp     short loc_1000240c
mov     eax, 1
cmp     byte_1000e95c, 1
jnz     short loc_100023d0
cmp     byte_1000e95d, 0
jnz     short loc_100023d0
mov     eax, 0
cmp     eax, 1
jnz     short loc_1000240a
push    400h
push    offset buffer
push    0dh
push    hinstance
call    loadstringa
push    offset buffer
call    addmsg
push    esi
call    addmsg
push    dwfileattributes
push    esi
call    setfileattributesa
jmp     short loc_1000240c
jmp     short loc_100023a3
popa
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffffc00h
push    esi
lea     esi, [ebp+string1]
push    [ebp+lpstring2]
push    esi
call    lstrcpya
push    offset atmp
push    esi
call    lstrcata
push    esi
call    deletefilea
push    esi
push    [ebp+lpstring2]
call    movefilea
cmp     eax, 1
jnz     short loc_1000245e
push    1
push    [ebp+lpstring2]
push    esi
call    copyfilea
cmp     eax, 1
jnz     short loc_1000245e
mov     eax, 1
pop     esi
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffff3fch
pusha
mov     [ebp+var_c04], 0
mov     byte_1000e52e, 0
push    400h
lea     eax, [ebp+dst]
push    eax
push    [ebp+lpsrc]
call    expandenvironmentstringsa
push    400h
push    offset src
lea     eax, [ebp+dst]
push    eax
call    expandenvironmentstringsa
mov     esi, offset src
jmp     short loc_100024cb
lodsb
cmp     al, 25h
jnz     short loc_100024cb
push    offset src
call    sub_10006ea0
push    eax
push    offset src
call    lstrcpya
jmp     short loc_100024d0
cmp     byte ptr [esi], 0
jnz     short loc_100024af
mov     edi, offset src
cmp     byte ptr [edi+1], 3ah
jz      short loc_10002546
cmp     dst, 0
jnz     short loc_10002505
push    400h
lea     eax, [ebp+dst]
push    eax
push    0
call    getmodulefilenamea
lea     eax, [ebp+dst]
push    eax
call    sub_1000226a
jmp     short loc_10002516
push    offset dst
lea     eax, [ebp+dst]
push    eax
call    lstrcpya
cmp     byte ptr [edi], 5ch
jz      short loc_1000252c
push    offset asc_1000d11a
lea     eax, [ebp+dst]
push    eax
call    lstrcata
push    edi
lea     eax, [ebp+dst]
push    eax
call    lstrcata
lea     eax, [ebp+dst]
push    eax
push    edi
call    lstrcpya
push    400h
push    offset byte_1001323d
push    13h
push    hinstance
call    loadstringa
push    offset byte_1001323d
call    addmsg
push    offset src
call    addmsg
push    offset src
call    getfileattributesa
mov     dwfileattributes, eax
cmp     eax, 0ffffffffh
jz      short loc_100025b9
test    [ebp+arg_8], 80000000h
jz      short loc_10002590
jmp     short loc_100025b9
test    eax, 1
jz      short loc_100025af
xor     eax, 1
push    eax
push    offset src
call    setfileattributesa
push    offset aremovingreadon
call    addmsg
push    offset src
call    sub_10002313
test    [ebp+arg_8], 80000000h
jz      short loc_100025e0
push    0
push    82h
push    3
push    0
push    1
push    80000000h
push    offset src
call    createfilea
jmp     short loc_100025fc
push    0
push    82h
push    3
push    0
push    2
push    0c0000000h
push    offset src
call    createfilea
cmp     eax, 0ffffffffh
jnz     loc_1000277c
push    offset src
call    getfileattributesa
cmp     eax, 0ffffffffh
jnz     loc_100026ef
cmp     byte_1000e95c, 0
jnz     loc_10002777
push    offset src
call    sub_10006ea0
cmp     word ptr [eax], 2e2ah
jz      short loc_1000266f
cmp     word ptr [eax], 0
jz      short loc_1000266f
push    400h
push    offset text
push    10h
push    hinstance
call    loadstringa
push    34h
push    offset src
push    offset text
push    hdlg
call    messageboxa
cmp     eax, 6
jnz     short loc_100026ea
lea     esi, [ebp+string1]
mov     edi, offset src
cmp     byte ptr [edi+1], 3ah
jnz     short loc_10002688
push    edi
call    sub_10006ea0
mov     edi, eax
push    edi
push    esi
call    lstrcpya
push    esi
call    sub_10006c90
cmp     eax, 0
jbe     short loc_1000269b
inc     eax
push    esi
push    eax
add     esi, eax
push    edi
push    esi
call    lstrcpya
pop     eax
add     esi, eax
push    2eh
push    offset aexefilesexe
push    esi
call    rtlmovememory
pop     esi
lea     ebx, [ebp+var_800]
push    offset src
push    ebx
call    lstrcpya
push    ebx
call    sub_1000226a
push    hdlg
push    ebx
push    esi
push    offset src
call    sub_10006e30
cmp     eax, 1
jnz     short loc_100026ea
jmp     loc_10002546
jmp     loc_10002777
test    [ebp+arg_8], 2
jz      short loc_1000273f
cmp     byte_1000e52e, 0
jnz     short loc_10002777
push    offset src
call    sub_10002411
cmp     eax, 1
jnz     short loc_1000273d
mov     byte_1000e52e, 1
push    400h
push    offset byte_10013a3d
push    11h
push    hinstance
call    loadstringa
push    offset byte_10013a3d
call    addmsg
jmp     loc_10002546
jmp     short loc_10002777
push    400h
push    offset byte_10013e3d
push    12h
push    hinstance
call    loadstringa
push    34h
push    offset src
push    offset byte_10013e3d
push    hdlg
call    messageboxa
cmp     eax, 6
jnz     short loc_10002777
jmp     loc_10002546
jmp     loc_100028ba
mov     hfile, eax
push    offset lastwritetime
push    offset lastaccesstime
push    offset creationtime
push    hfile
call    getfiletime
push    offset distancetomovehigh
push    hfile
call    getfilesize
mov     dword_1000e519, eax
cmp     [ebp+arg_4], 0
jnz     short loc_100027b9
mov     [ebp+arg_4], eax
test    [ebp+arg_8], 4
jz      short loc_100027db
add     eax, 278h
add     eax, dword_1000d880
push    100h
push    eax
call    sub_10006ee0
mov     [ebp+arg_4], eax
push    [ebp+arg_4]
pop     nnumberofbytestowrite
test    [ebp+arg_8], 80000000h
jz      short loc_10002804
push    0
push    0
push    0
push    2
push    0
push    hfile
call    createfilemappinga
jmp     short loc_10002819
push    0
push    0
push    0
push    4
push    0
push    hfile
call    createfilemappinga
or      eax, eax
jnz     short loc_10002840
push    400h
push    offset byte_1001423d
push    14h
push    hinstance
call    loadstringa
push    offset byte_1001423d
call    addmsg
jmp     short loc_100028ba
mov     hobject, eax
test    [ebp+arg_8], 80000000h
jz      short loc_1000285e
push    0
push    0
push    0
push    4
push    eax
call    mapviewoffile
jmp     short loc_1000286c
push    0
push    0
push    0
push    2
push    eax
call    mapviewoffile
or      eax, eax
jnz     short loc_10002872
jmp     short loc_1000281d
mov     lpbaseaddress, eax
mov     [ebp+var_c04], eax
push    offset src
push    offset name
call    setenvironmentvariablea
push    offset src
lea     eax, [ebp+dst]
push    eax
call    lstrcpya
lea     eax, [ebp+dst]
push    eax
call    sub_1000226a
lea     eax, [ebp+dst]
push    eax
push    offset adup2lastpath
call    setenvironmentvariablea
cmp     [ebp+var_c04], 0
jnz     short loc_100028cd
push    offset afilenotloaded
call    addmsg
popa
mov     eax, [ebp+var_c04]
leave
retn    0ch
push    ebp
mov     ebp, esp
pusha
mov     esi, hfile
or      esi, esi
jz      loc_100029bd
test    [ebp+arg_4], 20h
jz      short loc_10002912
call    sub_100029ef
or      eax, eax
jz      short loc_10002908
push    offset apechecksumfixo
call    addmsg
jmp     short loc_10002912
push    offset apechecksumfixf
call    addmsg
push    lpbaseaddress
call    unmapviewoffile
push    hobject
call    closehandle
push    0
push    offset distancetomovehigh
push    nnumberofbytestowrite
push    esi
call    setfilepointer
push    esi
call    setendoffile
push    esi
call    closehandle
push    [ebp+arg_0]
call    sub_10002368
push    dwfileattributes
push    offset src
call    setfileattributesa
test    [ebp+arg_4], 10h
jz      short loc_100029bd
push    0
push    82h
push    3
push    0
push    0
push    0c0000000h
push    offset src
call    createfilea
mov     hfile, eax
cmp     eax, 0ffffffffh
jz      short loc_100029bd
push    offset lastwritetime
push    offset lastaccesstime
push    offset creationtime
push    hfile
call    setfiletime
push    hfile
call    closehandle
push    offset arestoreorigina
call    addmsg
popa
leave
retn    8
pusha
cmp     hfile, 0
jz      short loc_100029ed
push    lpbaseaddress
call    unmapviewoffile
push    hobject
call    closehandle
push    hfile
call    closehandle
popa
retn
push    ebp
mov     ebp, esp
add     esp, 0fffffff4h
push    ebx
mov     [ebp+var_c], 0
push    offset libfilename
call    loadlibrarya
or      eax, eax
jz      short loc_10002a4d
mov     ebx, eax
push    offset achecksummapped
push    ebx
call    getprocaddress
or      eax, eax
jz      short loc_10002a47
mov     edx, eax
lea     eax, [ebp+var_8]
push    eax
lea     eax, [ebp+var_4]
push    eax
push    nnumberofbytestowrite
push    lpbaseaddress
call    edx
or      eax, eax
jz      short loc_10002a47
mov     edx, eax
mov     eax, [ebp+var_8]
mov     [edx+58h], eax
mov     [ebp+var_c], 1
push    ebx
call    closehandle
mov     eax, [ebp+var_c]
pop     ebx
leave
retn
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
pusha
mov     edi, [ebp+arg_0]
add     edi, 9
xor     eax, eax
xor     ecx, ecx
dec     ecx
xor     edx, edx
inc     edx
jmp     short loc_10002a6d
repne scasb
inc     edx
cmp     edx, [ebp+arg_4]
jnz     short loc_10002a6a
mov     [ebp+var_4], edi
popa
mov     eax, [ebp+var_4]
leave
retn    8
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
pusha
mov     [ebp+var_1], 0
push    1
push    8
push    hinstance
call    sub_10001460
or      eax, eax
jz      short loc_10002ad1
mov     esi, eax
push    offset string1
push    400h
call    gettemppatha
push    offset abassmoddll_0
push    offset string1
call    lstrcata
mov     ecx, [esi+1]
lea     eax, [esi+5]
push    ecx
push    eax
push    offset string1
call    write_disk_file
mov     [ebp+var_1], 1
popa
movzx   eax, [ebp+var_1]
leave
retn
push    ebp
mov     ebp, esp
push    1
push    hinstance
call    loadcursora
or      eax, eax
jz      short locret_10002af7
push    eax
push    0fffffff4h
push    [ebp+hwnd]
call    setclasslonga
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0ffffffd0h
push    esi
push    edi
lea     esi, [ebp+rect]
lea     edi, [ebp+rcsrc2]
push    [ebp+niddlgitem]
push    [ebp+hdlg]
call    getdlgitem
push    esi
push    eax
call    getwindowrect
push    [ebp+arg_8]
push    [ebp+hdlg]
call    getdlgitem
push    edi
push    eax
call    getwindowrect
push    edi
push    esi
lea     eax, [ebp+rcdst]
push    eax
call    intersectrect
pop     edi
pop     esi
leave
retn    0ch
mov     edi, edi
push    ebp
mov     ebp, esp
add     esp, 0ffffffe8h
push    ebx
mov     eax, [ebp+msg]
cmp     eax, 138h
jnz     loc_10002be5
cmp     dword_1000d8b2, 0
jnz     short loc_10002b7e
cmp     byte_1000e537, 1
jnz     short loc_10002b6e
mov     eax, color
jmp     short loc_10002b73
mov     eax, 0
push    eax
push    [ebp+hdc]
call    settextcolor
jmp     short loc_10002b9c
cmp     byte_1000e537, 1
jnz     short loc_10002b8e
mov     eax, color
jmp     short loc_10002b93
mov     eax, 0ff0000h
push    eax
push    [ebp+hdc]
call    settextcolor
push    1
push    [ebp+hdc]
call    setbkmode
cmp     byte_1000e537, 1
jnz     short loc_10002bce
cmp     dword_1000e93c, 0ffffffffh
jz      short loc_10002bc5
push    dword_1000e93c
call    createsolidbrush
jmp     short loc_10002bdb
push    5
call    getstockobject
jmp     short loc_10002bdb
push    4
call    getsyscolor
push    eax
call    createsolidbrush
pop     ebx
leave
retn    10h
jmp     loc_10002ccb
cmp     eax, 200h
jnz     loc_10002c90
mov     eax, [ebp+hwnd]
cmp     eax, dword_1000d8ae
jnz     loc_10002ccb
push    [ebp+hwnd]
call    getparent
mov     ebx, eax
call    getactivewindow
cmp     eax, ebx
jnz     short loc_10002c87
lea     eax, [ebp+point]
push    eax
call    getcursorpos
lea     eax, [ebp+rect]
push    eax
push    [ebp+hwnd]
call    getwindowrect
push    [ebp+point.y]
push    [ebp+point.x]
lea     eax, [ebp+rect]
push    eax
call    ptinrect
or      eax, eax
jz      short loc_10002c63
call    getcapture
or      eax, eax
jnz     short loc_10002c87
push    [ebp+hwnd]
call    setcapture
mov     dword_1000d8b2, 1
push    0
push    0
push    [ebp+hwnd]
call    invalidaterect
jmp     short loc_10002c87
call    getcapture
or      eax, eax
jz      short loc_10002c87
call    releasecapture
mov     dword_1000d8b2, 0
push    0
push    0
push    [ebp+hwnd]
call    invalidaterect
xor     eax, eax
pop     ebx
leave
retn    10h
jmp     short loc_10002ccb
cmp     eax, 202h
jnz     short loc_10002ccb
mov     eax, [ebp+hwnd]
cmp     eax, dword_1000d8ae
jnz     short loc_10002ccb
push    3
push    0
push    0
push    lpfile
push    offset operation
push    0
call    shellexecutea
mov     dword_1000d8b2, 0
xor     eax, eax
pop     ebx
leave
retn    10h
push    [ebp+lparam]
push    [ebp+hdc]
push    [ebp+msg]
push    [ebp+hwnd]
push    lpprevwndfunc
call    callwindowproca
pop     ebx
leave
retn    10h
mov     edi, edi
push    ebp
mov     ebp, esp
mov     eax, [ebp+msg]
cmp     eax, 102h
jz      short loc_10002d4f
cmp     eax, 100h
jz      short loc_10002d4f
cmp     eax, 101h
jz      short loc_10002d4f
cmp     eax, 115h
jz      short loc_10002d4f
cmp     eax, 114h
jz      short loc_10002d4f
cmp     eax, 202h
jz      short loc_10002d4f
cmp     eax, 205h
jz      short loc_10002d4f
cmp     eax, 201h
jz      short loc_10002d4f
cmp     eax, 204h
jz      short loc_10002d4f
cmp     eax, 114h
jz      short loc_10002d4f
cmp     eax, 115h
jz      short loc_10002d4f
cmp     eax, 0ch
jz      short loc_10002d4f
cmp     eax, 20ah
jnz     short loc_10002d95
push    [ebp+hwnd]
call    getdlgctrlid
cmp     eax, 6ah
jnz     short loc_10002d63
mov     eax, dword_1000e52f
jmp     short loc_10002d6d
cmp     eax, 6fh
jnz     short loc_10002d6d
mov     eax, dword_1000e533
push    [ebp+lparam]
push    [ebp+wparam]
push    [ebp+msg]
push    [ebp+hwnd]
push    eax
call    callwindowproca
push    [ebp+hwnd]
call    getparent
push    0
push    0
push    eax
call    invalidaterect
leave
retn    10h
push    [ebp+hwnd]
call    getdlgctrlid
cmp     eax, 6ah
jnz     short loc_10002da9
mov     eax, dword_1000e52f
jmp     short loc_10002db3
cmp     eax, 6fh
jnz     short loc_10002db3
mov     eax, dword_1000e533
push    [ebp+lparam]
push    [ebp+wparam]
push    [ebp+msg]
push    [ebp+hwnd]
push    eax
call    callwindowproca
leave
retn    10h
push    ebp
mov     ebp, esp
add     esp, 0fffffc00h
push    ebx
push    esi
push    edi
mov     eax, [ebp+msg]
cmp     eax, 110h
jnz     loc_10003298
push    [ebp+hdlg]
pop     hdlg
push    6fh
push    hdlg
call    getdlgitem
mov     hwnd, eax
push    6ah
push    hdlg
call    getdlgitem
mov     dword_1000d8c2, eax
push    hwnd
call    sub_10002ad8
push    400h
push    offset byte_1001463d
push    0bh
push    hinstance
call    loadstringa
mov     ecx, offset byte_1001463d
mov     al, [ecx]
mov     dl, [ecx+1]
cmp     al, 20h
jb      short loc_10002e55
cmp     al, 7fh
ja      short loc_10002e55
cmp     dl, 20h
jb      short loc_10002e55
cmp     dl, 7fh
jbe     short loc_10002e5e
mov     byte_1000d90b, 1
jmp     short loc_10002e65
mov     byte_1000d90b, 0
cmp     byte_1000d90b, 0
jnz     short loc_10002eab
push    offset acouriernew
push    offset lf.lffacename
call    lstrcpya
mov     lf.lfheight, 0eh
mov     lf.lfweight, 190h
push    offset lf
call    createfontindirecta
push    1
push    eax
push    30h
push    hwnd
call    sendmessagea
push    1f4h
push    0
call    loadicona
push    eax
push    1
push    80h
push    hdlg
call    sendmessagea
push    1
push    1
push    hinstance
call    sub_10001460
or      eax, eax
jz      loc_10002f68
mov     dword_1000d8aa, eax
mov     esi, eax
mov     edi, hdlg
push    1
push    esi
call    sub_10002a53
push    eax
push    edi
call    setwindowtexta
push    2
push    esi
call    sub_10002a53
push    eax
push    65h
push    edi
call    setdlgitemtexta
push    3
push    esi
call    sub_10002a53
push    eax
push    66h
push    edi
call    setdlgitemtexta
push    4
push    esi
call    sub_10002a53
mov     lpfile, eax
push    eax
push    67h
push    edi
call    setdlgitemtexta
push    5
push    esi
call    sub_10002a53
push    eax
push    68h
push    edi
call    setdlgitemtexta
push    7
push    esi
call    sub_10002a53
push    eax
push    6ah
push    edi
call    setdlgitemtexta
push    6
push    esi
call    sub_10002a53
push    eax
push    69h
push    edi
call    setdlgitemtexta
test    dword ptr [esi+1], 2
jz      short loc_10002f78
mov     eax, 0
jmp     short loc_10002f7d
mov     eax, 1
push    eax
push    6bh
push    hdlg
call    checkdlgbutton
push    6fh
push    6ah
push    [ebp+hdlg]
call    sub_10002afb
mov     byte_1000d902, al
cmp     al, 1
jnz     short loc_10002fad
push    0
push    hwnd
call    showwindow
push    1
push    2
push    hinstance
call    sub_10001460
or      eax, eax
jz      short loc_10002fd2
mov     esi, eax
call    sub_10002a7d
or      eax, eax
jz      short loc_10002fd2
inc     esi
push    esi
call    sub_10001fe3
call    sub_10005afe
push    1
push    0ah
push    hinstance
call    sub_10001460
or      eax, eax
jz      loc_10003081
mov     esi, eax
mov     byte_1000e537, 1
push    dword ptr [esi+1]
pop     dword_1000e938
push    dword ptr [esi+5]
pop     dword_1000e93c
push    dword ptr [esi+9]
pop     color
push    dword ptr [esi+0dh]
pop     dword_1000e944
push    dword ptr [esi+11h]
pop     dword_1000e948
push    dword ptr [esi+15h]
pop     dword_1000e94c
push    dword ptr [esi+19h]
pop     dword_1000e950
push    dword ptr [esi+1dh]
pop     dword_1000e954
push    dword ptr [esi+21h]
pop     dword_1000e958
cmp     dword_1000e954, 0ffffffffh
jz      short loc_10003081
cmp     dword_1000e958, 0ffffffffh
jz      short loc_10003081
push    6ch
push    hdlg
call    sub_10003c34
push    6dh
push    hdlg
call    sub_10003c34
push    6eh
push    hdlg
call    sub_10003c34
push    67h
push    hdlg
call    getdlgitem
mov     dword_1000d8ae, eax
push    offset sub_10002b40
push    0fffffffch
push    dword_1000d8ae
call    setwindowlonga
mov     lpprevwndfunc, eax
cmp     dword_1000e94c, 0ffffffffh
jnz     short loc_100030cf
push    6ah
push    [ebp+hdlg]
call    getdlgitem
push    offset sub_10002cf0
push    0fffffffch
push    eax
call    setwindowlonga
mov     dword_1000e52f, eax
cmp     dword_1000e944, 0ffffffffh
jnz     short loc_100030f4
push    6fh
push    [ebp+hdlg]
call    getdlgitem
push    offset sub_10002cf0
push    0fffffffch
push    eax
call    setwindowlonga
mov     dword_1000e533, eax
push    6ch
push    offset abtnpatchover
push    offset abtnpatchdown
push    offset abtnpatchup
push    [ebp+hdlg]
push    hinstance
call    sub_100016e0
mov     dword_1000d907, eax
push    6dh
push    offset abtnaboutover
push    offset abtnaboutdown
push    offset abtnaboutup
push    [ebp+hdlg]
push    hinstance
call    sub_100016e0
push    6eh
push    offset abtnexitover
push    offset abtnexitdown
push    offset abtnexitup
push    [ebp+hdlg]
push    hinstance
call    sub_100016e0
push    1
push    0fh
push    hinstance
call    sub_10001460
or      eax, eax
jz      short loc_1000316f
push    eax
call    sub_10002294
push    hdlg
call    sub_10002ad8
call    createpopupmenu
mov     hmenu, eax
mov     esi, eax
push    400h
push    offset newitem
push    0eh
push    hinstance
call    loadstringa
push    offset newitem
push    0c9h
push    0
push    esi
call    appendmenua
push    400h
push    offset byte_10014e3d
push    0fh
push    hinstance
call    loadstringa
push    offset byte_10014e3d
push    0cah
push    0
push    esi
call    appendmenua
push    2
push    hinstance
call    loadcursora
mov     ebx, eax
or      ebx, ebx
jz      short loc_1000320f
push    ebx
push    0fffffff4h
push    dword_1000d8ae
call    setclasslonga
push    6ch
push    hdlg
call    getdlgitem
push    ebx
push    0fffffff4h
push    eax
call    setclasslonga
mov     byte_1000d90c, 1
push    1
push    12h
push    hinstance
call    sub_10001460
or      eax, eax
jz      short loc_10003256
mov     eax, [eax+1]
or      eax, eax
jz      short loc_10003249
add     eax, 3e8h
push    0
push    eax
push    0
push    [ebp+hdlg]
call    settimer
mov     byte_1000d90c, 0
mov     eax, offset sub_10003b43
push    eax
call    sub_10002244
jmp     short loc_10003272
push    1
push    0bh
push    hinstance
call    sub_10001460
or      eax, eax
jz      short loc_10003272
push    eax
push    [ebp+hdlg]
call    sub_10003ae0
call    sub_10006089
call    sub_100038cc
push    hdlg
call    setfocus
mov     eax, 1
pop     edi
pop     esi
pop     ebx
leave
retn    10h
jmp     loc_10003677
cmp     eax, 113h
jnz     short loc_100032ab
mov     byte_1000d90c, 1
jmp     loc_10003677
cmp     eax, 111h
jnz     loc_10003372
mov     eax, [ebp+wparam]
cmp     ax, 6eh
jnz     short loc_100032c9
jmp     loc_100035f5
jmp     loc_10003677
cmp     ax, 6dh
jnz     short loc_10003320
cmp     dword_1000d8aa, 0
jz      loc_10003677
push    0
push    offset dialogfunc
push    hdlg
push    2
push    hinstance
call    dialogboxparama
cmp     eax, 0ffffffffh
jnz     short loc_1000331b
push    8
push    dword_1000d8aa
call    sub_10002a53
push    40h
push    offset caption
push    eax
push    hdlg
call    messageboxa
jmp     loc_10003677
cmp     ax, 6ch
jnz     short loc_10003330
call    sub_100062cd
jmp     loc_10003677
cmp     ax, 0c9h
jnz     short loc_10003340
call    sub_10003d1a
jmp     loc_10003677
cmp     ax, 0cah
jnz     loc_10003677
cmp     byte_1000d902, 1
jnz     short loc_1000336d
push    0
push    hwnd
call    showwindow
push    5
push    dword_1000d8c2
call    showwindow
jmp     loc_10003677
cmp     eax, 7bh
jnz     short loc_100033af
mov     eax, [ebp+wparam]
cmp     eax, hwnd
jnz     loc_10003677
mov     eax, [ebp+hwnd]
and     eax, 0ffffh
mov     ebx, [ebp+hwnd]
shr     ebx, 10h
push    0
push    [ebp+hdlg]
push    0
push    ebx
push    eax
push    0
push    hmenu
call    trackpopupmenu
jmp     loc_10003677
cmp     eax, 138h
jz      short loc_100033c8
cmp     eax, 133h
jz      short loc_100033c8
cmp     eax, 134h
jnz     loc_10003556
push    [ebp+hwnd]
call    getdlgctrlid
cmp     ax, 67h
jnz     short loc_100033ec
push    [ebp+hwnd]
push    [ebp+wparam]
push    [ebp+msg]
push    [ebp+hwnd]
call    sendmessagea
jmp     loc_1000354a
cmp     byte_1000e537, 1
jnz     loc_10003545
push    [ebp+hwnd]
call    getdlgctrlid
cmp     ax, 65h
jz      short loc_10003419
cmp     ax, 66h
jz      short loc_10003419
cmp     ax, 68h
jz      short loc_10003419
cmp     ax, 69h
jnz     short loc_10003464
push    color
push    [ebp+wparam]
call    settextcolor
cmp     dword_1000e93c, 0ffffffffh
jnz     short loc_10003446
push    1
push    [ebp+wparam]
call    setbkmode
push    5
call    getstockobject
jmp     loc_1000354a
push    dword_1000e93c
push    [ebp+wparam]
call    setbkcolor
push    dword_1000e93c
call    createsolidbrush
jmp     loc_1000354a
cmp     ax, 6ah
jnz     short loc_100034b5
push    dword_1000e950
push    [ebp+wparam]
call    settextcolor
cmp     dword_1000e94c, 0ffffffffh
jnz     short loc_10003497
push    1
push    [ebp+wparam]
call    setbkmode
push    5
call    getstockobject
jmp     loc_1000354a
push    dword_1000e94c
push    [ebp+wparam]
call    setbkcolor
push    dword_1000e94c
call    createsolidbrush
jmp     loc_1000354a
cmp     ax, 6fh
jnz     short loc_10003500
push    dword_1000e948
push    [ebp+wparam]
call    settextcolor
cmp     dword_1000e94c, 0ffffffffh
jnz     short loc_100034e5
push    1
push    [ebp+wparam]
call    setbkmode
push    5
call    getstockobject
jmp     short loc_1000354a
push    dword_1000e944
push    [ebp+wparam]
call    setbkcolor
push    dword_1000e944
call    createsolidbrush
jmp     short loc_1000354a
push    color
push    [ebp+wparam]
call    settextcolor
cmp     dword_1000e93c, 0ffffffffh
jnz     short loc_1000352a
push    1
push    [ebp+wparam]
call    setbkmode
push    5
call    getstockobject
jmp     short loc_10003543
push    dword_1000e938
push    [ebp+wparam]
call    setbkcolor
push    dword_1000e938
call    createsolidbrush
jmp     short loc_1000354a
mov     eax, 0
pop     edi
pop     esi
pop     ebx
leave
retn    10h
jmp     loc_10003677
cmp     eax, 136h
jnz     short loc_10003584
cmp     byte_1000e537, 1
jnz     short loc_10003573
push    dword_1000e938
call    createsolidbrush
jmp     short loc_10003578
mov     eax, 0
pop     edi
pop     esi
pop     ebx
leave
retn    10h
jmp     loc_10003677
cmp     eax, 2bh
jnz     short loc_100035a0
push    [ebp+hwnd]
push    [ebp+hdlg]
call    sub_10003c60
pop     edi
pop     esi
pop     ebx
leave
retn    10h
jmp     loc_10003677
cmp     eax, 200h
jnz     short loc_100035cd
cmp     [ebp+wparam], 1
jnz     loc_10003677
push    0
push    0f012h
push    112h
push    hdlg
call    sendmessagea
jmp     loc_10003677
cmp     eax, 205h
jnz     short loc_100035f0
cmp     byte_1000d90c, 1
jnz     loc_10003677
push    6
push    [ebp+hdlg]
call    showwindow
jmp     loc_10003677
cmp     eax, 10h
jnz     short loc_1000366b
push    1
push    12h
push    hinstance
call    sub_10001460
or      eax, eax
jz      short loc_1000362e
mov     ebx, eax
push    offset byte_1000f15f
call    sub_10001bb2
mov     ecx, [ebx+5]
or      ecx, ecx
jz      short loc_1000362e
push    1
push    dword ptr [ebx+9]
push    dword ptr [ebx+5]
push    hdlg
call    sub_10003b6f
call    sub_100020bd
push    offset string1
call    deletefilea
call    sub_10003ac2
push    hmodule
call    freelibrary
push    offset byte_1001223d
call    deletefilea
call    sub_100061bc
push    0
push    hdlg
call    enddialog
jmp     short loc_10003677
mov     eax, 0
pop     edi
pop     esi
pop     ebx
leave
retn    10h
mov     eax, 1
pop     edi
pop     esi
pop     ebx
leave
retn    10h
push    ebp
mov     ebp, esp
push    ebx
push    esi
push    edi
mov     eax, [ebp+arg_4]
cmp     eax, 110h
jnz     loc_10003757
push    0ffffffech
push    hdlg
call    getwindowlonga
test    eax, 8
jnz     short loc_100036cc
push    3
push    0
push    0
push    0
push    0
push    0fffffffeh
push    [ebp+hwnd]
call    setwindowpos
push    8
push    dword_1000d8aa
call    sub_10002a53
push    eax
push    65h
push    [ebp+hwnd]
call    setdlgitemtexta
cmp     byte_1000e537, 1
jnz     short loc_10003709
cmp     dword_1000e954, 0ffffffffh
jz      short loc_10003709
cmp     dword_1000e958, 0ffffffffh
jz      short loc_10003709
push    66h
push    [ebp+hwnd]
call    sub_10003c34
push    66h
push    offset abtnaboutokover
push    offset abtnaboutokdown
push    offset abtnaboutokup
push    [ebp+hwnd]
push    hinstance
call    sub_100016e0
push    1
push    0bh
push    hinstance
call    sub_10001460
or      eax, eax
jz      short loc_10003744
push    eax
push    [ebp+hwnd]
call    sub_10003ae0
push    hdlg
push    [ebp+hwnd]
call    sub_10007260
jmp     loc_100038c0
cmp     eax, 111h
jnz     short loc_10003774
mov     eax, [ebp+arg_8]
cmp     eax, 66h
jnz     loc_100038c0
jmp     loc_100038a8
jmp     loc_100038c0
cmp     eax, 138h
jz      short loc_10003786
cmp     eax, 133h
jnz     loc_1000383c
cmp     byte_1000e537, 1
jnz     loc_1000382b
push    [ebp+arg_c]
call    getdlgctrlid
cmp     ax, 65h
jnz     short loc_100037e6
push    color
push    [ebp+arg_8]
call    settextcolor
cmp     dword_1000e93c, 0ffffffffh
jnz     short loc_100037cb
push    1
push    [ebp+arg_8]
call    setbkmode
push    5
call    getstockobject
jmp     short loc_10003830
push    dword_1000e93c
push    [ebp+arg_8]
call    setbkcolor
push    dword_1000e93c
call    createsolidbrush
jmp     short loc_10003830
push    color
push    [ebp+arg_8]
call    settextcolor
cmp     dword_1000e93c, 0ffffffffh
jnz     short loc_10003810
push    1
push    [ebp+arg_8]
call    setbkmode
push    5
call    getstockobject
jmp     short loc_10003829
push    dword_1000e938
push    [ebp+arg_8]
call    setbkcolor
push    dword_1000e938
call    createsolidbrush
jmp     short loc_10003830
mov     eax, 0
pop     edi
pop     esi
pop     ebx
leave
retn    10h
jmp     loc_100038c0
cmp     eax, 136h
jnz     short loc_10003867
cmp     byte_1000e537, 1
jnz     short loc_10003859
push    dword_1000e938
call    createsolidbrush
jmp     short loc_1000385e
mov     eax, 0
pop     edi
pop     esi
pop     ebx
leave
retn    10h
jmp     short loc_100038c0
cmp     eax, 2bh
jnz     short loc_10003880
push    [ebp+arg_c]
push    [ebp+hwnd]
call    sub_10003c60
pop     edi
pop     esi
pop     ebx
leave
retn    10h
jmp     short loc_100038c0
cmp     eax, 200h
jnz     short loc_100038a3
cmp     [ebp+arg_8], 1
jnz     short loc_100038c0
push    0
push    0f012h
push    112h
push    [ebp+hwnd]
call    sendmessagea
jmp     short loc_100038c0
cmp     eax, 10h
jnz     short loc_100038b4
push    0
push    [ebp+hwnd]
call    enddialog
jmp     short loc_100038c0
mov     eax, 0
pop     edi
pop     esi
pop     ebx
leave
retn    10h
mov     eax, 1
pop     edi
pop     esi
pop     ebx
leave
retn    10h
push    ebp
mov     ebp, esp
add     esp, 0fffffba0h
push    esi
push    edi
push    ebx
push    70h
push    hdlg
call    getdlgitem
or      eax, eax
jz      loc_10003a8a
mov     [ebp+hwnd], eax
push    0
push    [ebp+hwnd]
call    showwindow
mov     esi, offset byte_1000f15f
push    9
push    dword_1000d8aa
call    sub_10002a53
mov     [esi+4], eax
push    eax
call    sub_10006c90
or      eax, eax
jz      loc_10003a8a
push    hdlg
pop     dword ptr [esi]
lea     ebx, [ebp+rect]
push    ebx
push    [ebp+hwnd]
call    getwindowrect
lea     edi, [ebp+var_424]
push    edi
push    hdlg
call    getwindowrect
mov     eax, [ebx]
sub     eax, [edi]
mov     [esi+8], eax
mov     eax, [ebx+8]
sub     eax, [ebx]
mov     [esi+10h], eax
mov     eax, [ebx+4]
sub     eax, [edi+4]
mov     [esi+0ch], eax
lea     eax, [esi+8]
lea     ecx, [esi+0ch]
push    ecx
push    eax
push    hdlg
call    sub_100018b0
push    1
push    12h
push    hinstance
call    sub_10001460
or      eax, eax
jz      short loc_10003990
mov     eax, [eax+1]
mov     [esi+1dh], eax
push    1
push    0bh
push    hinstance
call    sub_10001460
or      eax, eax
jz      short loc_100039ab
mov     eax, [eax+1]
jmp     short loc_100039bd
cmp     dword ptr [esi+1dh], 0
jz      short loc_100039b8
mov     eax, 0feh
jmp     short loc_100039bd
mov     eax, 0ffh
mov     [esi+1ch], al
lea     ebx, [ebp+lf]
push    3ch
push    ebx
call    rtlzeromemory
mov     dword ptr [ebx], 7
mov     byte ptr [ebx+17h], 1
mov     byte ptr [ebx+1ah], 4
push    offset amssansserif
lea     eax, [ebx+1ch]
push    eax
call    lstrcpya
push    1
push    13h
push    hinstance
call    sub_10001460
or      eax, eax
jz      short loc_10003a7b
mov     edi, eax
push    dword ptr [edi+11h]
pop     dword ptr [esi+18h]
push    dword ptr [edi+5]
pop     dword ptr [ebx]
test    dword ptr [edi+9], 1
jz      short loc_10003a1a
mov     dword ptr [ebx+10h], 2bch
lea     eax, [ebp+buffer]
push    eax
push    400h
call    gettemppatha
lea     edx, [edi+15h]
push    edx
lea     eax, [ebp+buffer]
push    eax
call    lstrcata
lea     edx, [edi+95h]
push    edx
lea     eax, [ebp+buffer]
push    eax
call    lstrcata
lea     edx, [edi+9bh]
mov     ecx, [edi+0dh]
lea     eax, [ebp+buffer]
push    eax
push    ecx
push    edx
call    sub_10003a8f
lea     edx, [edi+15h]
cmp     byte ptr [edx], 0
jnz     short loc_10003a71
xor     ebx, ebx
jmp     short loc_10003a7b
push    edx
lea     eax, [ebx+1ch]
push    eax
call    lstrcpya
push    ebx
call    createfontindirecta
mov     [esi+14h], eax
push    esi
call    sub_10001b8b
pop     ebx
pop     edi
pop     esi
leave
retn
push    ebp
mov     ebp, esp
push    [ebp+nnumberofbytestowrite]
push    [ebp+lpbuffer]
push    [ebp+lpstring2]
call    write_disk_file
or      eax, eax
jz      short locret_10003abe
push    [ebp+lpstring2]
push    offset byte_1001523d
call    lstrcpya
push    [ebp+lpstring2]
call    addfontresourcea
mov     eax, 1
leave
retn    0ch
cmp     byte_1001523d, 0
jz      short locret_10003adf
push    offset byte_1001523d
call    removefontresourcea
push    offset byte_1001523d
call    deletefilea
retn
push    ebp
mov     ebp, esp
mov     eax, [ebp+arg_4]
or      eax, eax
jz      short locret_10003af5
push    dword ptr [eax+1]
push    [ebp+hwnd]
call    sub_10003af9
leave
retn    8
push    ebp
mov     ebp, esp
pusha
push    offset auser32dll_1
call    getmodulehandlea
push    offset asetlayeredwind_0
push    eax
call    getprocaddress
or      eax, eax
jz      short loc_10003b3e
mov     edi, eax
push    0ffffffech
push    [ebp+hwnd]
call    getwindowlonga
or      eax, 80000h
push    eax
push    0ffffffech
push    [ebp+hwnd]
call    setwindowlonga
push    2
push    [ebp+arg_4]
push    0
push    [ebp+hwnd]
call    edi
popa
leave
retn    8
push    1
push    12h
push    hinstance
call    sub_10001460
or      eax, eax
jz      short locret_10003b6e
mov     ecx, [eax+1]
or      ecx, ecx
jz      short locret_10003b6e
push    0
push    dword ptr [eax+9]
push    ecx
push    hdlg
call    sub_10003b6f
retn
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
push    esi
push    edi
push    ebx
push    offset auser32dll_2
call    getmodulehandlea
push    offset asetlayeredwind_1
push    eax
call    getprocaddress
or      eax, eax
jz      loc_10003c2d
mov     edi, eax
push    0ffffffech
push    [ebp+hwnd]
call    getwindowlonga
or      eax, 80000h
push    eax
push    0ffffffech
push    [ebp+hwnd]
call    setwindowlonga
xor     edx, edx
mov     eax, [ebp+arg_8]
mov     ecx, 4
div     ecx
or      edx, edx
jz      short loc_10003bc4
add     eax, 1
mov     [ebp+var_4], eax
cmp     [ebp+arg_4], 0
jz      short loc_10003c16
xor     edx, edx
mov     ecx, eax
mov     eax, [ebp+arg_4]
div     ecx
mov     esi, eax
cmp     [ebp+arg_c], 0
jnz     short loc_10003be2
xor     ebx, ebx
jmp     short loc_10003be5
mov     ebx, [ebp+arg_8]
jmp     short loc_10003c10
push    2
push    ebx
push    0
push    [ebp+hwnd]
call    edi
cmp     [ebp+arg_c], 0
jnz     short loc_10003bfc
add     ebx, 4
jmp     short loc_10003bff
sub     ebx, 4
push    esi
call    sleep
push    [ebp+hwnd]
call    updatewindow
dec     [ebp+var_4]
cmp     [ebp+var_4], 0
jnz     short loc_10003be7
cmp     [ebp+arg_c], 0
jnz     short loc_10003c21
mov     eax, [ebp+arg_8]
jmp     short loc_10003c23
xor     eax, eax
push    2
push    eax
push    0
push    [ebp+hwnd]
call    edi
pop     ebx
pop     edi
pop     esi
leave
retn    10h
push    ebp
mov     ebp, esp
pusha
push    [ebp+niddlgitem]
push    [ebp+hdlg]
call    getdlgitem
push    1
push    0bh
push    0f4h
push    eax
call    sendmessagea
popa
leave
retn    8
mov     edi, edi
push    ebp
mov     ebp, esp
cmp     byte_1000e537, 1
jnz     loc_10003d14
mov     esi, [ebp+arg_4]
push    dword_1000e954
call    createsolidbrush
push    eax
push    dword ptr [esi+18h]
call    selectobject
push    0
push    0
push    dword ptr [esi+28h]
push    dword ptr [esi+24h]
push    dword ptr [esi+20h]
push    dword ptr [esi+1ch]
push    dword ptr [esi+18h]
call    roundrect
test    dword ptr [esi+10h], 1
jz      short loc_10003cb5
push    1
push    1
lea     eax, [esi+1ch]
push    eax
call    offsetrect
push    400h
push    offset string
push    dword ptr [esi+4]
push    [ebp+hdlg]
call    getdlgitemtexta
push    1
push    dword ptr [esi+18h]
call    setbkmode
push    dword_1000e958
push    dword ptr [esi+18h]
call    settextcolor
push    25h
lea     eax, [esi+1ch]
push    eax
push    0ffffffffh
push    offset string
push    dword ptr [esi+18h]
call    drawtexta
test    dword ptr [esi+10h], 1
jz      short loc_10003d0d
push    0ffffffffh
push    0ffffffffh
lea     eax, [esi+1ch]
push    eax
call    offsetrect
mov     eax, 1
jmp     short locret_10003d16
xor     eax, eax
leave
retn    8
pusha
cmp     hwnd, 0
jz      short loc_10003d9c
push    0
push    0
push    18bh
push    hwnd
call    sendmessagea
cmp     eax, 0
jbe     short loc_10003d9c
mov     ebx, eax
push    4
push    1000h
push    50000h
push    0
call    virtualalloc
mov     edi, eax
push    edi
xor     ecx, ecx
jmp     short loc_10003d81
push    ecx
push    edi
push    ecx
push    189h
push    hwnd
call    sendmessagea
push    offset asc_1000d338
push    edi
call    lstrcata
jmp     short loc_10003d7a
inc     edi
cmp     byte ptr [edi], 0
jnz     short loc_10003d79
pop     ecx
inc     ecx
cmp     ecx, ebx
jnz     short loc_10003d59
pop     edi
push    edi
call    sub_100071e0
push    4000h
push    50000h
push    edi
call    virtualfree
popa
retn
mov     edi, edi
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
push    esi
push    edi
push    ebx
mov     [ebp+var_4], esp
mov     esi, [ebp+arg_0]
mov     edi, [ebp+arg_4]
push    1000h
push    edi
call    rtlzeromemory
jmp     short loc_10003e09
cmp     byte ptr [esi], 5ch
jnz     short loc_10003e08
inc     esi
mov     al, [esi]
cmp     al, 5ch
jnz     short loc_10003dce
movsb
jmp     short loc_10003e09
cmp     al, 31h
jb      short loc_10003e09
cmp     al, 39h
ja      short loc_10003e09
sub     al, 30h
and     eax, 0ffh
mov     ecx, eax
mov     eax, edi
sub     eax, [ebp+arg_4]
mov     edx, 1000h
sub     edx, eax
push    edx
push    edi
push    ecx
push    [ebp+arg_8]
push    [ebp+arg_c]
push    [ebp+arg_10]
call    dword_10012235
push    edi
call    sub_10006c90
add     edi, eax
inc     esi
jmp     short loc_10003e09
movsb
cmp     byte ptr [esi], 0
jnz     short loc_10003dbf
mov     esp, [ebp+var_4]
pop     ebx
pop     edi
pop     esi
leave
retn    14h
push    ebp
mov     ebp, esp
add     esp, 0ffffffdch
push    esi
push    edi
push    ebx
test    [ebp+arg_8], 1000h
jz      loc_10003ee4
mov     [ebp+var_1c], 0ffffffffh
cmp     hmodule, 0
jz      loc_10003edc
test    [ebp+arg_8], 1
jz      short loc_10003e5a
mov     ebx, 2
jmp     short loc_10003e5f
mov     ebx, 3
mov     [ebp+var_24], esp
push    0
lea     eax, [ebp+var_18]
push    eax
lea     eax, [ebp+var_14]
push    eax
push    ebx
push    [ebp+arg_0]
call    dword_1001222d
or      eax, eax
jnz     short loc_10003e86
push    offset apcrecompileerr
call    addmsg
jmp     short loc_10003ed9
mov     [ebp+var_20], eax
push    78h
push    [ebp+arg_10]
call    rtlzeromemory
push    [ebp+arg_4]
call    sub_10006c90
mov     ecx, eax
push    1eh
push    [ebp+arg_10]
push    0
push    0
push    ecx
push    [ebp+arg_4]
push    0
push    [ebp+var_20]
call    dword_10012231
mov     [ebp+var_1c], eax
cmp     eax, 0
jl      short loc_10003ed9
mov     edx, [ebp+arg_10]
mov     eax, [ebp+arg_14]
or      eax, eax
jz      short loc_10003ecb
push    dword ptr [edx]
pop     dword ptr [eax]
mov     ecx, [edx+4]
sub     ecx, [edx]
mov     edx, [ebp+arg_c]
or      edx, edx
jz      short loc_10003ed9
mov     [edx], ecx
mov     esp, [ebp+var_24]
mov     eax, [ebp+var_1c]
jmp     loc_10003fd6
mov     [ebp+var_d], 0
mov     esi, [ebp+arg_0]
mov     edi, [ebp+arg_4]
xor     eax, eax
test    [ebp+arg_8], 400h
jz      short loc_10003f16
jmp     short loc_10003f00
mov     [ebp+var_d], 1
inc     esi
cmp     byte ptr [esi], 2ah
jz      short loc_10003efb
jmp     short loc_10003f08
inc     eax
cmp     byte ptr [eax+esi], 2ah
jz      short loc_10003f3b
cmp     byte ptr [eax+esi], 0
jnz     short loc_10003f07
jmp     short loc_10003f3b
test    [ebp+arg_8], 800h
jz      short loc_10003f35
push    edi
call    sub_10006c90
mov     ebx, eax
push    esi
call    sub_10006c90
cmp     ebx, eax
jz      short loc_10003f3b
jmp     short loc_10003faf
jmp     short loc_10003f3b
push    esi
call    sub_10006c90
mov     [ebp+var_8], eax
mov     ecx, [ebp+arg_c]
or      ecx, ecx
jz      short loc_10003f47
mov     [ecx], eax
mov     [ebp+var_c], 1
jmp     short loc_10003fbe
push    [ebp+arg_8]
push    [ebp+var_8]
push    esi
push    edi
push    1
call    sub_10003fe0
or      eax, eax
jz      short loc_10003faf
cmp     [ebp+var_d], 0
jnz     short loc_10003f76
cmp     [ebp+var_c], 1
jnz     short loc_10003f76
cmp     eax, 1
jbe     short loc_10003f76
jmp     short loc_10003faf
dec     eax
add     edi, eax
add     edi, [ebp+var_8]
mov     ecx, [ebp+arg_c]
or      ecx, ecx
jz      short loc_10003f85
add     [ecx], eax
add     esi, [ebp+var_8]
cmp     byte ptr [esi], 0
jnz     short loc_10003f8f
jmp     short loc_10003fc4
xor     eax, eax
inc     esi
jmp     short loc_10003f95
inc     eax
cmp     byte ptr [eax+esi], 2ah
jz      short loc_10003fa1
cmp     byte ptr [eax+esi], 0
jnz     short loc_10003f94
mov     [ebp+var_8], eax
mov     ecx, [ebp+arg_c]
or      ecx, ecx
jz      short loc_10003fbb
add     [ecx], eax
jmp     short loc_10003fbb
mov     eax, 0ffffffffh
pop     ebx
pop     edi
pop     esi
leave
retn    18h
inc     [ebp+var_c]
cmp     [ebp+var_8], 0
jnz     short loc_10003f50
mov     eax, [ebp+arg_14]
or      eax, eax
jz      short loc_10003fd1
mov     dword ptr [eax], 0
mov     eax, 1
pop     ebx
pop     edi
pop     esi
leave
retn    18h
push    ebp
mov     ebp, esp
add     esp, 0fffffff8h
push    esi
push    ebx
test    [ebp+arg_10], 400h
jz      short loc_1000401b
mov     esi, [ebp+arg_4]
xor     ebx, ebx
xor     eax, eax
jmp     short loc_10004010
cmp     byte ptr [eax+esi], 0dh
jnz     short loc_1000400f
cmp     byte ptr [eax+esi+1], 0ah
jnz     short loc_1000400f
inc     ebx
cmp     ebx, 8
jb      short loc_1000400f
jmp     short loc_10004016
inc     eax
cmp     byte ptr [eax+esi], 0
jnz     short loc_10003ffa
mov     [ebp+var_4], eax
jmp     short loc_10004021
push    [ebp+arg_c]
pop     [ebp+var_4]
mov     eax, [ebp+arg_c]
cmp     eax, [ebp+var_4]
ja      short loc_10004067
mov     eax, [ebp+arg_0]
cmp     eax, [ebp+var_4]
ja      short loc_10004067
mov     ebx, [ebp+var_4]
sub     ebx, [ebp+arg_0]
inc     ebx
mov     esi, [ebp+arg_4]
add     esi, [ebp+arg_0]
dec     esi
jmp     short loc_10004062
push    [ebp+arg_10]
push    [ebp+arg_c]
push    [ebp+arg_8]
push    esi
call    sub_10004070
or      eax, eax
jnz     short loc_10004060
mov     eax, [ebp+var_4]
sub     eax, ebx
inc     eax
pop     ebx
pop     esi
leave
retn    14h
inc     esi
dec     ebx
cmp     ebx, [ebp+arg_c]
jnb     short loc_10004041
xor     eax, eax
pop     ebx
pop     esi
leave
retn    14h
push    ebp
mov     ebp, esp
push    esi
push    edi
mov     edi, [ebp+arg_0]
mov     esi, [ebp+arg_4]
xor     ecx, ecx
jmp     short loc_100040c2
mov     al, [ecx+esi]
test    [ebp+arg_c], 200h
jz      short loc_10004091
cmp     al, 3fh
jnz     short loc_10004091
jmp     short loc_100040c1
mov     dl, [ecx+edi]
test    [ebp+arg_c], 1
jnz     short loc_100040b4
cmp     al, 41h
jb      short loc_100040a7
cmp     al, 5ah
ja      short loc_100040a7
add     al, 20h
cmp     dl, 41h
jb      short loc_100040b4
cmp     dl, 5ah
ja      short loc_100040b4
add     dl, 20h
cmp     al, dl
jz      short loc_100040c1
xor     eax, eax
dec     eax
pop     edi
pop     esi
leave
retn    10h
inc     ecx
cmp     ecx, [ebp+arg_8]
jnz     short loc_1000407f
xor     eax, eax
pop     edi
pop     esi
leave
retn    10h
push    offset akernel32dll_1
call    getmodulehandlea
push    offset awow64disablewo
push    eax
call    getprocaddress
or      eax, eax
jz      short locret_100040f9
push    offset dword_1000d90d
call    eax
push    offset awow64filesyste
call    addmsg
retn
push    offset akernel32dll_2
call    getmodulehandlea
push    offset awow64revertwow
push    eax
call    getprocaddress
or      eax, eax
jz      short locret_10004125
push    dword_1000d90d
call    eax
push    offset awow64filesyste_0
call    addmsg
retn
push    esi
push    edi
push    ebx
mov     versioninformation.dwosversioninfosize, 94h
push    offset versioninformation
call    getversionexa
push    offset akernel32dll_0
call    getmodulehandlea
push    offset aattachconsole
push    eax
call    getprocaddress
or      eax, eax
jz      short loc_1000415a
push    0ffffffffh
call    eax
call    getcommandlinea
mov     esi, eax
push    offset asc_1000d413
call    sub_10006d14
push    0
push    offset ahelp
push    esi
call    sub_10007040
or      al, al
jz      loc_1000424e
push    offset asc_1000d41d
call    sub_10006d14
push    offset asc_1000d462
call    sub_10006d14
push    offset adiablo2oo2suni
call    sub_10006d14
push    offset asc_1000d497
call    sub_10006d14
push    offset asc_1000d49c
call    sub_10006d14
push    offset ahelpthishelpme
call    sub_10006d14
push    offset asc_1000d4c8
call    sub_10006d14
push    offset asilentnowindow
call    sub_10006d14
push    offset asc_1000d4fd
call    sub_10006d14
push    offset aoverwriteoverw
call    sub_10006d14
push    offset asc_1000d532
call    sub_10006d14
push    offset aduringfileatta
call    sub_10006d14
push    offset asc_1000d56f
call    sub_10006d14
push    offset abackupmakeback
call    sub_10006d14
push    offset asc_1000d5b8
call    sub_10006d14
push    offset astartupworkdir
call    sub_10006d14
push    offset asc_1000d5fb
call    sub_10006d14
push    offset asetvarcontents
call    sub_10006d14
push    offset asc_1000d637
call    sub_10006d14
push    offset asc_1000d63c
call    sub_10006d14
pop     ebx
pop     edi
pop     esi
retn
jmp     short loc_10004262
push    offset ahelpshowhelpme
call    sub_10006d14
push    offset asc_1000d668
call    sub_10006d14
push    0
push    offset asilent
push    esi
call    sub_10007040
mov     byte_1000e95c, al
push    0
push    offset abackup
push    esi
call    sub_10007040
mov     byte_1000e95d, al
push    0
push    offset aoverwrite
push    esi
call    sub_10007040
mov     byte_1000e95e, al
push    offset src
push    offset astartupworkdir_0
push    esi
call    sub_10007040
cmp     al, 1
jnz     short loc_100042c5
mov     esi, offset dst
push    400h
push    esi
push    offset src
call    expandenvironmentstringsa
mov     eax, esi
jmp     short loc_100042c7
xor     eax, eax
push    eax
call    sub_100070b0
push    offset src
push    offset asetvar
push    esi
call    sub_10007040
cmp     al, 1
jnz     short loc_10004304
push    400h
push    offset value
push    offset src
call    expandenvironmentstringsa
push    offset value
push    offset adup2cmdvar
call    setenvironmentvariablea
cmp     byte_1000e95c, 0
jnz     short loc_10004325
push    0
push    offset sub_10002dd0
push    0
push    1
push    hinstance
call    dialogboxparama
jmp     short loc_10004334
call    sub_10005afe
call    sub_10006089
call    sub_100062cd
pop     ebx
pop     edi
pop     esi
retn
push    ebp
mov     ebp, esp
add     esp, 0fffffff4h
push    esi
push    edi
push    ebx
mov     esi, [ebp+arg_0]
mov     [ebp+var_4], 0
mov     [ebp+var_5], 1
test    dword ptr [esi+1eh], 8
jz      short loc_1000435d
call    sub_100040cf
push    400h
push    offset byte_1001563d
push    2
push    hinstance
call    loadstringa
push    offset byte_1001563d
call    addmsg
lea     eax, [esi+22h]
push    dword ptr [esi+1eh]
pop     [ebp+var_c]
push    [ebp+var_c]
push    dword ptr [esi+6]
push    eax
call    loadfilemapping
or      eax, eax
jnz     short loc_100043a0
mov     [ebp+var_5], 0
jmp     loc_1000459c
mov     eax, [esi+2]
or      eax, eax
jz      short loc_100043fe
cmp     dword_1000e519, eax
jz      short loc_100043db
push    400h
push    offset byte_10015a3d
push    20h
push    hinstance
call    loadstringa
push    offset byte_10015a3d
call    addmsg
mov     [ebp+var_5], 0
jmp     loc_1000459c
jmp     short loc_1000441f
push    400h
push    offset byte_10015e3d
push    21h
push    hinstance
call    loadstringa
push    offset byte_10015e3d
call    addmsg
jmp     short loc_1000441f
push    400h
push    offset byte_1001623d
push    22h
push    hinstance
call    loadstringa
push    offset byte_1001623d
call    addmsg
cmp     dword ptr [esi+0ah], 0
jz      short loc_1000448a
push    lpbaseaddress
push    dword_1000e519
call    sub_10001020
cmp     [esi+0ah], eax
jz      short loc_10004467
push    400h
push    offset byte_1001663d
push    23h
push    hinstance
call    loadstringa
push    offset byte_1001663d
call    addmsg
mov     [ebp+var_5], 0
jmp     loc_1000459c
jmp     short loc_100044ab
push    400h
push    offset byte_10016a3d
push    1eh
push    hinstance
call    loadstringa
push    offset byte_10016a3d
call    addmsg
jmp     short loc_100044ab
push    400h
push    offset byte_10016e3d
push    24h
push    hinstance
call    loadstringa
push    offset byte_10016e3d
call    addmsg
test    dword ptr [esi+1eh], 4
jz      short loc_10004532
mov     eax, 278h
add     eax, dword_1000d880
push    dword ptr [esi+1eh]
push    esi
push    eax
push    3
push    lpbaseaddress
call    sub_100065ae
or      eax, eax
jnz     short loc_10004508
push    400h
push    offset byte_1001723d
push    8
push    hinstance
call    loadstringa
push    offset byte_1001723d
call    addmsg
push    dword_1000e519
pop     nnumberofbytestowrite
mov     [ebp+var_5], 0
jmp     short loc_10004530
push    400h
push    offset byte_1001763d
push    9
push    hinstance
call    loadstringa
push    offset byte_1001763d
call    addmsg
mov     [ebp+var_4], 1
jmp     short loc_1000459c
test    dword ptr [esi+1eh], 1
jz      short loc_1000453f
mov     bl, 1
jmp     short loc_10004541
mov     bl, 0
mov     eax, [esi+16h]
lea     esi, [eax+esi]
mov     edi, lpbaseaddress
lea     ecx, [ecx+0]
cmp     dword ptr [esi], 0
jnz     short loc_1000455c
cmp     word ptr [esi+4], 0
jz      short loc_1000459c
lodsd
xchg    eax, ecx
lodsb
or      bl, bl
jnz     short loc_1000458f
cmp     [ecx+edi], al
jz      short loc_1000458f
push    400h
push    offset byte_10017a3d
push    25h
push    hinstance
call    loadstringa
push    offset byte_10017a3d
call    addmsg
mov     [ebp+var_5], 0
jmp     short loc_1000459c
lodsb
mov     [ecx+edi], al
mov     [ebp+var_4], 1
jmp     short loc_10004550
cmp     [ebp+var_4], 0
jnz     short loc_100045d0
push    dword_1000e519
pop     nnumberofbytestowrite
push    400h
push    offset byte_10017e3d
push    0ah
push    hinstance
call    loadstringa
mov     eax, offset byte_10017e3d
mov     [ebp+var_5], 0
jmp     short loc_100045ec
push    400h
push    offset byte_1001823d
push    0bh
push    hinstance
call    loadstringa
mov     eax, offset byte_1001823d
push    eax
call    addmsg
push    [ebp+var_c]
push    [ebp+var_4]
call    closefilemapping
test    dword ptr [esi+1eh], 8
jz      short loc_1000460b
call    sub_100040fa
movzx   eax, [ebp+var_5]
pop     ebx
pop     edi
pop     esi
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0ffffffa4h
push    esi
push    edi
push    ebx
mov     [ebp+var_4], 0
lea     eax, [ebp+systeminfo]
push    eax
call    getsysteminfo
mov     ecx, [ebp+systeminfo.dwallocationgranularity]
mov     [ebp+var_54], ecx
add     ecx, ecx
mov     [ebp+var_58], ecx
add     ecx, [ebp+systeminfo.dwallocationgranularity]
mov     [ebp+var_5c], ecx
mov     esi, [ebp+arg_0]
push    0
push    82h
push    3
push    0
push    2
push    0c0000000h
push    offset src
call    createfilea
cmp     eax, 0ffffffffh
jz      loc_10004787
mov     [ebp+hfile], eax
lea     eax, [ebp+filesizehigh]
push    eax
push    [ebp+hfile]
call    getfilesize
mov     [ebp+var_3c], eax
push    0
push    0
push    0
push    4
push    0
push    [ebp+hfile]
call    createfilemappinga
or      eax, eax
jz      loc_1000477d
mov     [ebp+hfilemappingobject], eax
push    offset atryinglargefil
call    addmsg
mov     [ebp+dwfileoffsetlow], 0
mov     [ebp+dwfileoffsethigh], 0
mov     eax, [esi+16h]
lea     esi, [eax+esi]
push    [ebp+var_5c]
pop     [ebp+dwnumberofbytestomap]
mov     [ebp+var_8], 0
push    [ebp+dwnumberofbytestomap]
push    [ebp+dwfileoffsetlow]
push    [ebp+dwfileoffsethigh]
push    2
push    [ebp+hfilemappingobject]
call    mapviewoffile
or      eax, eax
jz      short loc_10004737
mov     [ebp+lpbaseaddress], eax
mov     ecx, [esi]
mov     edx, [esi+4]
cmp     edx, 0ffffffffh
jz      short loc_100046e9
sub     edx, [ebp+var_8]
push    edx
cmp     [ebp+dwnumberofbytestomap], 0
jz      short loc_100046fa
mov     edx, [ebp+var_58]
add     edx, ecx
sub     edx, 1
jmp     short loc_10004700
mov     edx, [ebp+var_3c]
sub     edx, [ebp+dwfileoffsetlow]
push    edx
push    ecx
lea     eax, [esi+ecx*2+8]
add     eax, ecx
push    eax
lea     eax, [esi+ecx*2+8]
push    eax
lea     eax, [ecx+esi+8]
push    eax
lea     eax, [esi+8]
push    eax
push    [ebp+lpbaseaddress]
call    searchandreplace
add     [ebp+var_8], eax
or      [ebp+var_4], eax
push    [ebp+lpbaseaddress]
call    unmapviewoffile
cmp     [ebp+dwnumberofbytestomap], 0
jnz     short loc_10004739
jmp     short loc_10004766
jmp     short loc_10004739
jmp     short loc_10004775
mov     eax, [ebp+var_58]
mov     edx, 0
add     [ebp+dwfileoffsetlow], eax
adc     [ebp+dwfileoffsethigh], edx
mov     ecx, [ebp+filesizehigh]
cmp     [ebp+dwfileoffsethigh], ecx
jnz     short loc_10004761
mov     ecx, [ebp+dwfileoffsetlow]
add     ecx, [ebp+dwnumberofbytestomap]
cmp     ecx, [ebp+var_3c]
jb      short loc_10004761
mov     [ebp+dwnumberofbytestomap], 0
jmp     loc_100046c2
mov     ecx, [esi]
lea     esi, [esi+ecx*4+8]
cmp     dword ptr [esi], 0
jnz     loc_100046a1
push    [ebp+hfilemappingobject]
call    closehandle
push    [ebp+hfile]
call    closehandle
jmp     short $+2
mov     eax, [ebp+var_4]
pop     ebx
pop     edi
pop     esi
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffffff4h
push    esi
push    edi
push    ebx
mov     esi, [ebp+arg_0]
mov     [ebp+var_4], 0
mov     [ebp+var_5], 1
test    dword ptr [esi+1eh], 8
jz      short loc_100047b6
call    sub_100040cf
push    400h
push    offset byte_1001863d
push    3
push    hinstance
call    loadstringa
push    offset byte_1001863d
call    addmsg
lea     eax, [esi+22h]
push    dword ptr [esi+1eh]
pop     [ebp+var_c]
push    [ebp+var_c]
push    dword ptr [esi+6]
push    eax
call    loadfilemapping
or      eax, eax
jnz     short loc_1000481c
push    [ebp+var_c]
push    [ebp+var_4]
call    closefilemapping
push    [ebp+arg_0]
call    sub_10004616
or      eax, eax
jz      short loc_10004812
mov     [ebp+var_4], 1
mov     [ebp+var_5], 1
jmp     loc_1000492b
jmp     loc_10004920
test    dword ptr [esi+1eh], 4
jz      loc_100048aa
mov     eax, 278h
add     eax, dword_1000d880
push    dword ptr [esi+1eh]
push    esi
push    eax
push    4
push    lpbaseaddress
call    sub_100065ae
or      eax, eax
jnz     short loc_1000487d
push    400h
push    offset byte_10018a3d
push    8
push    hinstance
call    loadstringa
push    offset byte_10018a3d
call    addmsg
push    dword_1000e519
pop     nnumberofbytestowrite
mov     [ebp+var_5], 0
jmp     short loc_100048a5
push    400h
push    offset byte_10018e3d
push    9
push    hinstance
call    loadstringa
push    offset byte_10018e3d
call    addmsg
mov     [ebp+var_4], 1
jmp     loc_10004920
mov     eax, [esi+16h]
lea     esi, [eax+esi]
mov     ecx, [esi]
mov     ebx, [esi+4]
push    ebx
push    dword_1000e519
push    ecx
lea     eax, [esi+ecx*2+8]
add     eax, ecx
push    eax
lea     eax, [esi+ecx*2+8]
push    eax
lea     eax, [ecx+esi+8]
push    eax
lea     eax, [esi+8]
push    eax
push    lpbaseaddress
call    searchandreplace
pusha
test    eax, eax
jnz     short loc_1000490f
cmp     dword ptr [esi+ecx*4+8], 0
jz      short loc_1000490c
push    400h
push    offset byte_1001923d
push    26h
push    hinstance
call    loadstringa
push    offset byte_1001923d
call    addmsg
jmp     short loc_10004916
popa
jmp     short loc_10004920
mov     [ebp+var_4], 1
popa
lea     esi, [esi+ecx*4+8]
cmp     dword ptr [esi], 0
jnz     short loc_100048b0
push    [ebp+var_c]
push    [ebp+var_4]
call    closefilemapping
cmp     [ebp+var_4], 0
jnz     short loc_10004953
push    400h
push    offset byte_1001963d
push    0ah
push    hinstance
call    loadstringa
mov     eax, offset byte_1001963d
mov     [ebp+var_5], 0
jmp     short loc_1000496f
push    400h
push    offset byte_10019a3d
push    0bh
push    hinstance
call    loadstringa
mov     eax, offset byte_10019a3d
push    eax
call    addmsg
test    dword ptr [esi+1eh], 8
jz      short loc_10004983
call    sub_100040fa
movzx   eax, [ebp+var_5]
pop     ebx
pop     edi
pop     esi
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffffb40h
push    esi
push    edi
push    ebx
mov     [ebp+var_4], 0
mov     [ebp+var_5], 1
mov     esi, [ebp+arg_0]
push    400h
push    offset byte_10019e3d
push    6
push    hinstance
call    loadstringa
push    offset byte_10019e3d
call    addmsg
push    dword ptr [esi+401h]
pop     [ebp+var_28]
test    dword ptr [esi+401h], 8
jz      short loc_100049e3
call    sub_100040cf
push    dword ptr [esi+401h]
push    0
lea     eax, [esi+1]
push    eax
call    loadfilemapping
or      eax, eax
jnz     short loc_10004a01
mov     [ebp+var_5], 0
jmp     loc_10004e7d
cmp     dword_1000e519, 100000h
jnb     short loc_10004a14
mov     eax, 100000h
jmp     short loc_10004a1b
mov     eax, dword_1000e519
shl     eax, 1
mov     [ebp+dwsize], eax
push    4
push    1000h
push    [ebp+dwsize]
push    0
call    virtualalloc
mov     [ebp+lpmultibytestr], eax
mov     [ebp+var_14], eax
push    4
push    1000h
push    [ebp+dwsize]
push    0
call    virtualalloc
mov     [ebp+lpaddress], eax
mov     eax, lpbaseaddress
cmp     word ptr [eax], 0feffh
jnz     short loc_10004aa2
add     eax, 2
mov     ecx, dword_1000e519
sub     ecx, 2
shr     ecx, 1
push    0
push    0
push    [ebp+dwsize]
push    [ebp+lpmultibytestr]
push    ecx
push    eax
push    0
push    0
call    widechartomultibyte
push    400h
push    offset byte_1001a23d
push    18h
push    hinstance
call    loadstringa
push    offset byte_1001a23d
call    addmsg
mov     [ebp+var_40], 1
jmp     short loc_10004abd
push    dword_1000e519
push    lpbaseaddress
push    [ebp+lpmultibytestr]
call    rtlmovememory
mov     [ebp+var_40], 0
add     esi, 408h
jmp     loc_10004d6a
push    dword ptr [esi]
pop     [ebp+var_24]
add     esi, 8
mov     [ebp+lpsrc], esi
push    dword ptr [esi-4]
pop     [ebp+var_38]
add     esi, [esi-4]
add     esi, 5
mov     [ebp+var_30], esi
mov     [ebp+var_34], esi
push    dword ptr [esi-4]
pop     [ebp+var_3c]
push    [ebp+var_14]
call    sub_10006c90
mov     [ebp+var_18], eax
mov     esi, [ebp+lpmultibytestr]
mov     edi, [ebp+lpaddress]
push    [ebp+dwsize]
push    edi
call    rtlzeromemory
push    [ebp+var_30]
test    [ebp+var_24], 80h
jz      short loc_10004b38
push    1000h
push    offset byte_1000f199
push    [ebp+lpsrc]
call    expandenvironmentstringsa
push    offset byte_1000f199
call    sub_10006c90
mov     [ebp+var_38], eax
push    offset byte_1000f199
pop     [ebp+lpsrc]
test    [ebp+var_24], 100h
jz      short loc_10004b68
push    1000h
push    offset byte_10010199
push    [ebp+var_30]
call    expandenvironmentstringsa
push    offset byte_10010199
call    sub_10006c90
mov     [ebp+var_3c], eax
push    offset byte_10010199
pop     [ebp+var_30]
jmp     loc_10004d42
lea     eax, [ebp+var_448]
push    eax
lea     eax, [ebp+var_4c0]
push    eax
lea     eax, [ebp+var_38]
push    eax
push    [ebp+var_24]
push    esi
push    [ebp+lpsrc]
call    sub_10003e20
mov     [ebp+var_20], eax
cmp     [ebp+var_20], 0
jl      short loc_10004bdc
test    [ebp+var_24], 2
jz      short loc_10004bdc
mov     [ebp+var_1c], eax
cmp     esi, [ebp+var_14]
jz      short loc_10004bbe
mov     eax, esi
dec     eax
push    offset asc_1000d6c3
push    eax
call    sub_10007300
or      eax, eax
jnz     short loc_10004bbe
mov     [ebp+var_1c], 0ffffffffh
mov     eax, esi
add     eax, [ebp+var_38]
push    offset asc_1000d6c3
push    eax
call    sub_10007300
or      eax, eax
jnz     short loc_10004bd9
mov     [ebp+var_1c], 0ffffffffh
mov     eax, [ebp+var_1c]
cmp     [ebp+var_20], 0
jl      loc_10004d1f
test    [ebp+var_24], 1000h
jz      short loc_10004c1a
push    esi
lea     eax, [ebp+var_4c0]
push    eax
push    [ebp+var_20]
push    offset byte_10011199
push    [ebp+var_34]
call    sub_10003da0
push    offset byte_10011199
pop     [ebp+var_30]
push    [ebp+var_30]
call    sub_10006c90
mov     [ebp+var_3c], eax
test    [ebp+var_24], 40h
jz      short loc_10004c75
lea     eax, [ebp+dwinitparam]
cmp     dword_1001e63d, eax
jz      short loc_10004c75
push    [ebp+var_30]
pop     dword_1001e63d
lea     eax, [ebp+dwinitparam]
push    eax
push    offset sub_100058b0
push    hdlg
push    3
push    hinstance
call    dialogboxparama
or      eax, eax
jz      short loc_10004c75
lea     eax, [ebp+dwinitparam]
push    eax
call    sub_10006c90
mov     [ebp+var_3c], eax
lea     eax, [ebp+dwinitparam]
mov     [ebp+var_30], eax
mov     ecx, [ebp+var_448]
jmp     short loc_10004c81
movsb
sub     ecx, 1
or      ecx, ecx
jnz     short loc_10004c7d
test    [ebp+var_24], 8
jz      short loc_10004c93
add     esi, [ebp+var_38]
jmp     short loc_10004d02
test    [ebp+var_24], 4
jz      short loc_10004cb0
push    [ebp+var_3c]
push    [ebp+var_30]
push    edi
call    rtlmovememory
add     edi, [ebp+var_3c]
add     esi, [ebp+var_38]
jmp     short loc_10004d02
test    [ebp+var_24], 10h
jz      short loc_10004cda
push    [ebp+var_38]
push    esi
push    edi
call    rtlmovememory
add     edi, [ebp+var_38]
add     esi, [ebp+var_38]
push    [ebp+var_3c]
push    [ebp+var_30]
push    edi
call    rtlmovememory
add     edi, [ebp+var_3c]
jmp     short loc_10004d02
test    [ebp+var_24], 20h
jz      short loc_10004d02
push    [ebp+var_3c]
push    [ebp+var_30]
push    edi
call    rtlmovememory
add     edi, [ebp+var_3c]
push    [ebp+var_38]
push    esi
push    edi
call    rtlmovememory
add     edi, [ebp+var_38]
add     esi, [ebp+var_38]
cmp     byte ptr [esi], 0
jz      short loc_10004d0f
mov     eax, [ebp+var_38]
sub     [ebp+var_18], eax
jmp     short loc_10004d16
mov     [ebp+var_18], 0
mov     [ebp+var_4], 1
jmp     short loc_10004d42
test    [ebp+var_24], 1000h
jz      short loc_10004d3e
mov     ecx, [ebp+var_18]
jmp     short loc_10004d31
movsb
sub     ecx, 1
or      ecx, ecx
jnz     short loc_10004d2d
mov     [ebp+var_18], 0
jmp     short loc_10004d42
movsb
dec     [ebp+var_18]
cmp     [ebp+var_18], 0
jnz     loc_10004b6d
pop     [ebp+var_30]
push    [ebp+lpmultibytestr]
push    [ebp+lpaddress]
pop     [ebp+lpmultibytestr]
pop     [ebp+lpaddress]
push    [ebp+lpmultibytestr]
pop     [ebp+var_14]
mov     esi, [ebp+var_30]
add     esi, [esi-4]
add     esi, 1
cmp     dword ptr [esi+4], 0
jnz     loc_10004ac8
push    0
push    [ebp+var_4]
call    closefilemapping
mov     eax, dwfileattributes
test    eax, 1
jz      short loc_10004d8d
sub     eax, 1
push    eax
push    offset src
call    setfileattributesa
cmp     [ebp+var_40], 1
jnz     short loc_10004ddf
mov     eax, [ebp+var_14]
cmp     [ebp+lpmultibytestr], eax
jnz     short loc_10004dab
mov     ebx, [ebp+lpaddress]
jmp     short loc_10004dae
mov     ebx, [ebp+lpmultibytestr]
mov     word ptr [ebx], 0feffh
add     ebx, 2
push    [ebp+dwsize]
push    ebx
push    0ffffffffh
push    [ebp+var_14]
push    0
push    0
call    multibytetowidechar
sub     ebx, 2
mov     [ebp+var_14], ebx
push    [ebp+var_14]
call    lstrlenw
shl     eax, 1
mov     nnumberofbytestowrite, eax
jmp     short loc_10004dec
push    [ebp+var_14]
call    sub_10006c90
mov     nnumberofbytestowrite, eax
push    nnumberofbytestowrite
push    [ebp+var_14]
push    offset src
call    write_disk_file
or      eax, eax
jnz     short loc_10004e09
mov     [ebp+var_5], 0
jmp     short loc_10004e5d
test    [ebp+var_28], 10h
jz      short loc_10004e5d
push    0
push    82h
push    3
push    0
push    0
push    0c0000000h
push    offset src
call    createfilea
mov     hfile, eax
cmp     eax, 0ffffffffh
jz      short loc_10004e5d
push    offset lastwritetime
push    offset lastaccesstime
push    offset creationtime
push    hfile
call    setfiletime
push    hfile
call    closehandle
push    4000h
push    [ebp+dwsize]
push    [ebp+lpmultibytestr]
call    virtualfree
push    4000h
push    [ebp+dwsize]
push    [ebp+lpaddress]
call    virtualfree
cmp     [ebp+var_4], 0
jnz     short loc_10004ea5
push    400h
push    offset byte_1001a63d
push    0ah
push    hinstance
call    loadstringa
mov     eax, offset byte_1001a63d
mov     [ebp+var_5], 0
jmp     short loc_10004ec1
push    400h
push    offset byte_1001aa3d
push    0bh
push    hinstance
call    loadstringa
mov     eax, offset byte_1001aa3d
push    eax
call    addmsg
mov     esi, [ebp+arg_0]
test    dword ptr [esi+401h], 8
jz      short loc_10004edb
call    sub_100040fa
movzx   eax, [ebp+var_5]
pop     ebx
pop     edi
pop     esi
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffffff8h
push    esi
push    edi
push    ebx
push    400h
push    offset byte_1001ae3d
push    1bh
push    hinstance
call    loadstringa
push    offset byte_1001ae3d
call    addmsg
mov     [ebp+var_8], 1
cmp     byte_1000e95c, 0
jz      short loc_10004f29
mov     [ebp+var_4], 1
jmp     short loc_10004f37
mov     [ebp+var_4], 0
mov     byte_1000e95c, 1
mov     esi, [ebp+arg_0]
test    dword ptr [esi+401h], 40h
jz      short loc_10004f4b
call    sub_100040cf
push    80000000h
push    0
lea     eax, [esi+1]
push    eax
call    loadfilemapping
or      eax, eax
jnz     short loc_10004f6b
mov     [ebp+var_8], 0
jmp     loc_100051bb
test    dword ptr [esi+401h], 1
jz      short loc_10004f98
push    400h
push    offset byte_1001b23d
push    15h
push    hinstance
call    loadstringa
push    offset byte_1001b23d
call    addmsg
test    dword ptr [esi+401h], 2
jz      short loc_10004ffd
mov     eax, [esi+405h]
cmp     dword_1000e519, eax
jnz     short loc_10004fd5
push    400h
push    offset byte_1001b63d
push    21h
push    hinstance
call    loadstringa
push    offset byte_1001b63d
call    addmsg
jmp     short loc_10004ffd
push    400h
push    offset byte_1001ba3d
push    21h
push    hinstance
call    loadstringa
push    offset byte_1001ba3d
call    addmsg
mov     [ebp+var_8], 0
test    dword ptr [esi+401h], 4
jz      short loc_1000506d
push    lpbaseaddress
push    dword_1000e519
call    sub_10001020
cmp     [esi+409h], eax
jnz     short loc_10005045
push    400h
push    offset byte_1001be3d
push    1eh
push    hinstance
call    loadstringa
push    offset byte_1001be3d
call    addmsg
jmp     short loc_1000506d
push    400h
push    offset byte_1001c23d
push    23h
push    hinstance
call    loadstringa
push    offset byte_1001c23d
call    addmsg
mov     [ebp+var_8], 0
test    dword ptr [esi+401h], 8
jz      loc_10005116
call    sub_1000a578
push    dword_1000e519
push    lpbaseaddress
call    sub_1000a5b8
call    sub_1000a618
mov     ecx, [eax]
bswap   ecx
mov     edx, [eax+4]
bswap   edx
mov     ebx, [eax+8]
bswap   ebx
mov     eax, [eax+0ch]
bswap   eax
cmp     [esi+40dh], ecx
jnz     short loc_100050ee
cmp     [esi+411h], edx
jnz     short loc_100050ee
cmp     [esi+415h], ebx
jnz     short loc_100050ee
cmp     [esi+419h], eax
jnz     short loc_100050ee
push    400h
push    offset byte_1001c63d
push    19h
push    hinstance
call    loadstringa
push    offset byte_1001c63d
call    addmsg
jmp     short loc_10005116
push    400h
push    offset byte_1001ca3d
push    1ah
push    hinstance
call    loadstringa
push    offset byte_1001ca3d
call    addmsg
mov     [ebp+var_8], 0
test    dword ptr [esi+401h], 10h
jz      loc_100051bb
test    dword ptr [esi+401h], 20h
jz      short loc_10005153
mov     edi, lpbaseaddress
add     edi, [esi+1425h]
lea     eax, [esi+41dh]
push    eax
push    dword ptr [esi+41dh]
push    edi
call    sub_1000548f
jmp     short loc_1000516b
lea     eax, [esi+41dh]
push    eax
push    dword_1000e519
push    lpbaseaddress
call    sub_1000548f
cmp     eax, 0ffffffffh
jnz     short loc_1000519a
push    400h
push    offset byte_1001ce3d
push    31h
push    hinstance
call    loadstringa
push    offset byte_1001ce3d
call    addmsg
mov     [ebp+var_8], 0
jmp     short loc_100051bb
push    400h
push    offset byte_1001d23d
push    30h
push    hinstance
call    loadstringa
push    offset byte_1001d23d
call    addmsg
call    closefilemapping_readonly
test    dword ptr [esi+401h], 80h
jz      short loc_1000523e
push    0
push    82h
push    3
push    0
push    2
push    0c0000000h
push    offset src
call    createfilea
cmp     eax, 0ffffffffh
jnz     short loc_10005217
push    400h
push    offset byte_1001d63d
push    33h
push    hinstance
call    loadstringa
push    offset byte_1001d63d
call    addmsg
mov     [ebp+var_8], 0
jmp     short loc_1000523e
push    400h
push    offset byte_1001da3d
push    32h
push    hinstance
call    loadstringa
push    offset byte_1001da3d
call    addmsg
push    eax
call    closehandle
test    dword ptr [esi+401h], 40h
jz      short loc_1000524f
call    sub_100040fa
cmp     [ebp+var_4], 0
jnz     short loc_1000525c
mov     byte_1000e95c, 0
mov     eax, [ebp+var_8]
pop     ebx
pop     edi
pop     esi
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffffb74h
push    esi
push    edi
push    ebx
push    400h
push    offset byte_1001de3d
push    1fh
push    hinstance
call    loadstringa
push    offset byte_1001de3d
call    addmsg
mov     [ebp+var_404], 0
mov     esi, [ebp+arg_0]
lea     edi, [esi+1]
lea     ebx, [ebp+string1]
push    edi
push    ebx
call    lstrcpya
push    offset asc_1000d6e7
push    ebx
call    lstrcata
lea     eax, [esi+401h]
push    eax
push    ebx
call    lstrcata
push    ebx
call    addmsg
push    edi
push    ebx
call    lstrcpya
xor     ecx, ecx
jmp     short loc_100052da
inc     ecx
cmp     byte ptr [ecx+ebx], 5ch
jnz     short loc_100052d9
mov     byte ptr [ecx+ebx], 0
lea     eax, [ecx+edi+1]
mov     [ebp+lpsubkey], eax
lea     eax, [ebp+string1]
push    eax
call    sub_10001657
or      eax, eax
jz      loc_10005482
test    dword ptr [esi+481h], 4
jz      loc_100053b3
lea     ecx, [esi+401h]
lea     edx, [ebp+data]
test    dword ptr [esi+88dh], 80000000h
jz      short loc_10005331
mov     ebx, 1
jmp     short loc_10005333
xor     ebx, ebx
push    ebx
push    ecx
push    [ebp+lpsubkey]
push    eax
push    edx
call    getregdword
or      eax, eax
jnz     loc_10005482
mov     eax, dword ptr [ebp+data]
test    dword ptr [esi+485h], 1
jz      short loc_10005370
cmp     eax, [esi+889h]
jnz     short loc_100053ae
mov     [ebp+var_404], 1
jmp     short loc_100053ae
test    dword ptr [esi+485h], 4
jz      short loc_10005390
cmp     eax, [esi+889h]
jnb     short loc_100053ae
mov     [ebp+var_404], 1
jmp     short loc_100053ae
test    dword ptr [esi+485h], 8
jz      short loc_100053ae
cmp     eax, [esi+889h]
jbe     short loc_100053ae
mov     [ebp+var_404], 1
jmp     loc_10005482
test    dword ptr [esi+481h], 1
jz      loc_10005482
lea     ecx, [esi+401h]
lea     edx, [ebp+string1]
test    dword ptr [esi+88dh], 80000000h
jz      short loc_100053e2
mov     ebx, 1
jmp     short loc_100053e4
xor     ebx, ebx
push    ebx
push    ecx
push    [ebp+lpsubkey]
push    eax
push    edx
call    getregstring
or      eax, eax
jnz     loc_10005482
lea     edi, [esi+489h]
mov     edx, [esi+88dh]
test    dword ptr [esi+485h], 1
jz      short loc_1000543e
or      edx, 800h
push    0
push    0
push    0
push    edx
lea     eax, [ebp+string1]
push    eax
push    edi
call    sub_10003e20
cmp     eax, 0
jl      short loc_10005482
mov     [ebp+var_404], 1
jmp     short loc_10005482
test    dword ptr [esi+485h], 10h
jz      short loc_10005482
or      edx, 1000h
lea     eax, [ebp+var_48c]
push    eax
lea     eax, [ebp+var_488]
push    eax
lea     eax, [ebp+var_410]
push    eax
push    edx
lea     eax, [ebp+string1]
push    eax
push    edi
call    sub_10003e20
cmp     eax, 0
jl      short loc_10005482
mov     [ebp+var_404], 1
mov     eax, [ebp+var_404]
pop     ebx
pop     edi
pop     esi
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
pusha
mov     [ebp+var_4], 0ffffffffh
mov     esi, [ebp+arg_0]
mov     eax, [ebp+arg_8]
lea     edi, [eax+8]
mov     edx, edi
add     edx, [eax]
mov     ebx, [eax]
xor     ecx, ecx
jmp     short loc_100054d5
mov     eax, ecx
add     eax, ebx
cmp     eax, [ebp+arg_4]
ja      short loc_100054d2
lea     eax, [ecx+esi]
push    ebx
push    edx
push    edi
push    eax
call    sub_100054e2
cmp     eax, 1
jnz     short loc_100054cf
mov     [ebp+var_4], ecx
jmp     short loc_100054da
inc     ecx
jmp     short loc_100054d5
mov     ecx, [ebp+arg_4]
cmp     ecx, [ebp+arg_4]
jnz     short loc_100054b0
popa
mov     eax, [ebp+var_4]
leave
retn    0ch
push    ebp
mov     ebp, esp
pusha
mov     esi, [ebp+arg_0]
mov     edi, [ebp+arg_4]
mov     edx, [ebp+arg_8]
mov     ecx, [ebp+arg_c]
jmp     short loc_1000550a
cmp     byte ptr [edx], 0
jnz     short loc_10005506
mov     al, [esi]
cmp     [edi], al
jz      short loc_10005506
popa
xor     eax, eax
leave
retn    10h
inc     esi
inc     edi
inc     edx
dec     ecx
or      ecx, ecx
jnz     short loc_100054f4
popa
xor     eax, eax
inc     eax
leave
retn    10h
push    ebp
mov     ebp, esp
add     esp, 0fffffbb0h
push    esi
push    edi
push    ebx
mov     [ebp+var_1], 0
push    400h
push    offset byte_1001e23d
push    4
push    hinstance
call    loadstringa
push    offset byte_1001e23d
call    addmsg
lea     eax, [ebp+buffer]
push    eax
push    400h
call    gettemppatha
push    offset aregpatchreg
lea     eax, [ebp+buffer]
push    eax
call    lstrcata
mov     esi, [ebp+arg_0]
test    dword ptr [esi+5], 8
jz      short loc_1000557a
call    sub_100040cf
mov     eax, [esi+1]
add     eax, 100000h
mov     [ebp+dwsize], eax
push    4
push    1000h
push    eax
push    0
call    virtualalloc
mov     [ebp+lpaddress], eax
lea     eax, [esi+9]
push    [ebp+lpaddress]
push    eax
call    sub_100057a2
mov     ecx, [ebp+lpaddress]
test    dword ptr [esi+5], 1
jz      short loc_100055fb
mov     eax, [esi+1]
add     eax, 100000h
mov     [ebp+var_414], eax
push    4
push    1000h
push    eax
push    0
call    virtualalloc
mov     [ebp+lpstring1], eax
push    [ebp+var_414]
push    [ebp+lpstring1]
push    [ebp+lpaddress]
call    sub_100056f6
mov     ecx, [ebp+lpstring1]
push    eax
push    ecx
lea     eax, [ebp+buffer]
push    eax
call    write_disk_file
test    eax, eax
jz      loc_1000569c
mov     edi, offset src
push    offset as
push    edi
call    lstrcpya
lea     eax, [ebp+buffer]
push    eax
push    edi
call    lstrcata
push    offset asc_1000d701
push    edi
call    lstrcata
push    3ch
lea     eax, [ebp+pexecinfo]
push    eax
call    rtlzeromemory
mov     [ebp+pexecinfo.cbsize], 3ch
mov     [ebp+pexecinfo.fmask], 40h
mov     [ebp+pexecinfo.lpverb], offset aopen_0
mov     [ebp+pexecinfo.lpfile], offset aregeditexe
mov     [ebp+pexecinfo.lpparameters], edi
mov     [ebp+pexecinfo.nshow], 0
lea     eax, [ebp+pexecinfo]
push    eax
call    shellexecuteexa
push    0ffffffffh
push    [ebp+pexecinfo.hprocess]
call    waitforsingleobject
mov     [ebp+var_1], 1
push    4000h
push    [ebp+dwsize]
push    [ebp+lpaddress]
call    virtualfree
test    dword ptr [esi+5], 1
jz      short loc_100056d1
push    4000h
push    [ebp+var_414]
push    [ebp+lpstring1]
call    virtualfree
lea     eax, [ebp+buffer]
push    eax
call    deletefilea
test    dword ptr [esi+5], 8
jz      short loc_100056eb
call    sub_100040fa
movzx   eax, [ebp+var_1]
pop     ebx
pop     edi
pop     esi
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffffff8h
push    esi
push    edi
push    ebx
mov     eax, [ebp+arg_8]
add     eax, 100000h
mov     [ebp+nsize], eax
push    4
push    1000h
push    eax
push    0
call    virtualalloc
mov     [ebp+lpdst], eax
mov     esi, [ebp+lpsrc]
mov     edi, [ebp+lpstring1]
push    [ebp+nsize]
push    [ebp+lpdst]
push    esi
call    expandenvironmentstringsa
mov     esi, [ebp+lpdst]
or      eax, eax
jz      short loc_10005783
push    [ebp+lpsrc]
push    esi
call    lstrcmpa
or      eax, eax
jz      short loc_10005778
mov     bl, 0
jmp     short loc_1000576e
lodsb
cmp     word ptr [esi], 5b0ah
jnz     short loc_10005750
mov     bl, 1
cmp     al, 5ch
jnz     short loc_10005764
or      bl, bl
jnz     short loc_10005764
cmp     byte ptr [esi], 5ch
jz      short loc_10005764
cmp     byte ptr [esi-2], 5ch
jz      short loc_10005764
stosb
stosb
cmp     word ptr [esi], 0d5dh
jnz     short loc_1000576e
mov     bl, 0
cmp     byte ptr [esi], 0
jnz     short loc_10005746
mov     byte ptr [edi], 0
jmp     short loc_10005783
push    [ebp+lpsrc]
push    [ebp+lpstring1]
call    lstrcpya
push    4000h
push    [ebp+nsize]
push    [ebp+lpdst]
call    virtualfree
push    [ebp+lpstring1]
call    sub_10006c90
pop     ebx
pop     edi
pop     esi
leave
retn    0ch
push    ebp
mov     ebp, esp
add     esp, 0fffffbfch
push    esi
push    edi
push    ebx
mov     esi, [ebp+arg_0]
mov     edi, [ebp+arg_4]
mov     [ebp+var_404], esi
jmp     loc_10005874
jmp     short loc_100057d6
cmp     word ptr [esi], 0a0dh
jz      loc_10005873
cmp     byte ptr [esi], 0
jz      loc_1000587d
inc     esi
cmp     byte ptr [esi], 24h
jnz     short loc_100057c1
mov     dword_1001e63d, esi
inc     esi
jmp     short loc_100057f9
cmp     word ptr [esi], 0a0dh
jz      loc_10005873
cmp     byte ptr [esi], 0
jz      loc_1000587d
inc     esi
cmp     byte ptr [esi], 24h
jnz     short loc_100057e4
inc     esi
cmp     byte_1000e95c, 0
jnz     short loc_10005869
lea     eax, [ebp+dwinitparam]
push    eax
push    offset sub_100058b0
push    hdlg
push    3
push    hinstance
call    dialogboxparama
or      eax, eax
jz      short loc_10005873
mov     ebx, dword_1001e63d
sub     ebx, [ebp+var_404]
push    ebx
push    [ebp+var_404]
push    edi
call    rtlmovememory
add     edi, ebx
lea     eax, [ebp+dwinitparam]
push    eax
push    edi
call    lstrcata
lea     eax, [ebp+dwinitparam]
push    eax
call    sub_10006c90
add     edi, eax
mov     [ebp+var_404], esi
jmp     short loc_10005873
push    offset acannotuseplace
call    addmsg
inc     esi
cmp     byte ptr [esi], 0
jnz     loc_100057bf
mov     ebx, esi
sub     ebx, [ebp+var_404]
push    ebx
push    [ebp+var_404]
push    edi
call    rtlmovememory
push    [ebp+arg_4]
call    sub_10006c90
pop     ebx
pop     edi
pop     esi
leave
retn    8
push    ebp
mov     ebp, esp
add     esp, 0fffffc00h
push    ebx
push    esi
push    edi
mov     eax, [ebp+arg_4]
cmp     eax, 110h
jnz     loc_100059a8
push    [ebp+arg_c]
pop     nresult
push    0ffffffech
push    hdlg
call    getwindowlonga
test    eax, 8
jnz     short loc_100058fb
push    3
push    0
push    0
push    0
push    0
push    0fffffffeh
push    [ebp+hwnd]
call    setwindowpos
cmp     byte_1000e537, 1
jnz     short loc_10005920
cmp     dword_1000e954, 0ffffffffh
jz      short loc_10005920
cmp     dword_1000e958, 0ffffffffh
jz      short loc_10005920
push    66h
push    [ebp+hwnd]
call    sub_10003c34
push    66h
push    offset abtnregpokover
push    offset abtnregpokdown
push    offset abtnregpokup
push    [ebp+hwnd]
push    hinstance
call    sub_100016e0
push    1
push    0bh
push    hinstance
call    sub_10001460
or      eax, eax
jz      short loc_1000595b
push    eax
push    [ebp+hwnd]
call    sub_10003ae0
push    hdlg
push    [ebp+hwnd]
call    sub_10007260
mov     esi, dword_1001e63d
lea     edi, [ebp+string]
cmp     byte ptr [esi], 24h
jnz     short loc_1000597b
inc     esi
xor     ecx, ecx
jmp     short loc_10005980
inc     ecx
cmp     byte ptr [ecx+esi], 24h
jz      short loc_1000598c
cmp     byte ptr [ecx+esi], 0
jnz     short loc_1000597f
push    ecx
push    ecx
push    esi
push    edi
call    rtlmovememory
pop     ecx
mov     byte ptr [ecx+edi], 0
push    edi
push    [ebp+hwnd]
call    setwindowtexta
jmp     loc_10005af2
cmp     eax, 111h
jnz     short loc_10005a04
mov     eax, [ebp+arg_8]
cmp     eax, 66h
jnz     short loc_100059e1
mov     eax, nresult
mov     byte ptr [eax], 0
push    400h
push    eax
push    65h
push    [ebp+hwnd]
call    getdlgitemtexta
or      eax, eax
jz      loc_10005af2
jmp     loc_10005ad6
jmp     loc_10005af2
push    0dh
call    getkeystate
test    ax, 8000h
jz      short loc_100059ff
push    0
push    66h
push    111h
push    [ebp+hwnd]
call    sendmessagea
jmp     loc_10005af2
cmp     eax, 138h
jnz     short loc_10005a6a
cmp     byte_1000e537, 1
jnz     short loc_10005a59
push    color
push    [ebp+arg_8]
call    settextcolor
cmp     dword_1000e93c, 0ffffffffh
jnz     short loc_10005a3e
push    1
push    [ebp+arg_8]
call    setbkmode
push    5
call    getstockobject
jmp     short loc_10005a5e
push    dword_1000e93c
push    [ebp+arg_8]
call    setbkcolor
push    dword_1000e93c
call    createsolidbrush
jmp     short loc_10005a5e
mov     eax, 0
pop     edi
pop     esi
pop     ebx
leave
retn    10h
jmp     loc_10005af2
cmp     eax, 136h
jnz     short loc_10005a95
cmp     byte_1000e537, 1
jnz     short loc_10005a87
push    dword_1000e938
call    createsolidbrush
jmp     short loc_10005a8c
mov     eax, 0
pop     edi
pop     esi
pop     ebx
leave
retn    10h
jmp     short loc_10005af2
cmp     eax, 2bh
jnz     short loc_10005aae
push    [ebp+arg_c]
push    [ebp+hwnd]
call    sub_10003c60
pop     edi
pop     esi
pop     ebx
leave
retn    10h
jmp     short loc_10005af2
cmp     eax, 200h
jnz     short loc_10005ad1
cmp     [ebp+arg_8], 1
jnz     short loc_10005af2
push    0
push    0f012h
push    112h
push    [ebp+hwnd]
call    sendmessagea
jmp     short loc_10005af2
cmp     eax, 10h
jnz     short loc_10005ae6
push    nresult
push    [ebp+hwnd]
call    enddialog
jmp     short loc_10005af2
mov     eax, 0
pop     edi
pop     esi
pop     ebx
leave
retn    10h
mov     eax, 1
pop     edi
pop     esi
pop     ebx
leave
retn    10h
pusha
push    offset apcredll
push    hinstance
call    sub_1000149b
or      eax, eax
jz      loc_10005b9a
mov     esi, eax
push    offset byte_1001223d
push    400h
call    gettemppatha
push    offset apcredll_0
push    offset byte_1001223d
call    lstrcata
push    dword_1000d880
push    esi
push    offset byte_1001223d
call    write_disk_file
push    offset byte_1001223d
call    loadlibrarya
or      eax, eax
jz      short loc_10005b9a
mov     hmodule, eax
push    offset apcrecompile
push    hmodule
call    getprocaddress
mov     dword_1001222d, eax
push    offset apcreexec
push    hmodule
call    getprocaddress
mov     dword_10012231, eax
push    offset apcrecopysubstr
push    hmodule
call    getprocaddress
mov     dword_10012235, eax
popa
retn
push    ebp
mov     ebp, esp
add     esp, 0fffff3a4h
push    esi
push    edi
push    ebx
mov     [ebp+var_4], 0
mov     esi, [ebp+arg_0]
test    dword ptr [esi+0dh], 20h
jz      short loc_10005bc0
call    sub_100040cf
lea     edi, [esi+421h]
push    400h
lea     eax, [ebp+dst]
push    eax
push    edi
call    expandenvironmentstringsa
push    400h
push    offset src
lea     eax, [ebp+dst]
push    eax
call    expandenvironmentstringsa
push    esi
mov     esi, offset src
mov     bl, 0
jmp     short loc_10005c16
lodsb
cmp     al, 25h
jnz     short loc_10005c16
push    offset src
call    sub_10006ea0
push    eax
push    offset src
call    lstrcpya
mov     bl, 1
jmp     short loc_10005c1b
cmp     byte ptr [esi], 0
jnz     short loc_10005bf8
pop     esi
mov     edi, offset src
cmp     byte ptr [edi+1], 3ah
jz      short loc_10005c76
push    400h
lea     eax, [ebp+dst]
push    eax
push    0
call    getmodulefilenamea
lea     eax, [ebp+dst]
push    eax
call    sub_1000226a
cmp     byte ptr [edi], 5ch
jz      short loc_10005c5c
push    offset asc_1000d7a9
lea     eax, [ebp+dst]
push    eax
call    lstrcata
push    edi
lea     eax, [ebp+dst]
push    eax
call    lstrcata
lea     eax, [ebp+dst]
push    eax
push    edi
call    lstrcpya
push    400h
push    offset byte_1001e645
push    5
push    hinstance
call    loadstringa
push    offset byte_1001e645
call    addmsg
push    edi
call    addmsg
cmp     bl, 1
jz      short loc_10005cab
test    dword ptr [esi+0dh], 1
jz      short loc_10005cf8
cmp     byte_1000e95c, 0
jnz     short loc_10005cee
push    edi
lea     eax, [ebp+dst]
push    eax
call    lstrcpya
lea     eax, [ebp+dst]
push    eax
call    sub_1000226a
push    edi
call    sub_10006ea0
push    eax
push    hdlg
lea     eax, [ebp+dst]
push    eax
push    offset aallfiles
push    edi
call    sub_10007100
jmp     short loc_10005cf0
xor     eax, eax
test    al, al
jz      loc_1000602e
mov     [ebp+var_5], 0
push    edi
call    getfileattributesa
cmp     eax, 0ffffffffh
jz      loc_10005dc3
test    dword ptr [esi+0dh], 10h
jz      short loc_10005d16
jmp     short loc_10005d65
cmp     byte_1000e95c, 0
jnz     short loc_10005d4b
push    400h
push    offset byte_1001ea45
push    29h
push    hinstance
call    loadstringa
push    24h
push    edi
push    offset byte_1001ea45
push    hdlg
call    messageboxa
jmp     short loc_10005d60
cmp     byte_1000e95e, 1
jnz     short loc_10005d5b
mov     eax, 6
jmp     short loc_10005d60
mov     eax, 7
cmp     eax, 6
jnz     short loc_10005d9d
mov     [ebp+var_5], 1
push    edi
call    sub_10002313
push    80h
push    edi
call    setfileattributesa
push    400h
push    offset byte_1001ee45
push    2ah
push    hinstance
call    loadstringa
push    offset byte_1001ee45
call    addmsg
jmp     short loc_10005dc3
push    400h
push    offset byte_1001f245
push    2bh
push    hinstance
call    loadstringa
push    offset byte_1001f245
call    addmsg
jmp     loc_1000602e
cmp     byte ptr [edi+1], 3ah
jnz     short loc_10005df4
cmp     byte ptr [edi+2], 5ch
jnz     short loc_10005df4
push    edi
lea     eax, [ebp+dst]
push    eax
call    lstrcpya
lea     eax, [ebp+dst]
push    eax
call    sub_1000226a
lea     eax, [ebp+dst]
push    eax
call    sub_10007170
mov     eax, [esi+5]
lea     eax, [eax+esi]
push    dword ptr [esi+1]
push    eax
push    edi
call    write_disk_file
or      eax, eax
jnz     short loc_10005e3d
push    edi
call    getfileattributesa
cmp     eax, 0ffffffffh
jnz     loc_1000602e
push    400h
push    offset byte_1001f645
push    2bh
push    hinstance
call    loadstringa
push    offset byte_1001f645
call    addmsg
jmp     loc_1000602e
mov     eax, [esi+9]
or      eax, eax
jz      short loc_10005e71
push    eax
push    edi
call    setfileattributesa
cmp     eax, 1
jnz     short loc_10005e71
push    400h
push    offset byte_1001fa45
push    2ch
push    hinstance
call    loadstringa
push    offset byte_1001fa45
call    addmsg
test    dword ptr [esi+0dh], 2
jz      loc_10006006
push    400h
push    offset byte_1001fe45
push    2dh
push    hinstance
call    loadstringa
push    offset byte_1001fe45
call    addmsg
cmp     byte ptr [edi+1], 3ah
jnz     short loc_10005eca
push    edi
lea     eax, [ebp+dst]
push    eax
call    lstrcpya
lea     eax, [ebp+dst]
push    eax
call    sub_1000226a
lea     eax, [ebp+dst]
push    eax
call    setcurrentdirectorya
lea     ebx, [esi+21h]
cmp     byte ptr [ebx], 0
jnz     short loc_10005ed6
xor     ebx, ebx
jmp     short loc_10005eee
push    400h
lea     eax, [ebp+var_805]
push    eax
push    ebx
call    expandenvironmentstringsa
lea     ebx, [ebp+var_805]
test    dword ptr [esi+0dh], 4
jz      loc_10005fc4
push    44h
lea     eax, [ebp+startupinfo]
push    eax
call    rtlzeromemory
push    10h
lea     eax, [ebp+processinformation]
push    eax
call    rtlzeromemory
push    offset asc_1000d7bc
lea     eax, [ebp+dst]
push    eax
call    lstrcpya
cmp     byte ptr [edi+1], 3ah
jz      short loc_10005f63
lea     eax, [ebp+buffer]
push    eax
push    400h
call    getcurrentdirectorya
lea     eax, [ebp+buffer]
push    eax
lea     eax, [ebp+dst]
push    eax
call    lstrcata
push    offset asc_1000d7c0
lea     eax, [ebp+dst]
push    eax
call    lstrcata
push    edi
lea     eax, [ebp+dst]
push    eax
call    lstrcata
push    offset asc_1000d7c2
lea     eax, [ebp+dst]
push    eax
call    lstrcata
push    ebx
lea     eax, [ebp+dst]
push    eax
call    lstrcata
lea     eax, [ebp+processinformation]
push    eax
lea     eax, [ebp+startupinfo]
push    eax
push    0
push    0
push    0
push    0
push    0
push    0
lea     eax, [ebp+dst]
push    eax
push    edi
call    createprocessa
push    0ffffffffh
push    [ebp+processinformation.hprocess]
call    waitforsingleobject
jmp     short loc_10005fd6
push    0ah
push    0
push    ebx
push    edi
push    offset aopen_1
push    0
call    shellexecutea
test    dword ptr [esi+0dh], 8
jz      short loc_10006006
push    400h
push    offset byte_10020245
push    2eh
push    hinstance
call    loadstringa
push    offset byte_10020245
call    addmsg
push    edi
call    deletefilea
push    400h
push    offset byte_10020645
push    2fh
push    hinstance
call    loadstringa
push    offset byte_10020645
call    addmsg
mov     [ebp+var_4], 1
cmp     [ebp+var_5], 0
jz      short loc_1000603c
push    [ebp+var_4]
call    sub_10002368
push    edi
push    offset adup2lastfile_0
call    setenvironmentvariablea
push    edi
lea     eax, [ebp+dst]
push    eax
call    lstrcpya
lea     eax, [ebp+dst]
push    eax
call    sub_1000226a
lea     eax, [ebp+dst]
push    eax
push    offset adup2lastpath_0
call    setenvironmentvariablea
test    dword ptr [esi+0dh], 20h
jz      short loc_1000607f
call    sub_100040fa
mov     eax, [ebp+var_4]
pop     ebx
pop     edi
pop     esi
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0ffffebc0h
push    esi
push    edi
push    ebx
lea     eax, [ebp+buffer]
push    eax
push    400h
call    gettemppatha
lea     eax, [ebp+pathname]
push    eax
push    400h
call    getcurrentdirectorya
lea     eax, [ebp+buffer]
push    eax
call    setcurrentdirectorya
mov     edi, offset byte_1001263d
xor     ebx, ebx
jmp     loc_10006194
jmp     loc_100061a3
cmp     byte ptr [esi], 18h
jnz     loc_10006194
push    10h
lea     eax, [ebp+string2]
push    eax
lea     eax, [esi+1]
push    eax
call    sub_10002200
lea     eax, [ebp+buffer]
push    eax
lea     eax, [ebp+string1]
push    eax
call    lstrcpya
push    offset asc_1000d7eb
lea     eax, [ebp+string1]
push    eax
call    lstrcata
lea     eax, [ebp+string2]
push    eax
lea     eax, [ebp+string1]
push    eax
call    lstrcata
push    offset adll
lea     eax, [ebp+string1]
push    eax
call    lstrcata
lea     eax, [ebp+string2]
push    eax
push    hinstance
call    sub_1000149b
mov     edx, eax
push    dword_1000d880
push    edx
lea     eax, [ebp+string1]
push    eax
call    write_disk_file
or      eax, eax
jz      short loc_10006194
lea     eax, [ebp+string1]
push    eax
call    loadlibrarya
or      eax, eax
jz      short loc_10006194
mov     [edi+4], eax
lea     edx, [edi+8]
lea     eax, [esi+1]
push    dword ptr [eax]
pop     dword ptr [edx]
push    dword ptr [eax+4]
pop     dword ptr [edx+4]
push    dword ptr [eax+8]
pop     dword ptr [edx+8]
push    dword ptr [eax+0ch]
pop     dword ptr [edx+0ch]
add     edi, 18h
inc     ebx
push    ebx
push    hinstance
call    sub_1000149b
mov     esi, eax
or      esi, esi
jnz     loc_100060d4
lea     eax, [ebp+pathname]
push    eax
call    setcurrentdirectorya
pop     ebx
pop     edi
pop     esi
leave
retn
push    ebp
mov     ebp, esp
add     esp, 0ffffefc0h
push    esi
push    edi
push    ebx
lea     eax, [ebp+buffer]
push    eax
push    400h
call    gettemppatha
mov     edi, offset byte_1001263d
jmp     short loc_10006251
push    dword ptr [edi+4]
call    freelibrary
push    10h
lea     eax, [ebp+string2]
push    eax
lea     eax, [edi+8]
push    eax
call    sub_10002200
lea     eax, [ebp+buffer]
push    eax
lea     eax, [ebp+string1]
push    eax
call    lstrcpya
push    offset asc_1000d7f2
lea     eax, [ebp+string1]
push    eax
call    lstrcata
lea     eax, [ebp+string2]
push    eax
lea     eax, [ebp+string1]
push    eax
call    lstrcata
push    offset adll_0
lea     eax, [ebp+string1]
push    eax
call    lstrcata
lea     eax, [ebp+string1]
push    eax
call    deletefilea
add     edi, 18h
cmp     dword ptr [edi+4], 0
jnz     short loc_100061e0
pop     ebx
pop     edi
pop     esi
leave
retn
push    ebp
mov     ebp, esp
add     esp, 0fffffff4h
push    esi
push    edi
push    ebx
mov     [ebp+var_4], 0
mov     esi, [ebp+arg_0]
mov     edi, offset byte_1001263d
jmp     short loc_10006292
lea     eax, [edi+8]
lea     edx, [esi+1]
push    10h
push    eax
push    edx
call    sub_100021d0
or      eax, eax
jz      short loc_1000628f
push    dword ptr [edi+4]
pop     [ebp+hmodule]
add     edi, 18h
cmp     dword ptr [edi+4], 0
jnz     short loc_10006276
push    offset apluginaction
push    [ebp+hmodule]
call    getprocaddress
or      eax, eax
jz      short loc_100062bc
mov     edx, esi
add     edx, 11h
mov     [ebp+var_c], esp
push    edx
call    eax
mov     esp, [ebp+var_c]
mov     [ebp+var_4], eax
jmp     short loc_100062c3
mov     [ebp+var_4], 0ffffffffh
mov     eax, [ebp+var_4]
pop     ebx
pop     edi
pop     esi
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
push    esi
push    edi
push    ebx
cmp     byte_1000d902, 1
jnz     short loc_100062f9
push    5
push    hwnd
call    showwindow
push    0
push    dword_1000d8c2
call    showwindow
push    0
push    0
push    184h
push    hwnd
call    sendmessagea
push    400h
push    offset byte_10020a45
push    0
push    hinstance
call    loadstringa
push    offset byte_10020a45
call    addmsg
push    offset asc_1000d0fc
call    addmsg
xor     ebx, ebx
jmp     loc_10006509
jmp     loc_10006518
cmp     byte ptr [esi], 3
jnz     short loc_10006354
push    esi
call    sub_10004338
jmp     loc_10006473
cmp     byte ptr [esi], 4
jnz     short loc_10006364
push    esi
call    sub_10004791
jmp     loc_10006473
cmp     byte ptr [esi], 11h
jnz     short loc_10006374
push    esi
call    sub_10005b9c
jmp     loc_10006473
cmp     byte ptr [esi], 5
jnz     short loc_10006384
push    esi
call    sub_10005516
jmp     loc_10006473
cmp     byte ptr [esi], 14h
jnz     short loc_10006394
push    esi
call    sub_1000498e
jmp     loc_10006473
cmp     byte ptr [esi], 16h
jnz     short loc_100063a4
push    esi
call    sub_10004ee6
jmp     loc_10006473
cmp     byte ptr [esi], 17h
jnz     short loc_100063b4
push    esi
call    sub_10005266
jmp     loc_10006473
cmp     byte ptr [esi], 10h
jnz     short loc_100063e5
push    400h
push    offset byte_10020e45
push    7
push    hinstance
call    loadstringa
push    offset byte_10020e45
call    addmsg
push    esi
call    sub_100014e6
jmp     loc_10006473
cmp     byte ptr [esi], 15h
jnz     short loc_10006468
cmp     [ebp+var_4], 1
jz      short loc_100063f6
cmp     [ebp+var_4], 0
jnz     short loc_10006424
test    dword ptr [esi+1], 4
jz      short loc_10006406
mov     eax, 0
jmp     short loc_10006427
test    dword ptr [esi+1], 8
jz      short loc_10006416
mov     eax, 1
jmp     short loc_10006427
test    dword ptr [esi+1], 40h
jz      short loc_10006427
mov     eax, [ebp+var_4]
jmp     short loc_10006427
mov     eax, [ebp+var_4]
cmp     [ebp+var_4], eax
jnz     short loc_10006473
test    dword ptr [esi+1], 1
jz      short loc_10006446
push    offset aexitpatching
call    addmsg
jmp     loc_10006520
jmp     short loc_10006466
test    dword ptr [esi+1], 10h
jz      short loc_10006457
add     ebx, [esi+5]
sub     ebx, 1
jmp     short loc_10006466
test    dword ptr [esi+1], 20h
jz      short loc_10006466
sub     ebx, [esi+5]
sub     ebx, 1
jmp     short loc_10006473
cmp     byte ptr [esi], 18h
jnz     short loc_10006473
push    esi
call    sub_1000625c
mov     [ebp+var_4], eax
mov     cl, [esi]
cmp     cl, 3
jz      short loc_100064a5
cmp     cl, 4
jz      short loc_100064a5
cmp     cl, 11h
jz      short loc_100064a5
cmp     cl, 5
jz      short loc_100064a5
cmp     cl, 14h
jz      short loc_100064a5
cmp     cl, 16h
jz      short loc_100064a5
cmp     cl, 17h
jz      short loc_100064a5
cmp     cl, 10h
jz      short loc_100064a5
cmp     cl, 18h
jnz     short loc_10006509
cmp     [ebp+var_4], 1
jnz     short loc_100064d8
push    400h
push    offset byte_10021245
push    1dh
push    hinstance
call    loadstringa
push    offset byte_10021245
call    addmsg
push    offset asc_1000d0fc
call    addmsg
jmp     short loc_10006509
cmp     [ebp+var_4], 0
jnz     short loc_10006509
push    400h
push    offset byte_10021645
push    1ch
push    hinstance
call    loadstringa
push    offset byte_10021645
call    addmsg
push    offset asc_1000d0fc
call    addmsg
inc     ebx
push    ebx
push    hinstance
call    sub_1000149b
mov     esi, eax
or      esi, esi
jnz     loc_10006344
push    400h
push    offset byte_10021a45
push    1
push    hinstance
call    loadstringa
push    offset byte_10021a45
call    addmsg
push    dword_1000d907
call    sub_10006577
push    6ch
push    hdlg
call    getdlgitem
push    0
push    eax
call    enablewindow
push    1
push    0
push    0
push    hdlg
call    redrawwindow
pop     ebx
pop     edi
pop     esi
leave
retn
push    ebp
mov     ebp, esp
pusha
push    offset bitmapname
push    hinstance
call    loadbitmapa
or      eax, eax
jz      short loc_100065a9
mov     ebx, eax
push    0ch
push    [ebp+hwnd]
call    getwindowlonga
push    ebx
push    0
push    172h
push    eax
call    sendmessagea
popa
leave
retn    4
push    ebp
mov     ebp, esp
push    ebx
push    ecx
push    edx
push    esi
push    edi
mov     esi, [ebp+arg_0]
xor     ecx, ecx
jmp     short loc_100065f2
inc     ecx
cmp     ecx, dword_1000e519
jnz     short loc_100065f2
push    400h
push    offset byte_10021e45
push    16h
push    hinstance
call    loadstringa
push    offset byte_10021e45
call    addmsg
xor     eax, eax
pop     edi
pop     esi
pop     edx
pop     ecx
pop     ebx
leave
retn    14h
cmp     dword ptr [ecx+esi], 4550h
jnz     short loc_100065bd
add     esi, ecx
mov     eax, [ebp+arg_0]
add     eax, dword_1000e519
cmp     dword ptr [eax-4], 32505564h
jnz     short loc_10006632
push    400h
push    offset byte_10022245
push    17h
push    hinstance
call    loadstringa
push    offset byte_10022245
call    addmsg
jmp     short loc_100065e7
push    esi
movzx   eax, word ptr [esi+6]
dec     eax
imul    eax, 28h
movzx   ecx, word ptr [esi+14h]
add     esi, 18h
add     esi, ecx
mov     edi, esi
or      dword ptr [edi+24h], 80000000h
add     edi, eax
pop     esi
mov     ds:dword_1000698d, 0
cmp     [ebp+arg_4], 4
jnz     short loc_10006667
or      ds:dword_1000698d, 1
test    [ebp+arg_10], 40h
jz      short loc_10006677
or      ds:dword_1000698d, 2
mov     ebx, [esi+28h]
mov     ds:dword_10006985, ebx
mov     eax, [edi+0ch]
add     eax, [edi+10h]
mov     [esi+28h], eax
cmp     [ebp+arg_4], 4
jnz     short loc_10006699
mov     eax, [edi+0ch]
mov     ebx, [edi+10h]
add     eax, ebx
jmp     short loc_1000669b
xor     eax, eax
mov     ds:dword_10006991, eax
mov     eax, [ebp+arg_0]
add     eax, [edi+14h]
add     eax, [edi+10h]
mov     ecx, offset loc_10006730
mov     ebx, 278h
mov     edx, eax
add     edx, ebx
push    edx
push    ebx
push    ecx
push    eax
call    rtlmovememory
pop     edx
mov     ecx, [ebp+arg_c]
mov     eax, [ecx+16h]
lea     ecx, [eax+ecx]
mov     ebx, dword_1000d880
sub     ebx, eax
push    ebx
push    ecx
push    edx
call    rtlmovememory
mov     eax, [ebp+arg_8]
push    100h
push    eax
call    sub_10006ee0
add     [edi+8], eax
mov     eax, [ebp+arg_8]
add     [edi+10h], eax
or      dword ptr [edi+24h], 0e0000000h
mov     eax, [edi+0ch]
add     eax, [edi+8]
mov     ebx, [esi+38h]
push    ebx
push    eax
call    sub_10006ee0
mov     [esi+50h], eax
mov     ecx, [ebp+arg_0]
add     ecx, nnumberofbytestowrite
mov     byte ptr [ecx-1], 32h
mov     byte ptr [ecx-2], 50h
mov     byte ptr [ecx-3], 55h
mov     byte ptr [ecx-4], 64h
xor     eax, eax
inc     eax
pop     edi
pop     esi
pop     edx
pop     ecx
pop     ebx
leave
retn    14h
jmp     loc_10006979
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
pusha
mov     [ebp+var_4], 0
mov     edi, [ebp+arg_0]
mov     esi, [ebp+arg_4]
mov     edx, [ebp+arg_8]
mov     ebx, [ebp+arg_14]
xor     ecx, ecx
jmp     short loc_1000678a
mov     eax, ecx
add     eax, ebx
cmp     eax, [ebp+arg_18]
ja      short loc_100067d6
push    ecx
push    esi
push    edi
push    edx
mov     ecx, ebx
test    ecx, ecx
jz      short loc_10006791
cmp     byte ptr [edx], 1
jz      short loc_1000677e
lodsb
scasb
jnz     short loc_10006784
inc     edx
dec     ecx
jmp     short loc_1000676d
inc     edi
inc     esi
inc     edx
dec     ecx
jmp     short loc_1000676d
pop     edx
pop     edi
pop     esi
pop     ecx
inc     edi
inc     ecx
cmp     ecx, [ebp+arg_18]
jnz     short loc_1000675e
jmp     short loc_100067d6
inc     [ebp+var_4]
pop     edx
pop     edi
pop     esi
mov     eax, [ebp+arg_1c]
cmp     eax, 0ffffffffh
jz      short loc_100067a8
cmp     [ebp+var_4], eax
jz      short loc_100067a8
pop     ecx
inc     edi
jmp     short loc_1000675e
mov     esi, [ebp+arg_c]
mov     edx, [ebp+arg_10]
xor     ecx, ecx
jmp     short loc_100067bf
cmp     byte ptr [edx], 1
jz      short loc_100067bb
lodsb
stosb
jmp     short loc_100067bd
inc     edi
inc     esi
inc     edx
inc     ecx
cmp     ecx, ebx
jnz     short loc_100067b2
pop     ecx
cmp     [ebp+arg_1c], 0ffffffffh
jnz     short loc_100067d6
sub     edi, ebx
inc     edi
inc     ecx
mov     esi, [ebp+arg_4]
mov     edx, [ebp+arg_8]
jmp     short loc_1000675e
popa
mov     eax, [ebp+var_4]
leave
retn    20h
push    ecx
push    large dword ptr fs:30h
pop     ecx
push    dword ptr [ecx+0ch]
pop     ecx
push    dword ptr [ecx+1ch]
pop     ecx
push    dword ptr [ecx]
pop     ecx
push    dword ptr [ecx+8]
pop     eax
pop     ecx
retn
push    ecx
push    large dword ptr fs:30h
pop     ecx
push    dword ptr [ecx+8]
pop     eax
pop     ecx
retn
push    ebp
mov     ebp, esp
push    ebx
push    ecx
push    edx
push    edi
push    esi
mov     ebx, [ebp+arg_0]
mov     edi, [ebp+arg_4]
mov     edx, ebx
movzx   eax, word ptr [ebx+3ch]
add     ebx, eax
mov     ebx, [ebx+78h]
add     ebx, edx
or      edi, edi
jz      short loc_10006866
mov     ecx, [ebx+18h]
mov     esi, [ebx+20h]
add     esi, edx
push    ebx
xor     ebx, ebx
lodsd
add     eax, edx
push    esi
push    edi
xchg    esi, edi
xchg    eax, edi
lodsb
or      al, al
jnz     short loc_10006845
cmp     byte ptr [edi], 0
jz      short loc_1000684e
jmp     short loc_1000684c
cmp     [edi], al
jnz     short loc_1000684c
inc     edi
jmp     short loc_10006839
mov     al, 1
pop     edi
pop     esi
or      al, al
jz      short loc_10006857
inc     ebx
loop    loc_10006831
xchg    eax, ebx
pop     ebx
mov     esi, [ebx+24h]
add     esi, edx
inc     eax
shl     eax, 1
add     esi, eax
movzx   ecx, word ptr [esi]
mov     esi, [ebx+1ch]
add     esi, edx
sub     ecx, [ebx+10h]
xchg    eax, ecx
shl     eax, 2
add     esi, eax
mov     eax, [esi]
add     eax, edx
pop     esi
pop     edi
pop     edx
pop     ecx
pop     ebx
leave
retn    8
pop     esi
push    esi
mov     eax, esi
add     eax, 10h
push    eax
push    edi
call    sub_10006807
mov     ebx, esi
add     ebx, 4
mov     ecx, esi
sub     ecx, 0bdh
push    ebx
push    0
push    0
push    ecx
push    0
push    0
call    eax
mov     eax, esi
add     eax, 1dh
push    eax
push    edi
call    sub_10006807
push    0fah
call    eax
call    sub_100067f8
add     eax, [esi]
jmp     eax
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
call    $+5
pop     esi
add     esi, 0d5h
push    dword ptr [esi-1bh]
pop     dword ptr [ebp-4]
test    dword ptr [ebp-4], 1
jnz     short loc_10006930
mov     eax, [esi]
add     ax, [esi+4]
jmp     short loc_1000692a
mov     edi, [esi]
test    dword ptr [ebp-4], 2
jz      short loc_10006903
call    sub_100067f8
add     edi, eax
mov     bl, [esi+4]
rdtsc
shr     edx, 8
mov     cl, dl
jmp     short loc_10006918
rdtsc
shr     edx, 8
cmp     cl, dl
jnz     short loc_10006921
cmp     [edi], bl
jnz     short loc_1000690f
mov     al, [esi+5]
mov     [edi], al
add     esi, 6
mov     eax, [esi]
add     ax, [esi+4]
or      eax, eax
jnz     short loc_100068f1
leave
retn
mov     edi, [esi-17h]
call    sub_100067f8
mov     ebx, eax
mov     edx, 1388h
mov     eax, [esi+4]
push    eax
push    edi
mov     ecx, [esi]
push    ecx
lea     eax, [esi+ecx*2+8]
add     eax, ecx
push    eax
lea     eax, [esi+ecx*2+8]
push    eax
lea     eax, [ecx+esi+8]
push    eax
lea     eax, [esi+8]
push    eax
push    ebx
call    searchandreplace
or      eax, eax
jnz     short loc_1000696e
cmp     edx, 0
jbe     short loc_1000696e
dec     edx
jmp     short loc_1000693f
lea     esi, [esi+ecx*4+8]
cmp     dword ptr [esi], 0
jnz     short loc_1000693a
leave
retn
call    sub_100067de
mov     edi, eax
call    sub_10006884
push    ebp
mov     ebp, esp
push    esi
mov     edx, [ebp+arg_4]
mov     esi, [ebp+arg_0]
xor     eax, eax
xor     ecx, ecx
mov     [edx+8], al
mov     cl, 7
mov     eax, esi
and     al, 0fh
cmp     al, 0ah
sbb     al, 69h
das
mov     [ecx+edx], al
shr     esi, 4
dec     ecx
jns     short loc_10006c6f
pop     esi
leave
retn    8
mov     eax, [esp+arg_0]
sub     eax, 4
add     eax, 4
cmp     byte ptr [eax], 0
jz      short loc_10006ccf
cmp     byte ptr [eax+1], 0
jz      short loc_10006cc5
cmp     byte ptr [eax+2], 0
jz      short loc_10006cbb
cmp     byte ptr [eax+3], 0
jnz     short loc_10006c97
sub     eax, [esp+arg_0]
add     eax, 3
retn    4
sub     eax, [esp+arg_0]
add     eax, 2
retn    4
sub     eax, [esp+arg_0]
add     eax, 1
retn    4
sub     eax, [esp+arg_0]
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffffec0h
lea     eax, [ebp-13eh]
push    eax
push    dword ptr [ebp+8]
call    findfirstfilea
cmp     eax, 0ffffffffh
jnz     short loc_10006d04
mov     eax, 0ffffffffh
jmp     short locret_10006d10
push    eax
call    findclose
mov     eax, [ebp-11eh]
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffffff4h
push    0fffffff5h
call    getstdhandle
mov     [ebp+hfile], eax
push    [ebp+lpbuffer]
call    sub_10006db0
mov     [ebp+nnumberofbytestowrite], eax
push    0
lea     eax, [ebp+numberofbyteswritten]
push    eax
push    [ebp+nnumberofbytestowrite]
push    [ebp+lpbuffer]
push    [ebp+hfile]
call    writefile
mov     eax, [ebp+numberofbyteswritten]
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffffff8h
push    0
push    80h
push    2
push    0
push    0
push    40000000h
push    [ebp+lpfilename]
call    createfilea
cmp     eax, 0ffffffffh
jnz     short loc_10006d77
xor     eax, eax
leave
retn    0ch
mov     [ebp+hfile], eax
push    0
lea     eax, [ebp+numberofbyteswritten]
push    eax
push    [ebp+nnumberofbytestowrite]
push    [ebp+lpbuffer]
push    [ebp+hfile]
call    writefile
push    [ebp+hfile]
call    flushfilebuffers
push    [ebp+hfile]
call    closehandle
mov     eax, [ebp+numberofbyteswritten]
leave
retn    0ch
mov     eax, [esp+arg_0]
lea     edx, [eax+3]
push    ebp
push    edi
mov     ebp, 80808080h
mov     edi, [eax]
add     eax, 4
lea     ecx, [edi-1010101h]
not     edi
and     ecx, edi
and     ecx, ebp
jnz     short loc_10006e0a
mov     edi, [eax]
add     eax, 4
lea     ecx, [edi-1010101h]
not     edi
and     ecx, edi
and     ecx, ebp
jnz     short loc_10006e0a
mov     edi, [eax]
add     eax, 4
lea     ecx, [edi-1010101h]
not     edi
and     ecx, edi
and     ecx, ebp
jnz     short loc_10006e0a
mov     edi, [eax]
add     eax, 4
lea     ecx, [edi-1010101h]
not     edi
and     ecx, edi
and     ecx, ebp
jz      short loc_10006dbe
test    ecx, 8080h
jnz     short loc_10006e18
shr     ecx, 10h
add     eax, 2
shl     cl, 1
sbb     eax, edx
pop     edi
pop     ebp
retn    4
push    ebp
mov     ebp, esp
pusha
push    4ch
push    offset stru_10022650
call    rtlzeromemory
mov     eax, [ebp+arg_0]
mov     word ptr [eax], 0
mov     esi, offset stru_10022650
mov     dword ptr [esi], 4ch
mov     eax, [ebp+arg_4]
mov     [esi+0ch], eax
mov     eax, [ebp+arg_0]
mov     [esi+1ch], eax
mov     dword ptr [esi+20h], 400h
mov     eax, [ebp+arg_8]
mov     [esi+2ch], eax
mov     eax, [ebp+arg_c]
mov     [esi+4], eax
push    esi
call    getopenfilenamea
or      eax, eax
jnz     short loc_10006e85
mov     eax, [ebp+arg_0]
mov     dword ptr [eax], 0
popa
mov     eax, [ebp+arg_0]
cmp     byte ptr [eax+1], 3ah
jnz     short loc_10006e96
mov     eax, 1
jmp     short locret_10006e98
xor     eax, eax
leave
retn    10h
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
pusha
push    [ebp+lpstring]
call    lstrlena
mov     edx, [ebp+lpstring]
add     edx, eax
xor     ecx, ecx
jmp     short loc_10006ecd
mov     bl, [edx-1]
cmp     bl, 5ch
jnz     short loc_10006ecb
mov     [ebp+var_4], edx
popa
mov     eax, [ebp+var_4]
leave
retn    4
inc     ecx
dec     edx
cmp     ecx, eax
jnz     short loc_10006eb8
popa
mov     eax, [ebp+lpstring]
leave
retn    4
push    ebp
mov     ebp, esp
push    ecx
push    edx
mov     eax, [ebp+arg_0]
push    eax
xor     edx, edx
mov     ecx, [ebp+arg_4]
div     ecx
sub     ecx, edx
pop     eax
add     eax, ecx
pop     edx
pop     ecx
leave
retn    8
push    ebp
mov     ebp, esp
add     esp, 0ffffff60h
cmp     [ebp+arg_10], 1
jnz     short loc_10006f45
mov     [ebp+versioninformation.dwosversioninfosize], 94h
lea     eax, [ebp+versioninformation]
push    eax
call    getversionexa
cmp     [ebp+versioninformation.dwmajorversion], 5
jb      short loc_10006f3e
cmp     [ebp+versioninformation.dwminorversion], 1
jb      short loc_10006f3e
mov     ecx, 101h
jmp     short loc_10006f4a
mov     ecx, 1
jmp     short loc_10006f4a
mov     ecx, 1
lea     eax, [ebp+phkresult]
push    eax
push    ecx
push    0
push    [ebp+lpsubkey]
push    [ebp+hkey]
call    regopenkeyexa
or      eax, eax
jnz     short locret_10006f91
mov     eax, 1
mov     [ebp+type], eax
mov     [ebp+cbdata], 400h
lea     eax, [ebp+cbdata]
push    eax
push    [ebp+lpdata]
lea     eax, [ebp+type]
push    eax
push    0
push    [ebp+lpvaluename]
push    [ebp+phkresult]
call    regqueryvalueexa
push    eax
push    [ebp+phkresult]
call    regclosekey
pop     eax
leave
retn    14h
push    ebp
mov     ebp, esp
add     esp, 0ffffff60h
cmp     [ebp+arg_10], 1
jnz     short loc_10006fe5
mov     [ebp+versioninformation.dwosversioninfosize], 94h
lea     eax, [ebp+versioninformation]
push    eax
call    getversionexa
cmp     [ebp+versioninformation.dwmajorversion], 5
jb      short loc_10006fde
cmp     [ebp+versioninformation.dwminorversion], 1
jb      short loc_10006fde
mov     ecx, 101h
jmp     short loc_10006fea
mov     ecx, 1
jmp     short loc_10006fea
mov     ecx, 1
lea     eax, [ebp+phkresult]
push    eax
push    ecx
push    0
push    [ebp+lpsubkey]
push    [ebp+hkey]
call    regopenkeyexa
or      eax, eax
jnz     short locret_10007031
mov     eax, 4
mov     [ebp+type], eax
mov     [ebp+cbdata], 4
lea     eax, [ebp+cbdata]
push    eax
push    [ebp+lpdata]
lea     eax, [ebp+type]
push    eax
push    0
push    [ebp+lpvaluename]
push    [ebp+phkresult]
call    regqueryvalueexa
push    eax
push    [ebp+phkresult]
call    regclosekey
pop     eax
leave
retn    14h
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
pusha
mov     [ebp+var_1], 0
mov     esi, [ebp+lpstring1]
mov     edi, [ebp+lpstring]
push    edi
call    lstrlena
or      eax, eax
jz      short loc_100070a7
mov     ebx, eax
jmp     short loc_100070a2
lodsb
cmp     al, 2fh
jnz     short loc_100070a2
push    ebx
push    edi
push    ebx
push    esi
push    1
push    0
call    comparestringa
cmp     eax, 2
jnz     short loc_100070a2
mov     [ebp+var_1], 1
mov     edi, [ebp+arg_8]
or      edi, edi
jz      short loc_100070a0
add     esi, ebx
inc     esi
cmp     word ptr [esi], 2f20h
jz      short loc_1000709d
cmp     byte ptr [esi], 2fh
jz      short loc_1000709d
cmp     byte ptr [esi], 0
jz      short loc_1000709d
lodsb
cmp     al, 22h
jz      short loc_1000709b
stosb
jmp     short loc_10007084
mov     byte ptr [edi], 0
jmp     short loc_100070a7
cmp     byte ptr [esi], 0
jnz     short loc_1000705f
popa
movzx   eax, [ebp+var_1]
leave
retn    0ch
push    ebp
mov     ebp, esp
add     esp, 0fffffe00h
pusha
cmp     [ebp+arg_0], 0
jnz     short loc_100070f0
push    0
call    getmodulehandlea
lea     esi, [ebp+filename]
push    200h
push    esi
push    eax
call    getmodulefilenamea
push    esi
call    lstrlena
push    esi
add     esi, eax
jmp     short loc_100070e5
dec     esi
cmp     byte ptr [esi], 5ch
jnz     short loc_100070e4
mov     byte ptr [esi], 0
pop     esi
jmp     short loc_100070f3
mov     esi, [ebp+arg_0]
push    esi
call    setcurrentdirectorya
popa
leave
retn    4
push    ebp
mov     ebp, esp
pusha
push    [ebp+lpstring2]
push    [ebp+lpstring1]
call    lstrcpya
mov     esi, offset stru_10022650.dwreserved
mov     dword ptr [esi], 4ch
push    [ebp+arg_4]
pop     dword ptr [esi+0ch]
push    [ebp+lpstring1]
pop     dword ptr [esi+1ch]
mov     dword ptr [esi+20h], 400h
mov     dword ptr [esi+34h], 2
push    [ebp+arg_8]
pop     dword ptr [esi+2ch]
push    [ebp+arg_c]
pop     dword ptr [esi+4]
push    esi
call    getsavefilenamea
or      eax, eax
jnz     short loc_10007153
mov     eax, [ebp+lpstring1]
mov     dword ptr [eax], 0
popa
mov     eax, [ebp+lpstring1]
cmp     byte ptr [eax+1], 3ah
jnz     short loc_10007164
mov     eax, 1
jmp     short locret_10007166
xor     eax, eax
leave
retn    14h
push    ebp
mov     ebp, esp
add     esp, 0fffffbfch
pusha
mov     [ebp+var_1], 0
mov     esi, [ebp+arg_0]
or      esi, esi
jz      short loc_100071ca
push    esi
call    getfileattributesa
cmp     eax, 0ffffffffh
jnz     short loc_100071ca
cmp     byte ptr [esi], 0
jz      short loc_100071ca
lea     edi, [ebp+pathname]
jmp     short loc_1000719f
lodsb
stosb
cmp     byte ptr [esi], 5ch
jz      short loc_100071a9
cmp     byte ptr [esi], 0
jnz     short loc_1000719d
cmp     al, 3ah
jz      short loc_1000719d
lodsb
stosb
mov     byte ptr [edi], 0
push    0
lea     eax, [ebp+pathname]
push    eax
call    createdirectorya
cmp     byte ptr [esi-1], 0
jnz     short loc_1000719b
mov     [ebp+var_1], 1
popa
movzx   eax, [ebp+var_1]
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0fffffffch
pusha
mov     [ebp+var_1], 0
mov     esi, [ebp+arg_0]
or      esi, esi
jz      short loc_1000724e
push    esi
call    lstrlena
or      eax, eax
jz      short loc_1000724e
mov     ebx, eax
push    0
call    openclipboard
cmp     eax, 1
jnz     short loc_1000724e
add     ebx, 2
push    ebx
push    2042h
call    globalalloc
or      eax, eax
jz      short loc_10007249
mov     ebx, eax
push    ebx
call    globallock
or      eax, eax
jz      short loc_10007249
mov     edi, eax
push    esi
push    edi
call    lstrcpya
call    emptyclipboard
cmp     eax, 1
jnz     short loc_10007249
push    edi
call    globalunlock
push    ebx
push    1
call    setclipboarddata
call    closeclipboard
popa
movzx   eax, [ebp+var_1]
leave
retn    4
push    ebp
mov     ebp, esp
add     esp, 0ffffffd8h
push    esi
push    edi
push    ebx
lea     esi, [ebp+rect]
lea     edi, [ebp+var_20]
push    esi
push    [ebp+hwnd]
call    getclientrect
push    edi
push    [ebp+arg_4]
call    getclientrect
xor     bl, bl
mov     eax, [edi+8]
mov     ecx, [esi+8]
cmp     eax, ecx
jnb     short loc_10007290
xchg    eax, ecx
inc     bl
sub     eax, ecx
shr     eax, 1
or      bl, bl
jz      short loc_1000729a
neg     eax
mov     [ebp+var_24], eax
xor     bl, bl
mov     eax, [edi+0ch]
mov     ecx, [esi+0ch]
cmp     eax, ecx
jnb     short loc_100072ac
xchg    eax, ecx
inc     bl
sub     eax, ecx
shr     eax, 1
or      bl, bl
jz      short loc_100072b6
neg     eax
mov     [ebp+var_28], eax
push    edi
push    [ebp+arg_4]
call    getwindowrect
push    esi
push    [ebp+hwnd]
call    getwindowrect
mov     edx, [esi+8]
sub     edx, [esi]
mov     ebx, [esi+0ch]
sub     ebx, [esi+4]
mov     eax, [ebp+var_24]
add     eax, [edi]
mov     ecx, [ebp+var_28]
add     ecx, [edi+4]
push    1
push    ebx
push    edx
push    ecx
push    eax
push    [ebp+hwnd]
call    movewindow
pop     ebx
pop     edi
pop     esi
leave
retn    8
push    ebp
mov     ebp, esp
mov     edx, [ebp+arg_4]
mov     eax, [ebp+arg_0]
mov     cl, [eax]
jmp     short loc_1000731f
cmp     cl, [edx]
jz      short loc_10007315
or      cl, cl
jnz     short loc_1000731e
mov     eax, 1
leave
retn    8
inc     edx
cmp     byte ptr [edx], 0
jnz     short loc_1000730d
xor     eax, eax
leave
retn    8
mov     edx, [esp+arg_0]
mov     eax, offset qword_100226f0
movq    mm0, qword ptr [edx]
movq    mm4, mm0
movq    mm5, mm0
movq    mm6, mm0
pand    mm0, qword_1000d838
pand    mm4, qword_1000d840
pand    mm5, qword_1000d848
pand    mm6, qword_1000d850
psllq   mm0, 18h
psllq   mm4, 8
psrlq   mm5, 8
psrlq   mm6, 18h
por     mm4, mm5
por     mm0, mm6
por     mm0, mm4
movq    mm4, mm0
psllq   mm0, 20h
psrlq   mm4, 20h
por     mm0, mm4
movq    mm1, qword ptr [edx+8]
movq    mm4, mm1
movq    mm5, mm1
movq    mm6, mm1
pand    mm1, qword_1000d838
pand    mm4, qword_1000d840
pand    mm5, qword_1000d848
pand    mm6, qword_1000d850
psllq   mm1, 18h
psllq   mm4, 8
psrlq   mm5, 8
psrlq   mm6, 18h
por     mm4, mm5
por     mm1, mm6
por     mm1, mm4
movq    mm4, mm1
psllq   mm1, 20h
psrlq   mm4, 20h
por     mm1, mm4
movq    mm6, qword_1000d858
movq    mm7, qword_1000d860
movq    mm2, mm0
movq    mm3, mm0
movq    mm4, mm0
movq    mm5, mm0
pand    mm2, mm6
pand    mm3, mm7
pand    mm4, qword_1000d868
pand    mm5, qword_1000d870
psllq   mm2, 30h
psllq   mm3, 10h
psrlq   mm4, 10h
psrlq   mm5, 30h
por     mm2, mm3
por     mm2, mm4
por     mm2, mm5
movq    qword ptr [eax], mm2
movq    mm2, mm1
movq    mm3, mm1
movq    mm4, mm1
movq    mm5, mm1
pand    mm2, mm6
pand    mm3, mm7
pand    mm4, qword_1000d868
pand    mm5, qword_1000d870
psllq   mm2, 30h
psllq   mm3, 10h
psrlq   mm4, 10h
psrlq   mm5, 30h
por     mm2, mm3
por     mm2, mm4
por     mm2, mm5
movq    qword ptr [eax+8], mm2
movq    mm2, mm0
movq    mm3, mm1
psllq   mm0, 19h
psllq   mm1, 19h
psrlq   mm2, 27h
psrlq   mm3, 27h
por     mm0, mm3
por     mm1, mm2
movq    mm2, mm0
movq    mm3, mm0
movq    mm4, mm0
movq    mm5, mm0
pand    mm2, mm6
pand    mm3, mm7
pand    mm4, qword_1000d868
pand    mm5, qword_1000d870
psllq   mm2, 30h
psllq   mm3, 10h
psrlq   mm4, 10h
psrlq   mm5, 30h
por     mm2, mm3
por     mm2, mm4
por     mm2, mm5
movq    qword ptr [eax+10h], mm2
movq    mm2, mm1
movq    mm3, mm1
movq    mm4, mm1
movq    mm5, mm1
pand    mm2, mm6
pand    mm3, mm7
pand    mm4, qword_1000d868
pand    mm5, qword_1000d870
psllq   mm2, 30h
psllq   mm3, 10h
psrlq   mm4, 10h
psrlq   mm5, 30h
por     mm2, mm3
por     mm2, mm4
por     mm2, mm5
movq    qword ptr [eax+18h], mm2
movq    mm2, mm0
movq    mm3, mm1
psllq   mm0, 19h
psllq   mm1, 19h
psrlq   mm2, 27h
psrlq   mm3, 27h
por     mm0, mm3
por     mm1, mm2
movq    mm2, mm0
movq    mm3, mm0
movq    mm4, mm0
movq    mm5, mm0
pand    mm2, mm6
pand    mm3, mm7
pand    mm4, qword_1000d868
pand    mm5, qword_1000d870
psllq   mm2, 30h
psllq   mm3, 10h
psrlq   mm4, 10h
psrlq   mm5, 30h
por     mm2, mm3
por     mm2, mm4
por     mm2, mm5
movq    qword ptr [eax+20h], mm2
movq    mm2, mm1
movq    mm3, mm1
movq    mm4, mm1
movq    mm5, mm1
pand    mm2, mm6
pand    mm3, mm7
pand    mm4, qword_1000d868
pand    mm5, qword_1000d870
psllq   mm2, 30h
psllq   mm3, 10h
psrlq   mm4, 10h
psrlq   mm5, 30h
por     mm2, mm3
por     mm2, mm4
por     mm2, mm5
movq    qword ptr [eax+28h], mm2
movq    mm2, mm0
movq    mm3, mm1
psllq   mm0, 19h
psllq   mm1, 19h
psrlq   mm2, 27h
psrlq   mm3, 27h
por     mm0, mm3
por     mm1, mm2
movq    mm2, mm0
movq    mm3, mm0
movq    mm4, mm0
movq    mm5, mm0
pand    mm2, mm6
pand    mm3, mm7
pand    mm4, qword_1000d868
pand    mm5, qword_1000d870
psllq   mm2, 30h
psllq   mm3, 10h
psrlq   mm4, 10h
psrlq   mm5, 30h
por     mm2, mm3
por     mm2, mm4
por     mm2, mm5
movq    qword ptr [eax+30h], mm2
movq    mm2, mm1
movq    mm3, mm1
movq    mm4, mm1
movq    mm5, mm1
pand    mm2, mm6
pand    mm3, mm7
pand    mm4, qword_1000d868
pand    mm5, qword_1000d870
psllq   mm2, 30h
psllq   mm3, 10h
psrlq   mm4, 10h
psrlq   mm5, 30h
por     mm2, mm3
por     mm2, mm4
por     mm2, mm5
movq    qword ptr [eax+38h], mm2
movq    mm2, mm0
movq    mm3, mm1
psllq   mm0, 19h
psllq   mm1, 19h
psrlq   mm2, 27h
psrlq   mm3, 27h
por     mm0, mm3
por     mm1, mm2
movq    mm2, mm0
movq    mm3, mm0
movq    mm4, mm0
movq    mm5, mm0
pand    mm2, mm6
pand    mm3, mm7
pand    mm4, qword_1000d868
pand    mm5, qword_1000d870
psllq   mm2, 30h
psllq   mm3, 10h
psrlq   mm4, 10h
psrlq   mm5, 30h
por     mm2, mm3
por     mm2, mm4
por     mm2, mm5
movq    qword ptr [eax+40h], mm2
movq    mm2, mm1
movq    mm3, mm1
movq    mm4, mm1
movq    mm5, mm1
pand    mm2, mm6
pand    mm3, mm7
pand    mm4, qword_1000d868
pand    mm5, qword_1000d870
psllq   mm2, 30h
psllq   mm3, 10h
psrlq   mm4, 10h
psrlq   mm5, 30h
por     mm2, mm3
por     mm2, mm4
por     mm2, mm5
movq    qword ptr [eax+48h], mm2
movq    mm2, mm0
movq    mm3, mm1
psllq   mm0, 19h
psllq   mm1, 19h
psrlq   mm2, 27h
psrlq   mm3, 27h
por     mm0, mm3
por     mm1, mm2
movq    mm2, mm0
movq    mm3, mm0
movq    mm4, mm0
movq    mm5, mm0
pand    mm2, mm6
pand    mm3, mm7
pand    mm4, qword_1000d868
pand    mm5, qword_1000d870
psllq   mm2, 30h
psllq   mm3, 10h
psrlq   mm4, 10h
psrlq   mm5, 30h
por     mm2, mm3
por     mm2, mm4
por     mm2, mm5
movq    qword ptr [eax+50h], mm2
movq    mm2, mm1
movq    mm3, mm1
movq    mm4, mm1
movq    mm5, mm1
pand    mm2, mm6
pand    mm3, mm7
pand    mm4, qword_1000d868
pand    mm5, qword_1000d870
psllq   mm2, 30h
psllq   mm3, 10h
psrlq   mm4, 10h
psrlq   mm5, 30h
por     mm2, mm3
por     mm2, mm4
por     mm2, mm5
movq    qword ptr [eax+58h], mm2
movq    mm2, mm0
movq    mm3, mm1
psllq   mm0, 19h
psllq   mm1, 19h
psrlq   mm2, 27h
psrlq   mm3, 27h
por     mm0, mm3
por     mm1, mm2
movq    mm2, mm0
movq    mm3, mm0
movq    mm4, mm0
movq    mm5, mm0
pand    mm2, mm6
pand    mm3, mm7
pand    mm4, qword_1000d868
pand    mm5, qword_1000d870
psllq   mm2, 30h
psllq   mm3, 10h
psrlq   mm4, 10h
psrlq   mm5, 30h
por     mm2, mm3
por     mm2, mm4
por     mm2, mm5
movq    qword ptr [eax+60h], mm2
retn    4
mov     edx, [esp+4]
movq    mm0, qword ptr [edx]
movq    mm1, mm0
psllw   mm0, 8
psrlw   mm1, 8
por     mm0, mm1
pxor    mm7, mm7
pshufw  mm1, mm0, 9
punpckldq mm1, mm7
pshufw  mm0, mm0, 0ch
punpckldq mm0, mm7
mov     ecx, dword_100226f8
movq    mm6, qword_100226f0
pshufw  mm5, mm6, 0ch
punpckldq mm5, mm7
pshufw  mm4, mm6, 9
punpckldq mm4, mm7
paddw   mm1, mm4
movd    eax, mm1
movq    mm2, mm0
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm0
movq    mm4, mm3
paddw   mm0, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm0, mm4
psubw   mm3, mm2
pxor    mm0, mm4
psubusw mm1, mm2
psubw   mm0, mm4
pcmpeqw mm1, mm7
pand    mm0, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm0, mm3
movd    mm1, eax
movd    mm5, ecx
pshufw  mm6, mm1, 0a1h
pxor    mm6, mm0
movd    edx, mm6
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
pslld   mm6, 10h
movd    mm4, edx
paddw   mm6, mm4
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
movd    mm1, eax
pshufw  mm5, mm6, 0a9h
punpcklwd mm5, mm7
paddw   mm5, mm6
pshufw  mm4, mm5, 0a1h
pxor    mm0, mm4
pxor    mm5, mm1
pshufw  mm1, mm5, 0a1h
mov     ecx, dword_10022704
movq    mm6, qword_100226fc
pshufw  mm5, mm6, 0ch
punpckldq mm5, mm7
pshufw  mm4, mm6, 9
punpckldq mm4, mm7
paddw   mm1, mm4
movd    eax, mm1
movq    mm2, mm0
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm0
movq    mm4, mm3
paddw   mm0, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm0, mm4
psubw   mm3, mm2
pxor    mm0, mm4
psubusw mm1, mm2
psubw   mm0, mm4
pcmpeqw mm1, mm7
pand    mm0, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm0, mm3
movd    mm1, eax
movd    mm5, ecx
pshufw  mm6, mm1, 0a1h
pxor    mm6, mm0
movd    edx, mm6
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
pslld   mm6, 10h
movd    mm4, edx
paddw   mm6, mm4
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
movd    mm1, eax
pshufw  mm5, mm6, 0a9h
punpcklwd mm5, mm7
paddw   mm5, mm6
pshufw  mm4, mm5, 0a1h
pxor    mm0, mm4
pxor    mm5, mm1
pshufw  mm1, mm5, 0a1h
mov     ecx, dword_10022710
movq    mm6, qword_10022708
pshufw  mm5, mm6, 0ch
punpckldq mm5, mm7
pshufw  mm4, mm6, 9
punpckldq mm4, mm7
paddw   mm1, mm4
movd    eax, mm1
movq    mm2, mm0
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm0
movq    mm4, mm3
paddw   mm0, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm0, mm4
psubw   mm3, mm2
pxor    mm0, mm4
psubusw mm1, mm2
psubw   mm0, mm4
pcmpeqw mm1, mm7
pand    mm0, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm0, mm3
movd    mm1, eax
movd    mm5, ecx
pshufw  mm6, mm1, 0a1h
pxor    mm6, mm0
movd    edx, mm6
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
pslld   mm6, 10h
movd    mm4, edx
paddw   mm6, mm4
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
movd    mm1, eax
pshufw  mm5, mm6, 0a9h
punpcklwd mm5, mm7
paddw   mm5, mm6
pshufw  mm4, mm5, 0a1h
pxor    mm0, mm4
pxor    mm5, mm1
pshufw  mm1, mm5, 0a1h
mov     ecx, dword_1002271c
movq    mm6, qword_10022714
pshufw  mm5, mm6, 0ch
punpckldq mm5, mm7
pshufw  mm4, mm6, 9
punpckldq mm4, mm7
paddw   mm1, mm4
movd    eax, mm1
movq    mm2, mm0
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm0
movq    mm4, mm3
paddw   mm0, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm0, mm4
psubw   mm3, mm2
pxor    mm0, mm4
psubusw mm1, mm2
psubw   mm0, mm4
pcmpeqw mm1, mm7
pand    mm0, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm0, mm3
movd    mm1, eax
movd    mm5, ecx
pshufw  mm6, mm1, 0a1h
pxor    mm6, mm0
movd    edx, mm6
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
pslld   mm6, 10h
movd    mm4, edx
paddw   mm6, mm4
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
movd    mm1, eax
pshufw  mm5, mm6, 0a9h
punpcklwd mm5, mm7
paddw   mm5, mm6
pshufw  mm4, mm5, 0a1h
pxor    mm0, mm4
pxor    mm5, mm1
pshufw  mm1, mm5, 0a1h
mov     ecx, dword_10022728
movq    mm6, qword_10022720
pshufw  mm5, mm6, 0ch
punpckldq mm5, mm7
pshufw  mm4, mm6, 9
punpckldq mm4, mm7
paddw   mm1, mm4
movd    eax, mm1
movq    mm2, mm0
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm0
movq    mm4, mm3
paddw   mm0, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm0, mm4
psubw   mm3, mm2
pxor    mm0, mm4
psubusw mm1, mm2
psubw   mm0, mm4
pcmpeqw mm1, mm7
pand    mm0, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm0, mm3
movd    mm1, eax
movd    mm5, ecx
pshufw  mm6, mm1, 0a1h
pxor    mm6, mm0
movd    edx, mm6
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
pslld   mm6, 10h
movd    mm4, edx
paddw   mm6, mm4
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
movd    mm1, eax
pshufw  mm5, mm6, 0a9h
punpcklwd mm5, mm7
paddw   mm5, mm6
pshufw  mm4, mm5, 0a1h
pxor    mm0, mm4
pxor    mm5, mm1
pshufw  mm1, mm5, 0a1h
mov     ecx, dword_10022734
movq    mm6, qword_1002272c
pshufw  mm5, mm6, 0ch
punpckldq mm5, mm7
pshufw  mm4, mm6, 9
punpckldq mm4, mm7
paddw   mm1, mm4
movd    eax, mm1
movq    mm2, mm0
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm0
movq    mm4, mm3
paddw   mm0, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm0, mm4
psubw   mm3, mm2
pxor    mm0, mm4
psubusw mm1, mm2
psubw   mm0, mm4
pcmpeqw mm1, mm7
pand    mm0, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm0, mm3
movd    mm1, eax
movd    mm5, ecx
pshufw  mm6, mm1, 0a1h
pxor    mm6, mm0
movd    edx, mm6
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
pslld   mm6, 10h
movd    mm4, edx
paddw   mm6, mm4
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
movd    mm1, eax
pshufw  mm5, mm6, 0a9h
punpcklwd mm5, mm7
paddw   mm5, mm6
pshufw  mm4, mm5, 0a1h
pxor    mm0, mm4
pxor    mm5, mm1
pshufw  mm1, mm5, 0a1h
mov     ecx, dword_10022740
movq    mm6, qword_10022738
pshufw  mm5, mm6, 0ch
punpckldq mm5, mm7
pshufw  mm4, mm6, 9
punpckldq mm4, mm7
paddw   mm1, mm4
movd    eax, mm1
movq    mm2, mm0
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm0
movq    mm4, mm3
paddw   mm0, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm0, mm4
psubw   mm3, mm2
pxor    mm0, mm4
psubusw mm1, mm2
psubw   mm0, mm4
pcmpeqw mm1, mm7
pand    mm0, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm0, mm3
movd    mm1, eax
movd    mm5, ecx
pshufw  mm6, mm1, 0a1h
pxor    mm6, mm0
movd    edx, mm6
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
pslld   mm6, 10h
movd    mm4, edx
paddw   mm6, mm4
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
movd    mm1, eax
pshufw  mm5, mm6, 0a9h
punpcklwd mm5, mm7
paddw   mm5, mm6
pshufw  mm4, mm5, 0a1h
pxor    mm0, mm4
pxor    mm5, mm1
pshufw  mm1, mm5, 0a1h
mov     ecx, dword_1002274c
movq    mm6, qword_10022744
pshufw  mm5, mm6, 0ch
punpckldq mm5, mm7
pshufw  mm4, mm6, 9
punpckldq mm4, mm7
paddw   mm1, mm4
movd    eax, mm1
movq    mm2, mm0
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm0
movq    mm4, mm3
paddw   mm0, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm0, mm4
psubw   mm3, mm2
pxor    mm0, mm4
psubusw mm1, mm2
psubw   mm0, mm4
pcmpeqw mm1, mm7
pand    mm0, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm0, mm3
movd    mm1, eax
movd    mm5, ecx
pshufw  mm6, mm1, 0a1h
pxor    mm6, mm0
movd    edx, mm6
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
pslld   mm6, 10h
movd    mm4, edx
paddw   mm6, mm4
movq    mm2, mm6
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm6
movq    mm4, mm3
paddw   mm6, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm6, mm4
psubw   mm3, mm2
pxor    mm6, mm4
psubusw mm1, mm2
psubw   mm6, mm4
pcmpeqw mm1, mm7
pand    mm6, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm6, mm3
movd    mm1, eax
pshufw  mm5, mm6, 0a9h
punpcklwd mm5, mm7
paddw   mm5, mm6
pshufw  mm4, mm5, 0a1h
pxor    mm0, mm4
pxor    mm5, mm1
pshufw  mm1, mm5, 0a1h
movq    mm6, qword_10022750
pshufw  mm5, mm6, 0fch
punpckldq mm5, mm7
pshufw  mm4, mm6, 0f6h
punpckldq mm4, mm7
paddw   mm1, mm4
movd    eax, mm1
movq    mm2, mm0
movq    mm3, mm5
pmulhuw mm2, mm5
pmullw  mm3, mm0
movq    mm4, mm3
paddw   mm0, mm5
pcmpeqw mm4, mm2
movq    mm1, mm3
paddw   mm0, mm4
psubw   mm3, mm2
pxor    mm0, mm4
psubusw mm1, mm2
psubw   mm0, mm4
pcmpeqw mm1, mm7
pand    mm0, mm4
psubw   mm3, mm1
pcmpeqw mm4, mm7
pand    mm3, mm4
paddw   mm0, mm3
movd    mm1, eax
punpckldq mm0, mm7
punpckldq mm1, mm7
pshufw  mm0, mm0, 7ch
pshufw  mm1, mm1, 0c7h
mov     eax, [esp+8]
por     mm0, mm1
movq    mm1, mm0
psllw   mm0, 8
psrlw   mm1, 8
por     mm0, mm1
movq    qword ptr [eax], mm0
retn    8
push    dword ptr [esp+4]
call    sub_10007330
push    ebp
push    edi
push    esi
push    ebx
sub     esp, 68h
mov     ebp, offset qword_100226f0
mov     eax, [ebp+5ch]
mov     ebx, [ebp+50h]
mov     ecx, [ebp+44h]
mov     edx, [ebp+38h]
mov     [esp+8], eax
mov     [esp+14h], ebx
mov     [esp+20h], ecx
mov     [esp+2ch], edx
mov     eax, [ebp+2ch]
mov     ebx, [ebp+20h]
mov     ecx, [ebp+14h]
mov     edx, [ebp+8]
mov     [esp+38h], eax
mov     [esp+44h], ebx
mov     [esp+50h], ecx
mov     [esp+5ch], edx
movzx   eax, word ptr [ebp+60h]
movzx   edi, word ptr [ebp+62h]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     edi, 10h
or      eax, edi
mov     [esp], eax
movzx   edi, word ptr [ebp+64h]
movzx   eax, word ptr [ebp+66h]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     eax, 10h
and     edi, 0ffffh
or      eax, edi
mov     [esp+4], eax
movzx   eax, word ptr [ebp+54h]
movzx   edi, word ptr [ebp+58h]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     edi, 10h
or      eax, edi
mov     [esp+0ch], eax
movzx   edi, word ptr [ebp+56h]
movzx   eax, word ptr [ebp+5ah]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     eax, 10h
and     edi, 0ffffh
or      eax, edi
mov     [esp+10h], eax
movzx   eax, word ptr [ebp+48h]
movzx   edi, word ptr [ebp+4ch]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     edi, 10h
or      eax, edi
mov     [esp+18h], eax
movzx   edi, word ptr [ebp+4ah]
movzx   eax, word ptr [ebp+4eh]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     eax, 10h
and     edi, 0ffffh
or      eax, edi
mov     [esp+1ch], eax
movzx   eax, word ptr [ebp+3ch]
movzx   edi, word ptr [ebp+40h]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     edi, 10h
or      eax, edi
mov     [esp+24h], eax
movzx   edi, word ptr [ebp+3eh]
movzx   eax, word ptr [ebp+42h]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     eax, 10h
and     edi, 0ffffh
or      eax, edi
mov     [esp+28h], eax
movzx   eax, word ptr [ebp+30h]
movzx   edi, word ptr [ebp+34h]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     edi, 10h
or      eax, edi
mov     [esp+30h], eax
movzx   edi, word ptr [ebp+32h]
movzx   eax, word ptr [ebp+36h]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     eax, 10h
and     edi, 0ffffh
or      eax, edi
mov     [esp+34h], eax
movzx   eax, word ptr [ebp+24h]
movzx   edi, word ptr [ebp+28h]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     edi, 10h
or      eax, edi
mov     [esp+3ch], eax
movzx   edi, word ptr [ebp+26h]
movzx   eax, word ptr [ebp+2ah]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     eax, 10h
and     edi, 0ffffh
or      eax, edi
mov     [esp+40h], eax
movzx   eax, word ptr [ebp+18h]
movzx   edi, word ptr [ebp+1ch]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     edi, 10h
or      eax, edi
mov     [esp+48h], eax
movzx   edi, word ptr [ebp+1ah]
movzx   eax, word ptr [ebp+1eh]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     eax, 10h
and     edi, 0ffffh
or      eax, edi
mov     [esp+4ch], eax
movzx   eax, word ptr [ebp+0ch]
movzx   edi, word ptr [ebp+10h]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     edi, 10h
or      eax, edi
mov     [esp+54h], eax
movzx   edi, word ptr [ebp+0eh]
movzx   eax, word ptr [ebp+12h]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     eax, 10h
and     edi, 0ffffh
or      eax, edi
mov     [esp+58h], eax
movzx   eax, word ptr [ebp+0]
movzx   edi, word ptr [ebp+2]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     edi, 10h
or      eax, edi
mov     [esp+60h], eax
movzx   edi, word ptr [ebp+4]
movzx   eax, word ptr [ebp+6]
xor     edx, edx
xor     ecx, ecx
mov     ebx, eax
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
mul     ax
sub     ax, dx
adc     ax, cx
mul     bx
sub     ax, dx
adc     ax, cx
neg     edi
shl     eax, 10h
and     edi, 0ffffh
or      eax, edi
mov     [esp+64h], eax
movq    mm0, qword ptr [esp]
movq    mm1, qword ptr [esp+8]
movq    mm2, qword ptr [esp+10h]
movq    mm3, qword ptr [esp+18h]
movq    mm4, qword ptr [esp+20h]
movq    mm5, qword ptr [esp+28h]
movq    mm6, qword ptr [esp+30h]
movq    mm7, qword ptr [esp+38h]
movq    qword ptr [ebp+0], mm0
movq    qword ptr [ebp+8], mm1
movq    qword ptr [ebp+10h], mm2
movq    qword ptr [ebp+18h], mm3
movq    qword ptr [ebp+20h], mm4
movq    qword ptr [ebp+28h], mm5
movq    qword ptr [ebp+30h], mm6
movq    qword ptr [ebp+38h], mm7
movq    mm0, qword ptr [esp+40h]
movq    mm1, qword ptr [esp+48h]
movq    mm2, qword ptr [esp+50h]
movq    mm3, qword ptr [esp+58h]
movq    mm4, qword ptr [esp+60h]
movq    qword ptr [ebp+40h], mm0
movq    qword ptr [ebp+48h], mm1
movq    qword ptr [ebp+50h], mm2
movq    qword ptr [ebp+58h], mm3
movq    qword ptr [ebp+60h], mm4
add     esp, 68h
pop     ebx
pop     esi
pop     edi
pop     ebp
retn    4
push    ebp
push    edi
push    esi
push    ebx
mov     ebx, [esp+14h]
movq    mm0, qword ptr [ebx]
pxor    mm2, mm2
movq    mm1, mm0
psllw   mm0, 8
psrlw   mm1, 8
por     mm0, mm1
movq    mm1, mm0
punpcklwd mm0, mm2
punpckhwd mm1, mm2
movq    mm3, mm0
movq    mm4, mm1
punpckldq mm0, mm2
punpckhdq mm3, mm2
punpckldq mm1, mm2
punpckhdq mm4, mm2
movd    eax, mm0
movd    edi, mm3
movd    esi, mm1
movd    ebp, mm4
movzx   ecx, word ptr qword_100226f0
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, word ptr qword_100226f0+2
add     si, word ptr qword_100226f0+4
movzx   ecx, word ptr qword_100226f0+6
lea     ebx, [ecx+ebp-1]
imul    ebp, ecx
neg     ebx
mov     edx, ebp
and     ebp, 0ffffh
shr     edx, 10h
sub     ebp, edx
adc     ebp, 0
cmp     ebp, 1
sbb     edx, edx
and     edx, ebx
add     ebp, edx
and     ebp, 0ffffh
movd    mm0, eax
movd    mm3, edi
xor     eax, esi
xor     edi, ebp
movzx   ecx, word ptr dword_100226f8
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, ax
movzx   ecx, word ptr dword_100226f8+2
lea     ebx, [ecx+edi-1]
imul    edi, ecx
neg     ebx
mov     edx, edi
and     edi, 0ffffh
shr     edx, 10h
sub     edi, edx
adc     edi, 0
cmp     edi, 1
sbb     edx, edx
and     edx, ebx
add     edi, edx
and     edi, 0ffffh
add     ax, di
movd    edx, mm0
movd    ebx, mm3
xor     edx, edi
xor     ebp, eax
xor     eax, ebx
xor     edi, esi
mov     esi, eax
mov     eax, edx
movzx   ecx, word ptr qword_100226fc
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, word ptr qword_100226fc+2
add     si, word ptr qword_100226fc+4
movzx   ecx, word ptr qword_100226fc+6
lea     ebx, [ecx+ebp-1]
imul    ebp, ecx
neg     ebx
mov     edx, ebp
and     ebp, 0ffffh
shr     edx, 10h
sub     ebp, edx
adc     ebp, 0
cmp     ebp, 1
sbb     edx, edx
and     edx, ebx
add     ebp, edx
and     ebp, 0ffffh
movd    mm0, eax
movd    mm3, edi
xor     eax, esi
xor     edi, ebp
movzx   ecx, word ptr dword_10022704
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, ax
movzx   ecx, word ptr dword_10022704+2
lea     ebx, [ecx+edi-1]
imul    edi, ecx
neg     ebx
mov     edx, edi
and     edi, 0ffffh
shr     edx, 10h
sub     edi, edx
adc     edi, 0
cmp     edi, 1
sbb     edx, edx
and     edx, ebx
add     edi, edx
and     edi, 0ffffh
add     ax, di
movd    edx, mm0
movd    ebx, mm3
xor     edx, edi
xor     ebp, eax
xor     eax, ebx
xor     edi, esi
mov     esi, eax
mov     eax, edx
movzx   ecx, word ptr qword_10022708
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, word ptr qword_10022708+2
add     si, word ptr qword_10022708+4
movzx   ecx, word ptr qword_10022708+6
lea     ebx, [ecx+ebp-1]
imul    ebp, ecx
neg     ebx
mov     edx, ebp
and     ebp, 0ffffh
shr     edx, 10h
sub     ebp, edx
adc     ebp, 0
cmp     ebp, 1
sbb     edx, edx
and     edx, ebx
add     ebp, edx
and     ebp, 0ffffh
movd    mm0, eax
movd    mm3, edi
xor     eax, esi
xor     edi, ebp
movzx   ecx, word ptr dword_10022710
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, ax
movzx   ecx, word ptr dword_10022710+2
lea     ebx, [ecx+edi-1]
imul    edi, ecx
neg     ebx
mov     edx, edi
and     edi, 0ffffh
shr     edx, 10h
sub     edi, edx
adc     edi, 0
cmp     edi, 1
sbb     edx, edx
and     edx, ebx
add     edi, edx
and     edi, 0ffffh
add     ax, di
movd    edx, mm0
movd    ebx, mm3
xor     edx, edi
xor     ebp, eax
xor     eax, ebx
xor     edi, esi
mov     esi, eax
mov     eax, edx
movzx   ecx, word ptr qword_10022714
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, word ptr qword_10022714+2
add     si, word ptr qword_10022714+4
movzx   ecx, word ptr qword_10022714+6
lea     ebx, [ecx+ebp-1]
imul    ebp, ecx
neg     ebx
mov     edx, ebp
and     ebp, 0ffffh
shr     edx, 10h
sub     ebp, edx
adc     ebp, 0
cmp     ebp, 1
sbb     edx, edx
and     edx, ebx
add     ebp, edx
and     ebp, 0ffffh
movd    mm0, eax
movd    mm3, edi
xor     eax, esi
xor     edi, ebp
movzx   ecx, word ptr dword_1002271c
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, ax
movzx   ecx, word ptr dword_1002271c+2
lea     ebx, [ecx+edi-1]
imul    edi, ecx
neg     ebx
mov     edx, edi
and     edi, 0ffffh
shr     edx, 10h
sub     edi, edx
adc     edi, 0
cmp     edi, 1
sbb     edx, edx
and     edx, ebx
add     edi, edx
and     edi, 0ffffh
add     ax, di
movd    edx, mm0
movd    ebx, mm3
xor     edx, edi
xor     ebp, eax
xor     eax, ebx
xor     edi, esi
mov     esi, eax
mov     eax, edx
movzx   ecx, word ptr qword_10022720
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, word ptr qword_10022720+2
add     si, word ptr qword_10022720+4
movzx   ecx, word ptr qword_10022720+6
lea     ebx, [ecx+ebp-1]
imul    ebp, ecx
neg     ebx
mov     edx, ebp
and     ebp, 0ffffh
shr     edx, 10h
sub     ebp, edx
adc     ebp, 0
cmp     ebp, 1
sbb     edx, edx
and     edx, ebx
add     ebp, edx
and     ebp, 0ffffh
movd    mm0, eax
movd    mm3, edi
xor     eax, esi
xor     edi, ebp
movzx   ecx, word ptr dword_10022728
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, ax
movzx   ecx, word ptr dword_10022728+2
lea     ebx, [ecx+edi-1]
imul    edi, ecx
neg     ebx
mov     edx, edi
and     edi, 0ffffh
shr     edx, 10h
sub     edi, edx
adc     edi, 0
cmp     edi, 1
sbb     edx, edx
and     edx, ebx
add     edi, edx
and     edi, 0ffffh
add     ax, di
movd    edx, mm0
movd    ebx, mm3
xor     edx, edi
xor     ebp, eax
xor     eax, ebx
xor     edi, esi
mov     esi, eax
mov     eax, edx
movzx   ecx, word ptr qword_1002272c
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, word ptr qword_1002272c+2
add     si, word ptr qword_1002272c+4
movzx   ecx, word ptr qword_1002272c+6
lea     ebx, [ecx+ebp-1]
imul    ebp, ecx
neg     ebx
mov     edx, ebp
and     ebp, 0ffffh
shr     edx, 10h
sub     ebp, edx
adc     ebp, 0
cmp     ebp, 1
sbb     edx, edx
and     edx, ebx
add     ebp, edx
and     ebp, 0ffffh
movd    mm0, eax
movd    mm3, edi
xor     eax, esi
xor     edi, ebp
movzx   ecx, word ptr dword_10022734
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, ax
movzx   ecx, word ptr dword_10022734+2
lea     ebx, [ecx+edi-1]
imul    edi, ecx
neg     ebx
mov     edx, edi
and     edi, 0ffffh
shr     edx, 10h
sub     edi, edx
adc     edi, 0
cmp     edi, 1
sbb     edx, edx
and     edx, ebx
add     edi, edx
and     edi, 0ffffh
add     ax, di
movd    edx, mm0
movd    ebx, mm3
xor     edx, edi
xor     ebp, eax
xor     eax, ebx
xor     edi, esi
mov     esi, eax
mov     eax, edx
movzx   ecx, word ptr qword_10022738
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, word ptr qword_10022738+2
add     si, word ptr qword_10022738+4
movzx   ecx, word ptr qword_10022738+6
lea     ebx, [ecx+ebp-1]
imul    ebp, ecx
neg     ebx
mov     edx, ebp
and     ebp, 0ffffh
shr     edx, 10h
sub     ebp, edx
adc     ebp, 0
cmp     ebp, 1
sbb     edx, edx
and     edx, ebx
add     ebp, edx
and     ebp, 0ffffh
movd    mm0, eax
movd    mm3, edi
xor     eax, esi
xor     edi, ebp
movzx   ecx, word ptr dword_10022740
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, ax
movzx   ecx, word ptr dword_10022740+2
lea     ebx, [ecx+edi-1]
imul    edi, ecx
neg     ebx
mov     edx, edi
and     edi, 0ffffh
shr     edx, 10h
sub     edi, edx
adc     edi, 0
cmp     edi, 1
sbb     edx, edx
and     edx, ebx
add     edi, edx
and     edi, 0ffffh
add     ax, di
movd    edx, mm0
movd    ebx, mm3
xor     edx, edi
xor     ebp, eax
xor     eax, ebx
xor     edi, esi
mov     esi, eax
mov     eax, edx
movzx   ecx, word ptr qword_10022744
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, word ptr qword_10022744+2
add     si, word ptr qword_10022744+4
movzx   ecx, word ptr qword_10022744+6
lea     ebx, [ecx+ebp-1]
imul    ebp, ecx
neg     ebx
mov     edx, ebp
and     ebp, 0ffffh
shr     edx, 10h
sub     ebp, edx
adc     ebp, 0
cmp     ebp, 1
sbb     edx, edx
and     edx, ebx
add     ebp, edx
and     ebp, 0ffffh
movd    mm0, eax
movd    mm3, edi
xor     eax, esi
xor     edi, ebp
movzx   ecx, word ptr dword_1002274c
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     di, ax
movzx   ecx, word ptr dword_1002274c+2
lea     ebx, [ecx+edi-1]
imul    edi, ecx
neg     ebx
mov     edx, edi
and     edi, 0ffffh
shr     edx, 10h
sub     edi, edx
adc     edi, 0
cmp     edi, 1
sbb     edx, edx
and     edx, ebx
add     edi, edx
and     edi, 0ffffh
add     ax, di
movd    edx, mm0
movd    ebx, mm3
xor     edx, edi
xor     ebp, eax
xor     eax, ebx
xor     edi, esi
mov     esi, eax
mov     eax, edx
movzx   ecx, word ptr qword_10022750
lea     ebx, [ecx+eax-1]
imul    eax, ecx
neg     ebx
mov     edx, eax
and     eax, 0ffffh
shr     edx, 10h
sub     eax, edx
adc     eax, 0
cmp     eax, 1
sbb     edx, edx
and     edx, ebx
add     eax, edx
and     eax, 0ffffh
add     si, word ptr qword_10022750+2
add     di, word ptr qword_10022750+4
movzx   ecx, word ptr qword_10022750+6
lea     ebx, [ecx+ebp-1]
imul    ebp, ecx
neg     ebx
mov     edx, ebp
and     ebp, 0ffffh
shr     edx, 10h
sub     ebp, edx
adc     ebp, 0
cmp     ebp, 1
sbb     edx, edx
and     edx, ebx
add     ebp, edx
and     ebp, 0ffffh
mov     ebx, [esp+18h]
movd    mm0, eax
movd    mm1, esi
movd    mm2, edi
movd    mm3, ebp
punpcklwd mm0, mm1
punpcklwd mm2, mm3
psllq   mm2, 20h
por     mm0, mm2
movq    mm1, mm0
psllw   mm0, 8
psrlw   mm1, 8
por     mm0, mm1
movq    qword ptr [ebx], mm0
pop     ebx
pop     esi
pop     edi
pop     ebp
retn    8
pusha
mov     esi, offset dword_100227a0
mov     edi, offset byte_10022760
mov     eax, [esi]
mov     ebx, [esi+4]
mov     ecx, [esi+8]
mov     ebp, edi
mov     edx, [esi+0ch]
mov     edi, ecx
xor     edi, edx
and     edi, ebx
xor     edi, edx
add     eax, [ebp+0]
lea     eax, [eax+edi-28955b88h]
rol     eax, 7
add     eax, ebx
mov     edi, ebx
xor     edi, ecx
and     edi, eax
xor     edi, ecx
add     edx, [ebp+4]
lea     edx, [edx+edi-173848aah]
rol     edx, 0ch
add     edx, eax
mov     edi, eax
xor     edi, ebx
and     edi, edx
xor     edi, ebx
add     ecx, [ebp+8]
lea     ecx, [ecx+edi+242070dbh]
rol     ecx, 11h
add     ecx, edx
mov     edi, edx
xor     edi, eax
and     edi, ecx
xor     edi, eax
add     ebx, [ebp+0ch]
lea     ebx, [ebx+edi-3e423112h]
rol     ebx, 16h
add     ebx, ecx
mov     edi, ecx
xor     edi, edx
and     edi, ebx
xor     edi, edx
add     eax, [ebp+10h]
lea     eax, [eax+edi-0a83f051h]
rol     eax, 7
add     eax, ebx
mov     edi, ebx
xor     edi, ecx
and     edi, eax
xor     edi, ecx
add     edx, [ebp+14h]
lea     edx, [edx+edi+4787c62ah]
rol     edx, 0ch
add     edx, eax
mov     edi, eax
xor     edi, ebx
and     edi, edx
xor     edi, ebx
add     ecx, [ebp+18h]
lea     ecx, [ecx+edi-57cfb9edh]
rol     ecx, 11h
add     ecx, edx
mov     edi, edx
xor     edi, eax
and     edi, ecx
xor     edi, eax
add     ebx, [ebp+1ch]
lea     ebx, [ebx+edi-2b96affh]
rol     ebx, 16h
add     ebx, ecx
mov     edi, ecx
xor     edi, edx
and     edi, ebx
xor     edi, edx
add     eax, [ebp+20h]
lea     eax, [eax+edi+698098d8h]
rol     eax, 7
add     eax, ebx
mov     edi, ebx
xor     edi, ecx
and     edi, eax
xor     edi, ecx
add     edx, [ebp+24h]
lea     edx, [edx+edi-74bb0851h]
rol     edx, 0ch
add     edx, eax
mov     edi, eax
xor     edi, ebx
and     edi, edx
xor     edi, ebx
add     ecx, [ebp+28h]
lea     ecx, [ecx+edi-0a44fh]
rol     ecx, 11h
add     ecx, edx
mov     edi, edx
xor     edi, eax
and     edi, ecx
xor     edi, eax
add     ebx, [ebp+2ch]
lea     ebx, [ebx+edi-76a32842h]
rol     ebx, 16h
add     ebx, ecx
mov     edi, ecx
xor     edi, edx
and     edi, ebx
xor     edi, edx
add     eax, [ebp+30h]
lea     eax, [eax+edi+6b901122h]
rol     eax, 7
add     eax, ebx
mov     edi, ebx
xor     edi, ecx
and     edi, eax
xor     edi, ecx
add     edx, [ebp+34h]
lea     edx, [edx+edi-2678e6dh]
rol     edx, 0ch
add     edx, eax
mov     edi, eax
xor     edi, ebx
and     edi, edx
xor     edi, ebx
add     ecx, [ebp+38h]
lea     ecx, [ecx+edi-5986bc72h]
rol     ecx, 11h
add     ecx, edx
mov     edi, edx
xor     edi, eax
and     edi, ecx
xor     edi, eax
add     ebx, [ebp+3ch]
lea     ebx, [ebx+edi+49b40821h]
rol     ebx, 16h
add     ebx, ecx
mov     edi, ecx
xor     edi, ebx
and     edi, edx
xor     edi, ecx
add     eax, [ebp+4]
lea     eax, [eax+edi-9e1da9eh]
rol     eax, 5
add     eax, ebx
mov     edi, ebx
xor     edi, eax
and     edi, ecx
xor     edi, ebx
add     edx, [ebp+18h]
lea     edx, [edx+edi-3fbf4cc0h]
rol     edx, 9
add     edx, eax
mov     edi, eax
xor     edi, edx
and     edi, ebx
xor     edi, eax
add     ecx, [ebp+2ch]
lea     ecx, [ecx+edi+265e5a51h]
rol     ecx, 0eh
add     ecx, edx
mov     edi, edx
xor     edi, ecx
and     edi, eax
xor     edi, edx
add     ebx, [ebp+0]
lea     ebx, [ebx+edi-16493856h]
rol     ebx, 14h
add     ebx, ecx
mov     edi, ecx
xor     edi, ebx
and     edi, edx
xor     edi, ecx
add     eax, [ebp+14h]
lea     eax, [eax+edi-29d0efa3h]
rol     eax, 5
add     eax, ebx
mov     edi, ebx
xor     edi, eax
and     edi, ecx
xor     edi, ebx
add     edx, [ebp+28h]
lea     edx, [edx+edi+2441453h]
rol     edx, 9
add     edx, eax
mov     edi, eax
xor     edi, edx
and     edi, ebx
xor     edi, eax
add     ecx, [ebp+3ch]
lea     ecx, [ecx+edi-275e197fh]
rol     ecx, 0eh
add     ecx, edx
mov     edi, edx
xor     edi, ecx
and     edi, eax
xor     edi, edx
add     ebx, [ebp+10h]
lea     ebx, [ebx+edi-182c0438h]
rol     ebx, 14h
add     ebx, ecx
mov     edi, ecx
xor     edi, ebx
and     edi, edx
xor     edi, ecx
add     eax, [ebp+24h]
lea     eax, [eax+edi+21e1cde6h]
rol     eax, 5
add     eax, ebx
mov     edi, ebx
xor     edi, eax
and     edi, ecx
xor     edi, ebx
add     edx, [ebp+38h]
lea     edx, [edx+edi-3cc8f82ah]
rol     edx, 9
add     edx, eax
mov     edi, eax
xor     edi, edx
and     edi, ebx
xor     edi, eax
add     ecx, [ebp+0ch]
lea     ecx, [ecx+edi-0b2af279h]
rol     ecx, 0eh
add     ecx, edx
mov     edi, edx
xor     edi, ecx
and     edi, eax
xor     edi, edx
add     ebx, [ebp+20h]
lea     ebx, [ebx+edi+455a14edh]
rol     ebx, 14h
add     ebx, ecx
mov     edi, ecx
xor     edi, ebx
and     edi, edx
xor     edi, ecx
add     eax, [ebp+34h]
lea     eax, [eax+edi-561c16fbh]
rol     eax, 5
add     eax, ebx
mov     edi, ebx
xor     edi, eax
and     edi, ecx
xor     edi, ebx
add     edx, [ebp+8]
lea     edx, [edx+edi-3105c08h]
rol     edx, 9
add     edx, eax
mov     edi, eax
xor     edi, edx
and     edi, ebx
xor     edi, eax
add     ecx, [ebp+1ch]
lea     ecx, [ecx+edi+676f02d9h]
rol     ecx, 0eh
add     ecx, edx
mov     edi, edx
xor     edi, ecx
and     edi, eax
xor     edi, edx
add     ebx, [ebp+30h]
lea     ebx, [ebx+edi-72d5b376h]
rol     ebx, 14h
add     ebx, ecx
mov     edi, ecx
xor     edi, edx
xor     edi, ebx
add     eax, [ebp+14h]
lea     eax, [edi+eax-5c6beh]
rol     eax, 4
add     eax, ebx
mov     edi, ebx
xor     edi, ecx
xor     edi, eax
add     edx, [ebp+20h]
lea     edx, [edi+edx-788e097fh]
rol     edx, 0bh
add     edx, eax
mov     edi, eax
xor     edi, ebx
xor     edi, edx
add     ecx, [ebp+2ch]
lea     ecx, [edi+ecx+6d9d6122h]
rol     ecx, 10h
add     ecx, edx
mov     edi, edx
xor     edi, eax
xor     edi, ecx
add     ebx, [ebp+38h]
lea     ebx, [edi+ebx-21ac7f4h]
rol     ebx, 17h
add     ebx, ecx
mov     edi, ecx
xor     edi, edx
xor     edi, ebx
add     eax, [ebp+4]
lea     eax, [edi+eax-5b4115bch]
rol     eax, 4
add     eax, ebx
mov     edi, ebx
xor     edi, ecx
xor     edi, eax
add     edx, [ebp+10h]
lea     edx, [edi+edx+4bdecfa9h]
rol     edx, 0bh
add     edx, eax
mov     edi, eax
xor     edi, ebx
xor     edi, edx
add     ecx, [ebp+1ch]
lea     ecx, [edi+ecx-944b4a0h]
rol     ecx, 10h
add     ecx, edx
mov     edi, edx
xor     edi, eax
xor     edi, ecx
add     ebx, [ebp+28h]
lea     ebx, [edi+ebx-41404390h]
rol     ebx, 17h
add     ebx, ecx
mov     edi, ecx
xor     edi, edx
xor     edi, ebx
add     eax, [ebp+34h]
lea     eax, [edi+eax+289b7ec6h]
rol     eax, 4
add     eax, ebx
mov     edi, ebx
xor     edi, ecx
xor     edi, eax
add     edx, [ebp+0]
lea     edx, [edi+edx-155ed806h]
rol     edx, 0bh
add     edx, eax
mov     edi, eax
xor     edi, ebx
xor     edi, edx
add     ecx, [ebp+0ch]
lea     ecx, [edi+ecx-2b10cf7bh]
rol     ecx, 10h
add     ecx, edx
mov     edi, edx
xor     edi, eax
xor     edi, ecx
add     ebx, [ebp+18h]
lea     ebx, [edi+ebx+4881d05h]
rol     ebx, 17h
add     ebx, ecx
mov     edi, ecx
xor     edi, edx
xor     edi, ebx
add     eax, [ebp+24h]
lea     eax, [edi+eax-262b2fc7h]
rol     eax, 4
add     eax, ebx
mov     edi, ebx
xor     edi, ecx
xor     edi, eax
add     edx, [ebp+30h]
lea     edx, [edi+edx-1924661bh]
rol     edx, 0bh
add     edx, eax
mov     edi, eax
xor     edi, ebx
xor     edi, edx
add     ecx, [ebp+3ch]
lea     ecx, [edi+ecx+1fa27cf8h]
rol     ecx, 10h
add     ecx, edx
mov     edi, edx
xor     edi, eax
xor     edi, ecx
add     ebx, [ebp+8]
lea     ebx, [edi+ebx-3b53a99bh]
rol     ebx, 17h
add     ebx, ecx
mov     edi, edx
xor     edi, 0ffffffffh
or      edi, ebx
xor     edi, ecx
add     eax, [ebp+0]
lea     eax, [eax+edi-0bd6ddbch]
rol     eax, 6
add     eax, ebx
mov     edi, ecx
xor     edi, 0ffffffffh
or      edi, eax
xor     edi, ebx
add     edx, [ebp+1ch]
lea     edx, [edx+edi+432aff97h]
rol     edx, 0ah
add     edx, eax
mov     edi, ebx
xor     edi, 0ffffffffh
or      edi, edx
xor     edi, eax
add     ecx, [ebp+38h]
lea     ecx, [ecx+edi-546bdc59h]
rol     ecx, 0fh
add     ecx, edx
mov     edi, eax
xor     edi, 0ffffffffh
or      edi, ecx
xor     edi, edx
add     ebx, [ebp+14h]
lea     ebx, [ebx+edi-36c5fc7h]
rol     ebx, 15h
add     ebx, ecx
mov     edi, edx
xor     edi, 0ffffffffh
or      edi, ebx
xor     edi, ecx
add     eax, [ebp+30h]
lea     eax, [eax+edi+655b59c3h]
rol     eax, 6
add     eax, ebx
mov     edi, ecx
xor     edi, 0ffffffffh
or      edi, eax
xor     edi, ebx
add     edx, [ebp+0ch]
lea     edx, [edx+edi-70f3336eh]
rol     edx, 0ah
add     edx, eax
mov     edi, ebx
xor     edi, 0ffffffffh
or      edi, edx
xor     edi, eax
add     ecx, [ebp+28h]
lea     ecx, [ecx+edi-100b83h]
rol     ecx, 0fh
add     ecx, edx
mov     edi, eax
xor     edi, 0ffffffffh
or      edi, ecx
xor     edi, edx
add     ebx, [ebp+4]
lea     ebx, [ebx+edi-7a7ba22fh]
rol     ebx, 15h
add     ebx, ecx
mov     edi, edx
xor     edi, 0ffffffffh
or      edi, ebx
xor     edi, ecx
add     eax, [ebp+20h]
lea     eax, [eax+edi+6fa87e4fh]
rol     eax, 6
add     eax, ebx
mov     edi, ecx
xor     edi, 0ffffffffh
or      edi, eax
xor     edi, ebx
add     edx, [ebp+3ch]
lea     edx, [edx+edi-1d31920h]
rol     edx, 0ah
add     edx, eax
mov     edi, ebx
xor     edi, 0ffffffffh
or      edi, edx
xor     edi, eax
add     ecx, [ebp+18h]
lea     ecx, [ecx+edi-5cfebcech]
rol     ecx, 0fh
add     ecx, edx
mov     edi, eax
xor     edi, 0ffffffffh
or      edi, ecx
xor     edi, edx
add     ebx, [ebp+34h]
lea     ebx, [ebx+edi+4e0811a1h]
rol     ebx, 15h
add     ebx, ecx
mov     edi, edx
xor     edi, 0ffffffffh
or      edi, ebx
xor     edi, ecx
add     eax, [ebp+10h]
lea     eax, [eax+edi-8ac817eh]
rol     eax, 6
add     eax, ebx
mov     edi, ecx
xor     edi, 0ffffffffh
or      edi, eax
xor     edi, ebx
add     edx, [ebp+2ch]
lea     edx, [edx+edi-42c50dcbh]
rol     edx, 0ah
add     edx, eax
mov     edi, ebx
xor     edi, 0ffffffffh
or      edi, edx
xor     edi, eax
add     ecx, [ebp+8]
lea     ecx, [ecx+edi+2ad7d2bbh]
rol     ecx, 0fh
add     ecx, edx
mov     edi, eax
xor     edi, 0ffffffffh
or      edi, ecx
xor     edi, edx
add     ebx, [ebp+24h]
lea     ebx, [ebx+edi-14792c6fh]
rol     ebx, 15h
add     ebx, ecx
add     [esi], eax
add     [esi+4], ebx
add     [esi+8], ecx
add     [esi+0ch], edx
popa
retn
push    edi
xor     eax, eax
mov     dword_100227b0, eax
xor     eax, eax
mov     dword_100227b4, eax
mov     edi, offset byte_10022760
mov     ecx, 10h
rep stosd
mov     eax, offset dword_100227a0
mov     dword ptr [eax], 67452301h
mov     dword ptr [eax+4], 0efcdab89h
mov     dword ptr [eax+8], 98badcfeh
mov     dword ptr [eax+0ch], 10325476h
pop     edi
retn
push    ebp
mov     ebp, esp
push    esi
push    edi
push    ebx
mov     ebx, [ebp+arg_4]
mov     esi, [ebp+arg_0]
add     dword_100227b0, ebx
jmp     short loc_1000a60c
mov     eax, dword_100227b4
mov     ecx, 40h
sub     ecx, eax
lea     edi, byte_10022760[eax]
cmp     ecx, ebx
ja      short loc_1000a600
sub     ebx, ecx
rep movsb
call    sub_10009fa0
xor     eax, eax
mov     dword_100227b4, eax
mov     edi, offset byte_10022760
mov     ecx, 10h
rep stosd
jmp     short loc_1000a60c
mov     ecx, ebx
rep movsb
add     dword_100227b4, ebx
jmp     short loc_1000a610
or      ebx, ebx
jnz     short loc_1000a5cc
pop     ebx
pop     edi
pop     esi
leave
retn    8
push    esi
push    edi
mov     ecx, dword_100227b4
mov     byte_10022760[ecx], 80h
cmp     ecx, 38h
jb      short loc_1000a644
call    sub_10009fa0
xor     eax, eax
mov     dword_100227b4, eax
mov     edi, offset byte_10022760
mov     ecx, 10h
rep stosd
mov     eax, dword_100227b0
xor     edx, edx
shld    edx, eax, 3
shl     eax, 3
mov     dword_10022798, eax
mov     dword_1002279c, edx
call    sub_10009fa0
mov     eax, offset dword_100227a0
pop     edi
pop     esi
retn
push    ebp
mov     ebp, esp
add     esp, 0fffffff8h
lea     eax, [ebp+dwdisposition]
push    eax
lea     eax, [ebp+phkresult]
push    eax
push    0
push    0f003fh
push    0
push    0
push    0
push    [ebp+lpsubkey]
push    [ebp+hkey]
call    regcreatekeyexa
or      eax, eax
jnz     short locret_1000a72f
push    [ebp+lpvaluename]
push    [ebp+phkresult]
call    regdeletevaluea
push    eax
push    [ebp+phkresult]
call    regclosekey
pop     eax
leave
retn    0ch
push    ebp
mov     ebp, esp
add     esp, 0fffffff4h
push    [ebp+arg_c]
pop     dword ptr [ebp+data]
lea     eax, [ebp+dwdisposition]
push    eax
lea     eax, [ebp+phkresult]
push    eax
push    0
push    0f003fh
push    0
push    0
push    0
push    [ebp+lpsubkey]
push    [ebp+hkey]
call    regcreatekeyexa
or      eax, eax
jnz     short locret_1000a78f
push    4
lea     eax, [ebp+data]
push    eax
push    4
push    0
push    [ebp+lpvaluename]
push    [ebp+phkresult]
call    regsetvalueexa
push    eax
push    [ebp+phkresult]
call    regclosekey
pop     eax
leave
retn    10h
push    ebp
mov     ebp, esp
add     esp, 0ffffff60h
cmp     [ebp+arg_10], 1
jnz     short loc_1000a7e5
mov     [ebp+versioninformation.dwosversioninfosize], 94h
lea     eax, [ebp+versioninformation]
push    eax
call    getversionexa
cmp     [ebp+versioninformation.dwmajorversion], 5
jb      short loc_1000a7de
cmp     [ebp+versioninformation.dwminorversion], 1
jb      short loc_1000a7de
mov     ecx, 101h
jmp     short loc_1000a7ea
mov     ecx, 1
jmp     short loc_1000a7ea
mov     ecx, 0f003fh
lea     eax, [ebp+dwdisposition]
push    eax
lea     eax, [ebp+phkresult]
push    eax
push    0
push    ecx
push    0
push    0
push    0
push    [ebp+lpsubkey]
push    [ebp+hkey]
call    regcreatekeyexa
or      eax, eax
jnz     short locret_1000a834
push    [ebp+lpstring]
call    lstrlena
mov     [ebp+cbdata], eax
push    [ebp+cbdata]
push    [ebp+lpstring]
push    1
push    0
push    [ebp+lpvaluename]
push    [ebp+phkresult]
call    regsetvalueexa
push    eax
push    [ebp+phkresult]
call    regclosekey
pop     eax
leave
retn    14h