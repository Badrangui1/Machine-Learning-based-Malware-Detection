import os
import re

# 주석 제거 함수
def remove_comments(code):
    return '\n'.join(line.split(';')[0].strip() for line in code.split('\n') if line.split(';')[0].strip())

# 불필요한 공백 제거 함수
def remove_extra_whitespaces(code):
    return '\n'.join(line.strip() for line in code.split('\n') if line.strip())

# 코드 표준화 함수 (소문자로 변환)
def standardize_code(code):
    return '\n'.join(line.lower() for line in code.split('\n') if line.strip())

# 레이블 표준화 함수
def standardize_labels(code):
    label_pattern = re.compile(r'^\s*(\w+):', re.MULTILINE)
    labels = label_pattern.findall(code)
    label_mapping = {label: f'label_{i}' for i, label in enumerate(labels)}

    def replace_label(match):
        return f'{label_mapping[match.group(1)]}:'

    def replace_label_references(match):
        label = match.group(0)
        return label_mapping.get(label, label)

    # 레이블 정의를 변환
    code = label_pattern.sub(replace_label, code)
    
    # 레이블 참조를 변환
    for label, std_label in label_mapping.items():
        code = re.sub(r'\b' + re.escape(label) + r'\b', std_label, code)
    
    return code

# 전체 전처리 함수
def preprocess_assembly_code(code):
    code = remove_comments(code)
    code = remove_extra_whitespaces(code)
    code = standardize_code(code)
    code = standardize_labels(code)
    return code

# 디렉토리 내의 모든 어셈블리어 파일을 전처리하는 함수
def preprocess_files(directory):
    for filename in os.listdir(directory):
        if filename.endswith(".asm"):
            filepath = os.path.join(directory, filename)
            try:
                with open(filepath, 'r', encoding='utf-8') as file:
                    code = file.read()
                processed_code = preprocess_assembly_code(code)
                with open(filepath, 'w', encoding='utf-8') as file:
                    file.write(processed_code)
            except Exception as e:
                print(f"Error processing file {filepath}: {e}")

# 어셈블리어 코드 파일들이 있는 디렉토리 경로 설정
directory_path = 'data_Set'
preprocess_files(directory_path)
